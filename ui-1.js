LavaPack.loadBundle([
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\swaps\\swaps.js", {"../../../shared/constants/swaps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\swaps.js","../../../shared/constants/transaction":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\transaction.js","../../../shared/modules/conversion.utils":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\modules\\conversion.utils.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../helpers/utils/conversions.util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\conversions.util.js","../../helpers/utils/token-util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\token-util.js","../../pages/send/send.utils":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\send.utils.js","../../pages/swaps/swaps.util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\swaps.util.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","../metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","@reduxjs/toolkit":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@reduxjs\\toolkit\\dist\\index.js","@sentry/browser":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@sentry\\browser\\dist\\index.js","bignumber.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\bignumber.js\\bignumber.js","loglevel":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\loglevel\\lib\\loglevel.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\ducks\swaps\swaps.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FALLBACK_GAS_MULTIPLIER = void 0;
exports.cancelSwapsSmartTransaction = cancelSwapsSmartTransaction;
exports.dismissCurrentSmartTransactionsErrorMessage = exports.default = exports.clearSwapsState = void 0;
exports.estimateSwapsSmartTransactionsGas = estimateSwapsSmartTransactionsGas;
exports.fetchAndSetSwapsGasPriceInfo = void 0;
exports.fetchMetaSwapsGasPriceEstimates = fetchMetaSwapsGasPriceEstimates;
exports.fetchSwapsLivenessAndFeatureFlags = exports.fetchQuotesAndSetQuoteState = void 0;
exports.fetchSwapsSmartTransactionFees = fetchSwapsSmartTransactionFees;
exports.setTopAssets = exports.setSwapsFromToken = exports.setSwapToToken = exports.setSwapQuotesFetchStartTime = exports.setReviewSwapClickedTimestamp = exports.setMaxSlippage = exports.setIsFeatureFlagLoaded = exports.setFromTokenInputValue = exports.setFromTokenError = exports.setFetchingQuotes = exports.setBalanceError = exports.setAggregatorMetadata = exports.prepareToLeaveSwaps = exports.prepareForRetryGetQuotes = exports.navigateBackToBuildQuote = exports.getUsedSwapsGasPrice = exports.getUsedQuote = exports.getTradeTxId = exports.getTopQuote = exports.getTopAssets = exports.getToToken = exports.getSwapsWelcomeMessageSeenStatus = exports.getSwapsUserFeeLevel = exports.getSwapsTokens = exports.getSwapsSTXLoading = exports.getSwapsRefreshStates = exports.getSwapsQuoteRefreshTime = exports.getSwapsQuotePrefetchingRefreshTime = exports.getSwapsFeatureIsLive = exports.getSwapsFallbackGasPrice = exports.getSwapsErrorKey = exports.getSwapsCustomizationModalPrice = exports.getSwapsCustomizationModalLimit = exports.getSwapGasPriceEstimateData = exports.getSmartTransactionsOptInStatus = exports.getSmartTransactionsErrorMessageDismissed = exports.getSmartTransactionsError = exports.getSmartTransactionsEnabled = exports.getSmartTransactionFees = exports.getSmartTransactionEstimatedGas = exports.getShowQuoteLoadingScreen = exports.getSelectedQuote = exports.getReviewSwapClickedTimestamp = exports.getQuotesLastFetched = exports.getQuotesFetchStartTime = exports.getQuotes = exports.getPendingSmartTransactions = exports.getMaxSlippage = exports.getIsFeatureFlagLoaded = exports.getFromTokenInputValue = exports.getFromTokenError = exports.getFromToken = exports.getFetchingQuotes = exports.getFetchParams = exports.getDestinationTokenInfo = exports.getCustomSwapsGasPrice = exports.getCustomSwapsGas = exports.getCustomMaxPriorityFeePerGas = exports.getCustomMaxFeePerGas = exports.getCurrentSmartTransactionsErrorMessageDismissed = exports.getCurrentSmartTransactionsError = exports.getCurrentSmartTransactionsEnabled = exports.getCurrentSmartTransactions = exports.getBalanceError = exports.getBackgroundSwapRouteState = exports.getApproveTxParams = exports.getApproveTxId = exports.getAggregatorMetadata = void 0;
exports.shouldShowCustomPriceTooLowWarning = shouldShowCustomPriceTooLowWarning;
exports.swapsQuoteSelected = exports.swapGasPriceEstimateIsLoading = exports.swapGasEstimateLoadingHasFailed = exports.swapCustomGasModalPriceEdited = exports.swapCustomGasModalLimitEdited = exports.swapCustomGasModalClosed = exports.signAndSendTransactions = exports.signAndSendSwapsSmartTransaction = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toolkit = require("@reduxjs/toolkit");

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _loglevel = _interopRequireDefault(require("loglevel"));

var _browser = require("@sentry/browser");

var _actions = require("../../store/actions");

var _routes = require("../../helpers/constants/routes");

var _swaps = require("../../pages/swaps/swaps.util");

var _send = require("../../pages/send/send.utils");

var _conversions = require("../../helpers/utils/conversions.util");

var _conversion = require("../../../shared/modules/conversion.utils");

var _tokenUtil = require("../../helpers/utils/token-util");

var _selectors = require("../../selectors");

var _swaps2 = require("../../../shared/constants/swaps");

var _transaction = require("../../../shared/constants/transaction");

var _metamask = require("../metamask/metamask");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const GAS_PRICES_LOADING_STATES = {
  INITIAL: 'INITIAL',
  LOADING: 'LOADING',
  FAILED: 'FAILED',
  COMPLETED: 'COMPLETED'
};
const FALLBACK_GAS_MULTIPLIER = 1.5;
exports.FALLBACK_GAS_MULTIPLIER = FALLBACK_GAS_MULTIPLIER;
const initialState = {
  aggregatorMetadata: null,
  approveTxId: null,
  tradeTxId: null,
  balanceError: false,
  fetchingQuotes: false,
  fromToken: null,
  fromTokenInputValue: '',
  fromTokenError: null,
  isFeatureFlagLoaded: false,
  maxSlippage: 3,
  quotesFetchStartTime: null,
  reviewSwapClickedTimestamp: null,
  topAssets: {},
  toToken: null,
  customGas: {
    price: null,
    limit: null,
    loading: GAS_PRICES_LOADING_STATES.INITIAL,
    priceEstimates: {},
    fallBackPrice: null
  },
  currentSmartTransactionsError: '',
  currentSmartTransactionsErrorMessageDismissed: false,
  swapsSTXLoading: false
};
const slice = (0, _toolkit.createSlice)({
  name: 'swaps',
  initialState,
  reducers: {
    clearSwapsState: () => initialState,
    navigatedBackToBuildQuote: state => {
      state.approveTxId = null;
      state.tradeTxId = null;
      state.balanceError = false;
      state.fetchingQuotes = false;
      state.customGas.limit = null;
      state.customGas.price = null;
    },
    retriedGetQuotes: state => {
      state.approveTxId = null;
      state.balanceError = false;
      state.fetchingQuotes = false;
    },
    setAggregatorMetadata: (state, action) => {
      state.aggregatorMetadata = action.payload;
    },
    setBalanceError: (state, action) => {
      state.balanceError = action.payload;
    },
    setFetchingQuotes: (state, action) => {
      state.fetchingQuotes = action.payload;
    },
    setFromToken: (state, action) => {
      state.fromToken = action.payload;
    },
    setFromTokenInputValue: (state, action) => {
      state.fromTokenInputValue = action.payload;
    },
    setFromTokenError: (state, action) => {
      state.fromTokenError = action.payload;
    },
    setIsFeatureFlagLoaded: (state, action) => {
      state.isFeatureFlagLoaded = action.payload;
    },
    setMaxSlippage: (state, action) => {
      state.maxSlippage = action.payload;
    },
    setQuotesFetchStartTime: (state, action) => {
      state.quotesFetchStartTime = action.payload;
    },
    setReviewSwapClickedTimestamp: (state, action) => {
      state.reviewSwapClickedTimestamp = action.payload;
    },
    setTopAssets: (state, action) => {
      state.topAssets = action.payload;
    },
    setToToken: (state, action) => {
      state.toToken = action.payload;
    },
    swapCustomGasModalClosed: state => {
      state.customGas.price = null;
      state.customGas.limit = null;
    },
    swapCustomGasModalPriceEdited: (state, action) => {
      state.customGas.price = action.payload;
    },
    swapCustomGasModalLimitEdited: (state, action) => {
      state.customGas.limit = action.payload;
    },
    swapGasPriceEstimatesFetchStarted: state => {
      state.customGas.loading = GAS_PRICES_LOADING_STATES.LOADING;
    },
    swapGasPriceEstimatesFetchFailed: state => {
      state.customGas.loading = GAS_PRICES_LOADING_STATES.FAILED;
    },
    swapGasPriceEstimatesFetchCompleted: (state, action) => {
      state.customGas.priceEstimates = action.payload.priceEstimates;
      state.customGas.loading = GAS_PRICES_LOADING_STATES.COMPLETED;
    },
    retrievedFallbackSwapsGasPrice: (state, action) => {
      state.customGas.fallBackPrice = action.payload;
    },
    setCurrentSmartTransactionsError: (state, action) => {
      const errorType = _swaps.stxErrorTypes.includes(action.payload) ? action.payload : _swaps.stxErrorTypes[0];
      state.currentSmartTransactionsError = errorType;
    },
    dismissCurrentSmartTransactionsErrorMessage: state => {
      state.currentSmartTransactionsErrorMessageDismissed = true;
    },
    setSwapsSTXSubmitLoading: (state, action) => {
      state.swapsSTXLoading = action.payload || false;
    }
  }
});
const {
  actions,
  reducer
} = slice;
var _default = reducer; // Selectors

exports.default = _default;

const getAggregatorMetadata = state => state.swaps.aggregatorMetadata;

exports.getAggregatorMetadata = getAggregatorMetadata;

const getBalanceError = state => state.swaps.balanceError;

exports.getBalanceError = getBalanceError;

const getFromToken = state => state.swaps.fromToken;

exports.getFromToken = getFromToken;

const getFromTokenError = state => state.swaps.fromTokenError;

exports.getFromTokenError = getFromTokenError;

const getFromTokenInputValue = state => state.swaps.fromTokenInputValue;

exports.getFromTokenInputValue = getFromTokenInputValue;

const getIsFeatureFlagLoaded = state => state.swaps.isFeatureFlagLoaded;

exports.getIsFeatureFlagLoaded = getIsFeatureFlagLoaded;

const getSwapsSTXLoading = state => state.swaps.swapsSTXLoading;

exports.getSwapsSTXLoading = getSwapsSTXLoading;

const getMaxSlippage = state => state.swaps.maxSlippage;

exports.getMaxSlippage = getMaxSlippage;

const getTopAssets = state => state.swaps.topAssets;

exports.getTopAssets = getTopAssets;

const getToToken = state => state.swaps.toToken;

exports.getToToken = getToToken;

const getFetchingQuotes = state => state.swaps.fetchingQuotes;

exports.getFetchingQuotes = getFetchingQuotes;

const getQuotesFetchStartTime = state => state.swaps.quotesFetchStartTime;

exports.getQuotesFetchStartTime = getQuotesFetchStartTime;

const getReviewSwapClickedTimestamp = state => state.swaps.reviewSwapClickedTimestamp;

exports.getReviewSwapClickedTimestamp = getReviewSwapClickedTimestamp;

const getSwapsCustomizationModalPrice = state => state.swaps.customGas.price;

exports.getSwapsCustomizationModalPrice = getSwapsCustomizationModalPrice;

const getSwapsCustomizationModalLimit = state => state.swaps.customGas.limit;

exports.getSwapsCustomizationModalLimit = getSwapsCustomizationModalLimit;

const swapGasPriceEstimateIsLoading = state => state.swaps.customGas.loading === GAS_PRICES_LOADING_STATES.LOADING;

exports.swapGasPriceEstimateIsLoading = swapGasPriceEstimateIsLoading;

const swapGasEstimateLoadingHasFailed = state => state.swaps.customGas.loading === GAS_PRICES_LOADING_STATES.INITIAL;

exports.swapGasEstimateLoadingHasFailed = swapGasEstimateLoadingHasFailed;

const getSwapGasPriceEstimateData = state => state.swaps.customGas.priceEstimates;

exports.getSwapGasPriceEstimateData = getSwapGasPriceEstimateData;

const getSwapsFallbackGasPrice = state => state.swaps.customGas.fallBackPrice;

exports.getSwapsFallbackGasPrice = getSwapsFallbackGasPrice;

const getCurrentSmartTransactionsError = state => state.swaps.currentSmartTransactionsError;

exports.getCurrentSmartTransactionsError = getCurrentSmartTransactionsError;

const getCurrentSmartTransactionsErrorMessageDismissed = state => state.swaps.currentSmartTransactionsErrorMessageDismissed;

exports.getCurrentSmartTransactionsErrorMessageDismissed = getCurrentSmartTransactionsErrorMessageDismissed;

function shouldShowCustomPriceTooLowWarning(state) {
  const {
    average
  } = getSwapGasPriceEstimateData(state);
  const customGasPrice = getSwapsCustomizationModalPrice(state);

  if (!customGasPrice || average === undefined) {
    return false;
  }

  const customPriceRisksSwapFailure = (0, _conversion.conversionLessThan)({
    value: customGasPrice,
    fromNumericBase: 'hex',
    fromDenomination: 'WEI',
    toDenomination: 'GWEI'
  }, {
    value: average,
    fromNumericBase: 'dec'
  });
  return customPriceRisksSwapFailure;
} // Background selectors


const getSwapsState = state => state.metamask.swapsState;

const getSwapsFeatureIsLive = state => state.metamask.swapsState.swapsFeatureIsLive;

exports.getSwapsFeatureIsLive = getSwapsFeatureIsLive;

const getSmartTransactionsError = state => state.appState.smartTransactionsError;

exports.getSmartTransactionsError = getSmartTransactionsError;

const getSmartTransactionsErrorMessageDismissed = state => state.appState.smartTransactionsErrorMessageDismissed;

exports.getSmartTransactionsErrorMessageDismissed = getSmartTransactionsErrorMessageDismissed;

const getSmartTransactionsEnabled = state => {
  var _state$metamask$swaps, _state$metamask$swaps2, _state$metamask$swaps3, _state$metamask$smart;

  const hardwareWalletUsed = (0, _selectors.isHardwareWallet)(state);
  const chainId = (0, _selectors.getCurrentChainId)(state);

  const isAllowedNetwork = _swaps2.ALLOWED_SMART_TRANSACTIONS_CHAIN_IDS.includes(chainId);

  const smartTransactionsFeatureFlagEnabled = (_state$metamask$swaps = state.metamask.swapsState) === null || _state$metamask$swaps === void 0 ? void 0 : (_state$metamask$swaps2 = _state$metamask$swaps.swapsFeatureFlags) === null || _state$metamask$swaps2 === void 0 ? void 0 : (_state$metamask$swaps3 = _state$metamask$swaps2.smartTransactions) === null || _state$metamask$swaps3 === void 0 ? void 0 : _state$metamask$swaps3.extensionActive;
  const smartTransactionsLiveness = (_state$metamask$smart = state.metamask.smartTransactionsState) === null || _state$metamask$smart === void 0 ? void 0 : _state$metamask$smart.liveness;
  return Boolean(isAllowedNetwork && !hardwareWalletUsed && smartTransactionsFeatureFlagEnabled && smartTransactionsLiveness);
};

exports.getSmartTransactionsEnabled = getSmartTransactionsEnabled;

const getCurrentSmartTransactionsEnabled = state => {
  const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
  const currentSmartTransactionsError = getCurrentSmartTransactionsError(state);
  return smartTransactionsEnabled && !currentSmartTransactionsError;
};

exports.getCurrentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled;

const getSwapsQuoteRefreshTime = state => state.metamask.swapsState.swapsQuoteRefreshTime;

exports.getSwapsQuoteRefreshTime = getSwapsQuoteRefreshTime;

const getSwapsQuotePrefetchingRefreshTime = state => state.metamask.swapsState.swapsQuotePrefetchingRefreshTime;

exports.getSwapsQuotePrefetchingRefreshTime = getSwapsQuotePrefetchingRefreshTime;

const getBackgroundSwapRouteState = state => state.metamask.swapsState.routeState;

exports.getBackgroundSwapRouteState = getBackgroundSwapRouteState;

const getCustomSwapsGas = state => state.metamask.swapsState.customMaxGas;

exports.getCustomSwapsGas = getCustomSwapsGas;

const getCustomSwapsGasPrice = state => state.metamask.swapsState.customGasPrice;

exports.getCustomSwapsGasPrice = getCustomSwapsGasPrice;

const getCustomMaxFeePerGas = state => state.metamask.swapsState.customMaxFeePerGas;

exports.getCustomMaxFeePerGas = getCustomMaxFeePerGas;

const getCustomMaxPriorityFeePerGas = state => state.metamask.swapsState.customMaxPriorityFeePerGas;

exports.getCustomMaxPriorityFeePerGas = getCustomMaxPriorityFeePerGas;

const getSwapsUserFeeLevel = state => state.metamask.swapsState.swapsUserFeeLevel;

exports.getSwapsUserFeeLevel = getSwapsUserFeeLevel;

const getFetchParams = state => state.metamask.swapsState.fetchParams;

exports.getFetchParams = getFetchParams;

const getQuotes = state => state.metamask.swapsState.quotes;

exports.getQuotes = getQuotes;

const getQuotesLastFetched = state => state.metamask.swapsState.quotesLastFetched;

exports.getQuotesLastFetched = getQuotesLastFetched;

const getSelectedQuote = state => {
  const {
    selectedAggId,
    quotes
  } = getSwapsState(state);
  return quotes[selectedAggId];
};

exports.getSelectedQuote = getSelectedQuote;

const getSwapsErrorKey = state => {
  var _getSwapsState;

  return (_getSwapsState = getSwapsState(state)) === null || _getSwapsState === void 0 ? void 0 : _getSwapsState.errorKey;
};

exports.getSwapsErrorKey = getSwapsErrorKey;

const getShowQuoteLoadingScreen = state => state.swaps.showQuoteLoadingScreen;

exports.getShowQuoteLoadingScreen = getShowQuoteLoadingScreen;

const getSwapsTokens = state => state.metamask.swapsState.tokens;

exports.getSwapsTokens = getSwapsTokens;

const getSwapsWelcomeMessageSeenStatus = state => state.metamask.swapsWelcomeMessageHasBeenShown;

exports.getSwapsWelcomeMessageSeenStatus = getSwapsWelcomeMessageSeenStatus;

const getTopQuote = state => {
  const {
    topAggId,
    quotes
  } = getSwapsState(state);
  return quotes[topAggId];
};

exports.getTopQuote = getTopQuote;

const getApproveTxId = state => state.metamask.swapsState.approveTxId;

exports.getApproveTxId = getApproveTxId;

const getTradeTxId = state => state.metamask.swapsState.tradeTxId;

exports.getTradeTxId = getTradeTxId;

const getUsedQuote = state => getSelectedQuote(state) || getTopQuote(state); // Compound selectors


exports.getUsedQuote = getUsedQuote;

const getDestinationTokenInfo = state => {
  var _getFetchParams, _getFetchParams$metaD;

  return (_getFetchParams = getFetchParams(state)) === null || _getFetchParams === void 0 ? void 0 : (_getFetchParams$metaD = _getFetchParams.metaData) === null || _getFetchParams$metaD === void 0 ? void 0 : _getFetchParams$metaD.destinationTokenInfo;
};

exports.getDestinationTokenInfo = getDestinationTokenInfo;

const getUsedSwapsGasPrice = state => getCustomSwapsGasPrice(state) || getSwapsFallbackGasPrice(state);

exports.getUsedSwapsGasPrice = getUsedSwapsGasPrice;

const getApproveTxParams = state => {
  var _getSwapsState2;

  const {
    approvalNeeded
  } = getSelectedQuote(state) || getTopQuote(state) || {};

  if (!approvalNeeded) {
    return null;
  }

  const data = ((_getSwapsState2 = getSwapsState(state)) === null || _getSwapsState2 === void 0 ? void 0 : _getSwapsState2.customApproveTxData) || approvalNeeded.data;
  const gasPrice = getUsedSwapsGasPrice(state);
  return _objectSpread(_objectSpread({}, approvalNeeded), {}, {
    gasPrice,
    data
  });
};

exports.getApproveTxParams = getApproveTxParams;

const getSmartTransactionsOptInStatus = state => {
  var _state$metamask$smart2;

  return (_state$metamask$smart2 = state.metamask.smartTransactionsState) === null || _state$metamask$smart2 === void 0 ? void 0 : _state$metamask$smart2.userOptIn;
};

exports.getSmartTransactionsOptInStatus = getSmartTransactionsOptInStatus;

const getCurrentSmartTransactions = state => {
  var _state$metamask$smart3, _state$metamask$smart4;

  return (_state$metamask$smart3 = state.metamask.smartTransactionsState) === null || _state$metamask$smart3 === void 0 ? void 0 : (_state$metamask$smart4 = _state$metamask$smart3.smartTransactions) === null || _state$metamask$smart4 === void 0 ? void 0 : _state$metamask$smart4[(0, _selectors.getCurrentChainId)(state)];
};

exports.getCurrentSmartTransactions = getCurrentSmartTransactions;

const getPendingSmartTransactions = state => {
  const currentSmartTransactions = getCurrentSmartTransactions(state);

  if (!currentSmartTransactions || currentSmartTransactions.length === 0) {
    return [];
  }

  return currentSmartTransactions.filter(stx => stx.status === _transaction.SMART_TRANSACTION_STATUSES.PENDING);
};

exports.getPendingSmartTransactions = getPendingSmartTransactions;

const getSmartTransactionFees = state => {
  var _state$metamask$smart5;

  return (_state$metamask$smart5 = state.metamask.smartTransactionsState) === null || _state$metamask$smart5 === void 0 ? void 0 : _state$metamask$smart5.fees;
};

exports.getSmartTransactionFees = getSmartTransactionFees;

const getSmartTransactionEstimatedGas = state => {
  var _state$metamask$smart6;

  return (_state$metamask$smart6 = state.metamask.smartTransactionsState) === null || _state$metamask$smart6 === void 0 ? void 0 : _state$metamask$smart6.estimatedGas;
};

exports.getSmartTransactionEstimatedGas = getSmartTransactionEstimatedGas;

const getSwapsRefreshStates = state => {
  const {
    swapsQuoteRefreshTime,
    swapsQuotePrefetchingRefreshTime,
    swapsStxGetTransactionsRefreshTime,
    swapsStxBatchStatusRefreshTime,
    swapsStxStatusDeadline
  } = state.metamask.swapsState;
  return {
    quoteRefreshTime: swapsQuoteRefreshTime,
    quotePrefetchingRefreshTime: swapsQuotePrefetchingRefreshTime,
    stxGetTransactionsRefreshTime: swapsStxGetTransactionsRefreshTime,
    stxBatchStatusRefreshTime: swapsStxBatchStatusRefreshTime,
    stxStatusDeadline: swapsStxStatusDeadline
  };
}; // Actions / action-creators


exports.getSwapsRefreshStates = getSwapsRefreshStates;
const {
  clearSwapsState,
  navigatedBackToBuildQuote,
  retriedGetQuotes,
  swapGasPriceEstimatesFetchCompleted,
  swapGasPriceEstimatesFetchStarted,
  swapGasPriceEstimatesFetchFailed,
  setAggregatorMetadata,
  setBalanceError,
  setFetchingQuotes,
  setFromToken,
  setFromTokenError,
  setFromTokenInputValue,
  setIsFeatureFlagLoaded,
  setMaxSlippage,
  setQuotesFetchStartTime,
  setReviewSwapClickedTimestamp,
  setTopAssets,
  setToToken,
  swapCustomGasModalPriceEdited,
  swapCustomGasModalLimitEdited,
  retrievedFallbackSwapsGasPrice,
  swapCustomGasModalClosed,
  setCurrentSmartTransactionsError,
  dismissCurrentSmartTransactionsErrorMessage,
  setSwapsSTXSubmitLoading
} = actions;
exports.dismissCurrentSmartTransactionsErrorMessage = dismissCurrentSmartTransactionsErrorMessage;
exports.swapCustomGasModalClosed = swapCustomGasModalClosed;
exports.swapCustomGasModalLimitEdited = swapCustomGasModalLimitEdited;
exports.swapCustomGasModalPriceEdited = swapCustomGasModalPriceEdited;
exports.setSwapToToken = setToToken;
exports.setTopAssets = setTopAssets;
exports.setReviewSwapClickedTimestamp = setReviewSwapClickedTimestamp;
exports.setSwapQuotesFetchStartTime = setQuotesFetchStartTime;
exports.setMaxSlippage = setMaxSlippage;
exports.setIsFeatureFlagLoaded = setIsFeatureFlagLoaded;
exports.setFromTokenInputValue = setFromTokenInputValue;
exports.setFromTokenError = setFromTokenError;
exports.setSwapsFromToken = setFromToken;
exports.setFetchingQuotes = setFetchingQuotes;
exports.setBalanceError = setBalanceError;
exports.setAggregatorMetadata = setAggregatorMetadata;
exports.clearSwapsState = clearSwapsState;

const navigateBackToBuildQuote = history => {
  return async dispatch => {
    // TODO: Ensure any fetch in progress is cancelled
    await dispatch((0, _actions.setBackgroundSwapRouteState)(''));
    dispatch(navigatedBackToBuildQuote());
    history.push(_routes.BUILD_QUOTE_ROUTE);
  };
};

exports.navigateBackToBuildQuote = navigateBackToBuildQuote;

const prepareForRetryGetQuotes = () => {
  return async dispatch => {
    // TODO: Ensure any fetch in progress is cancelled
    await dispatch((0, _actions.resetSwapsPostFetchState)());
    dispatch(retriedGetQuotes());
  };
};

exports.prepareForRetryGetQuotes = prepareForRetryGetQuotes;

const prepareToLeaveSwaps = () => {
  return async dispatch => {
    dispatch(clearSwapsState());
    await dispatch((0, _actions.resetBackgroundSwapsState)());
  };
};

exports.prepareToLeaveSwaps = prepareToLeaveSwaps;

const swapsQuoteSelected = aggId => {
  return dispatch => {
    dispatch(swapCustomGasModalLimitEdited(null));
    dispatch((0, _actions.setSelectedQuoteAggId)(aggId));
    dispatch((0, _actions.setSwapsTxGasLimit)(''));
  };
};

exports.swapsQuoteSelected = swapsQuoteSelected;

const fetchAndSetSwapsGasPriceInfo = () => {
  return async dispatch => {
    const basicEstimates = await dispatch(fetchMetaSwapsGasPriceEstimates());

    if (basicEstimates !== null && basicEstimates !== void 0 && basicEstimates.fast) {
      dispatch((0, _actions.setSwapsTxGasPrice)((0, _conversions.decGWEIToHexWEI)(basicEstimates.fast)));
    }
  };
};

exports.fetchAndSetSwapsGasPriceInfo = fetchAndSetSwapsGasPriceInfo;

const fetchSwapsLivenessAndFeatureFlags = () => {
  return async (dispatch, getState) => {
    let swapsLivenessForNetwork = {
      swapsFeatureIsLive: false
    };
    const chainId = (0, _selectors.getCurrentChainId)(getState());

    try {
      const swapsFeatureFlags = await (0, _swaps.fetchSwapsFeatureFlags)();
      await dispatch((0, _actions.setSwapsFeatureFlags)(swapsFeatureFlags));

      if (_swaps2.ALLOWED_SMART_TRANSACTIONS_CHAIN_IDS.includes(chainId)) {
        await dispatch((0, _actions.fetchSmartTransactionsLiveness)());
      }

      swapsLivenessForNetwork = (0, _swaps.getSwapsLivenessForNetwork)(swapsFeatureFlags, chainId);
    } catch (error) {
      _loglevel.default.error('Failed to fetch Swaps feature flags and Swaps liveness, defaulting to false.', error);
    }

    await dispatch((0, _actions.setSwapsLiveness)(swapsLivenessForNetwork));
    dispatch(setIsFeatureFlagLoaded(true));
    return swapsLivenessForNetwork;
  };
};

exports.fetchSwapsLivenessAndFeatureFlags = fetchSwapsLivenessAndFeatureFlags;

const fetchQuotesAndSetQuoteState = (history, inputValue, maxSlippage, metaMetricsEvent, pageRedirectionDisabled) => {
  return async (dispatch, getState) => {
    var _fetchParams$metaData, _fetchParams$metaData2, _fetchParams$metaData3, _fetchParams$metaData4;

    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    let swapsLivenessForNetwork = {
      swapsFeatureIsLive: false
    };

    try {
      const swapsFeatureFlags = await (0, _swaps.fetchSwapsFeatureFlags)();
      swapsLivenessForNetwork = (0, _swaps.getSwapsLivenessForNetwork)(swapsFeatureFlags, chainId);
    } catch (error) {
      _loglevel.default.error('Failed to fetch Swaps liveness, defaulting to false.', error);
    }

    await dispatch((0, _actions.setSwapsLiveness)(swapsLivenessForNetwork));

    if (!swapsLivenessForNetwork.swapsFeatureIsLive) {
      await history.push(_routes.SWAPS_MAINTENANCE_ROUTE);
      return;
    }

    const fetchParams = getFetchParams(state);
    const selectedAccount = (0, _selectors.getSelectedAccount)(state);
    const balanceError = getBalanceError(state);
    const swapsDefaultToken = (0, _selectors.getSwapsDefaultToken)(state);
    const fetchParamsFromToken = (fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$metaData = fetchParams.metaData) === null || _fetchParams$metaData === void 0 ? void 0 : (_fetchParams$metaData2 = _fetchParams$metaData.sourceTokenInfo) === null || _fetchParams$metaData2 === void 0 ? void 0 : _fetchParams$metaData2.symbol) === swapsDefaultToken.symbol ? swapsDefaultToken : fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$metaData3 = fetchParams.metaData) === null || _fetchParams$metaData3 === void 0 ? void 0 : _fetchParams$metaData3.sourceTokenInfo;
    const selectedFromToken = getFromToken(state) || fetchParamsFromToken || {};
    const selectedToToken = getToToken(state) || (fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$metaData4 = fetchParams.metaData) === null || _fetchParams$metaData4 === void 0 ? void 0 : _fetchParams$metaData4.destinationTokenInfo) || {};
    const {
      address: fromTokenAddress,
      symbol: fromTokenSymbol,
      decimals: fromTokenDecimals,
      iconUrl: fromTokenIconUrl,
      balance: fromTokenBalance
    } = selectedFromToken;
    const {
      address: toTokenAddress,
      symbol: toTokenSymbol,
      decimals: toTokenDecimals,
      iconUrl: toTokenIconUrl
    } = selectedToToken; // pageRedirectionDisabled is true if quotes prefetching is active (a user is on the Build Quote page).
    // In that case we just want to silently prefetch quotes without redirecting to the quotes loading page.

    if (!pageRedirectionDisabled) {
      await dispatch((0, _actions.setBackgroundSwapRouteState)('loading'));
      history.push(_routes.LOADING_QUOTES_ROUTE);
    }

    dispatch(setFetchingQuotes(true));
    const contractExchangeRates = (0, _selectors.getTokenExchangeRates)(state);
    let destinationTokenAddedForSwap = false;

    if (toTokenAddress && toTokenSymbol !== swapsDefaultToken.symbol && contractExchangeRates[toTokenAddress] === undefined) {
      destinationTokenAddedForSwap = true;
      await dispatch((0, _actions.addToken)(toTokenAddress, toTokenSymbol, toTokenDecimals, toTokenIconUrl, true));
    }

    if (fromTokenAddress && fromTokenSymbol !== swapsDefaultToken.symbol && !contractExchangeRates[fromTokenAddress] && fromTokenBalance && new _bignumber.default(fromTokenBalance, 16).gt(0)) {
      dispatch((0, _actions.addToken)(fromTokenAddress, fromTokenSymbol, fromTokenDecimals, fromTokenIconUrl, true));
    }

    const swapsTokens = getSwapsTokens(state);
    const sourceTokenInfo = (swapsTokens === null || swapsTokens === void 0 ? void 0 : swapsTokens.find(({
      address
    }) => address === fromTokenAddress)) || selectedFromToken;
    const destinationTokenInfo = (swapsTokens === null || swapsTokens === void 0 ? void 0 : swapsTokens.find(({
      address
    }) => address === toTokenAddress)) || selectedToToken;
    dispatch(setFromToken(selectedFromToken));
    const hardwareWalletUsed = (0, _selectors.isHardwareWallet)(state);
    const hardwareWalletType = (0, _selectors.getHardwareWalletType)(state);
    const networkAndAccountSupports1559 = (0, _selectors.checkNetworkAndAccountSupports1559)(state);
    const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(state);
    const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
    const currentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled(state);
    metaMetricsEvent({
      event: 'Quotes Requested',
      category: 'swaps',
      sensitiveProperties: {
        token_from: fromTokenSymbol,
        token_from_amount: String(inputValue),
        token_to: toTokenSymbol,
        request_type: balanceError ? 'Quote' : 'Order',
        slippage: maxSlippage,
        custom_slippage: maxSlippage !== 2,
        is_hardware_wallet: hardwareWalletUsed,
        hardware_wallet_type: hardwareWalletType,
        stx_enabled: smartTransactionsEnabled,
        current_stx_enabled: currentSmartTransactionsEnabled,
        stx_user_opt_in: smartTransactionsOptInStatus,
        anonymizedData: true
      }
    });

    try {
      var _Object$values;

      const fetchStartTime = Date.now();
      dispatch(setQuotesFetchStartTime(fetchStartTime));
      const fetchAndSetQuotesPromise = dispatch((0, _actions.fetchAndSetQuotes)({
        slippage: maxSlippage,
        sourceToken: fromTokenAddress,
        destinationToken: toTokenAddress,
        value: inputValue,
        fromAddress: selectedAccount.address,
        destinationTokenAddedForSwap,
        balanceError,
        sourceDecimals: fromTokenDecimals
      }, {
        sourceTokenInfo,
        destinationTokenInfo,
        accountBalance: selectedAccount.balance,
        chainId
      }));
      const gasPriceFetchPromise = networkAndAccountSupports1559 ? null // For EIP 1559 we can get gas prices via "useGasFeeEstimates".
      : dispatch(fetchAndSetSwapsGasPriceInfo());
      const [[fetchedQuotes, selectedAggId]] = await Promise.all([fetchAndSetQuotesPromise, gasPriceFetchPromise]);

      if (((_Object$values = Object.values(fetchedQuotes)) === null || _Object$values === void 0 ? void 0 : _Object$values.length) === 0) {
        metaMetricsEvent({
          event: 'No Quotes Available',
          category: 'swaps',
          sensitiveProperties: {
            token_from: fromTokenSymbol,
            token_from_amount: String(inputValue),
            token_to: toTokenSymbol,
            request_type: balanceError ? 'Quote' : 'Order',
            slippage: maxSlippage,
            custom_slippage: maxSlippage !== 2,
            is_hardware_wallet: hardwareWalletUsed,
            hardware_wallet_type: hardwareWalletType,
            stx_enabled: smartTransactionsEnabled,
            current_stx_enabled: currentSmartTransactionsEnabled,
            stx_user_opt_in: smartTransactionsOptInStatus
          }
        });
        dispatch((0, _actions.setSwapsErrorKey)(_swaps2.QUOTES_NOT_AVAILABLE_ERROR));
      } else {
        var _Object$values2;

        const newSelectedQuote = fetchedQuotes[selectedAggId];
        metaMetricsEvent({
          event: 'Quotes Received',
          category: 'swaps',
          sensitiveProperties: {
            token_from: fromTokenSymbol,
            token_from_amount: String(inputValue),
            token_to: toTokenSymbol,
            token_to_amount: (0, _tokenUtil.calcTokenAmount)(newSelectedQuote.destinationAmount, newSelectedQuote.decimals || 18),
            request_type: balanceError ? 'Quote' : 'Order',
            slippage: maxSlippage,
            custom_slippage: maxSlippage !== 2,
            response_time: Date.now() - fetchStartTime,
            best_quote_source: newSelectedQuote.aggregator,
            available_quotes: (_Object$values2 = Object.values(fetchedQuotes)) === null || _Object$values2 === void 0 ? void 0 : _Object$values2.length,
            is_hardware_wallet: hardwareWalletUsed,
            hardware_wallet_type: hardwareWalletType,
            stx_enabled: smartTransactionsEnabled,
            current_stx_enabled: currentSmartTransactionsEnabled,
            stx_user_opt_in: smartTransactionsOptInStatus,
            anonymizedData: true
          }
        });
        dispatch((0, _actions.setInitialGasEstimate)(selectedAggId));
      }
    } catch (e) {
      // A newer swap request is running, so simply bail and let the newer request respond
      if (e.message === _swaps2.SWAPS_FETCH_ORDER_CONFLICT) {
        _loglevel.default.debug(`Swap fetch order conflict detected; ignoring older request`);

        return;
      } // TODO: Check for any errors we should expect to occur in production, and report others to Sentry


      _loglevel.default.error(`Error fetching quotes: `, e);

      dispatch((0, _actions.setSwapsErrorKey)(_swaps2.ERROR_FETCHING_QUOTES));
    }

    dispatch(setFetchingQuotes(false));
  };
};

exports.fetchQuotesAndSetQuoteState = fetchQuotesAndSetQuoteState;

const signAndSendSwapsSmartTransaction = ({
  unsignedTransaction,
  metaMetricsEvent,
  history
}) => {
  return async (dispatch, getState) => {
    var _getTopQuote, _getQuotes, _getTopQuote2, _getTopQuote3, _usedQuote$savings, _usedQuote$savings2, _usedQuote$savings3, _usedQuote$savings4;

    dispatch(setSwapsSTXSubmitLoading(true));
    const state = getState();
    const fetchParams = getFetchParams(state);
    const {
      metaData,
      value: swapTokenValue,
      slippage
    } = fetchParams;
    const {
      sourceTokenInfo = {},
      destinationTokenInfo = {}
    } = metaData;
    const usedQuote = getUsedQuote(state);
    const swapsRefreshStates = getSwapsRefreshStates(state);
    const chainId = (0, _selectors.getCurrentChainId)(state);
    dispatch((0, _actions.setSmartTransactionsRefreshInterval)(swapsRefreshStates === null || swapsRefreshStates === void 0 ? void 0 : swapsRefreshStates.stxBatchStatusRefreshTime));
    const usedTradeTxParams = usedQuote.trade; // update stx with data

    const destinationValue = (0, _tokenUtil.calcTokenAmount)(usedQuote.destinationAmount, destinationTokenInfo.decimals || 18).toPrecision(8);
    const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(state);
    const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
    const currentSmartTransactionsEnabled = getCurrentSmartTransactionsEnabled(state);
    const swapMetaData = {
      token_from: sourceTokenInfo.symbol,
      token_from_amount: String(swapTokenValue),
      token_to: destinationTokenInfo.symbol,
      token_to_amount: destinationValue,
      slippage,
      custom_slippage: slippage !== 2,
      best_quote_source: (_getTopQuote = getTopQuote(state)) === null || _getTopQuote === void 0 ? void 0 : _getTopQuote.aggregator,
      available_quotes: (_getQuotes = getQuotes(state)) === null || _getQuotes === void 0 ? void 0 : _getQuotes.length,
      other_quote_selected: usedQuote.aggregator !== ((_getTopQuote2 = getTopQuote(state)) === null || _getTopQuote2 === void 0 ? void 0 : _getTopQuote2.aggregator),
      other_quote_selected_source: usedQuote.aggregator === ((_getTopQuote3 = getTopQuote(state)) === null || _getTopQuote3 === void 0 ? void 0 : _getTopQuote3.aggregator) ? '' : usedQuote.aggregator,
      average_savings: (_usedQuote$savings = usedQuote.savings) === null || _usedQuote$savings === void 0 ? void 0 : _usedQuote$savings.total,
      performance_savings: (_usedQuote$savings2 = usedQuote.savings) === null || _usedQuote$savings2 === void 0 ? void 0 : _usedQuote$savings2.performance,
      fee_savings: (_usedQuote$savings3 = usedQuote.savings) === null || _usedQuote$savings3 === void 0 ? void 0 : _usedQuote$savings3.fee,
      median_metamask_fee: (_usedQuote$savings4 = usedQuote.savings) === null || _usedQuote$savings4 === void 0 ? void 0 : _usedQuote$savings4.medianMetaMaskFee,
      stx_enabled: smartTransactionsEnabled,
      current_stx_enabled: currentSmartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus
    };
    metaMetricsEvent({
      event: 'STX Swap Started',
      category: 'swaps',
      sensitiveProperties: swapMetaData
    });

    if (!(0, _swaps.isContractAddressValid)(usedTradeTxParams.to, chainId)) {
      (0, _browser.captureMessage)('Invalid contract address', {
        extra: {
          token_from: swapMetaData.token_from,
          token_to: swapMetaData.token_to,
          contract_address: usedTradeTxParams.to
        }
      });
      await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    }

    const approveTxParams = getApproveTxParams(state);
    let approvalTxUuid;

    try {
      if (approveTxParams) {
        const updatedApproveTxParams = _objectSpread(_objectSpread({}, approveTxParams), {}, {
          value: '0x0'
        });

        const smartTransactionApprovalFees = await dispatch(fetchSwapsSmartTransactionFees(updatedApproveTxParams));
        updatedApproveTxParams.gas = `0x${(0, _conversions.decimalToHex)((smartTransactionApprovalFees === null || smartTransactionApprovalFees === void 0 ? void 0 : smartTransactionApprovalFees.gasLimit) || 0)}`;
        approvalTxUuid = await dispatch((0, _actions.signAndSendSmartTransaction)({
          unsignedTransaction: updatedApproveTxParams,
          smartTransactionFees: smartTransactionApprovalFees
        }));
      }

      const smartTransactionFees = await dispatch(fetchSwapsSmartTransactionFees(unsignedTransaction));
      unsignedTransaction.gas = `0x${(0, _conversions.decimalToHex)((smartTransactionFees === null || smartTransactionFees === void 0 ? void 0 : smartTransactionFees.gasLimit) || 0)}`;
      const uuid = await dispatch((0, _actions.signAndSendSmartTransaction)({
        unsignedTransaction,
        smartTransactionFees
      }));
      const destinationTokenAddress = destinationTokenInfo.address;
      const destinationTokenDecimals = destinationTokenInfo.decimals;
      const destinationTokenSymbol = destinationTokenInfo.symbol;
      const sourceTokenSymbol = sourceTokenInfo.symbol;
      await dispatch((0, _actions.updateSmartTransaction)(uuid, {
        origin: 'metamask',
        destinationTokenAddress,
        destinationTokenDecimals,
        destinationTokenSymbol,
        sourceTokenSymbol,
        swapMetaData,
        swapTokenValue,
        type: _transaction.TRANSACTION_TYPES.SWAP
      }));

      if (approvalTxUuid) {
        await dispatch((0, _actions.updateSmartTransaction)(approvalTxUuid, {
          origin: 'metamask',
          type: _transaction.TRANSACTION_TYPES.SWAP_APPROVAL,
          sourceTokenSymbol
        }));
      }

      history.push(_routes.SMART_TRANSACTION_STATUS_ROUTE);
      dispatch(setSwapsSTXSubmitLoading(false));
    } catch (e) {
      console.log('signAndSendSwapsSmartTransaction error', e);
      const {
        swaps: {
          isFeatureFlagLoaded
        }
      } = getState();

      if (e.message.startsWith('Fetch error:') && isFeatureFlagLoaded) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch(setCurrentSmartTransactionsError(errorObj === null || errorObj === void 0 ? void 0 : errorObj.type));
      }
    }
  };
};

exports.signAndSendSwapsSmartTransaction = signAndSendSwapsSmartTransaction;

const signAndSendTransactions = (history, metaMetricsEvent) => {
  return async (dispatch, getState) => {
    var _usedQuote$approvalNe, _getTopQuote4, _getQuotes2, _getTopQuote5, _getTopQuote6, _usedQuote$savings5, _usedQuote$savings6, _usedQuote$savings7, _usedQuote$savings8, _finalApproveTxMeta;

    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    const hardwareWalletUsed = (0, _selectors.isHardwareWallet)(state);
    const networkAndAccountSupports1559 = (0, _selectors.checkNetworkAndAccountSupports1559)(state);
    let swapsLivenessForNetwork = {
      swapsFeatureIsLive: false
    };

    try {
      const swapsFeatureFlags = await (0, _swaps.fetchSwapsFeatureFlags)();
      swapsLivenessForNetwork = (0, _swaps.getSwapsLivenessForNetwork)(swapsFeatureFlags, chainId);
    } catch (error) {
      _loglevel.default.error('Failed to fetch Swaps liveness, defaulting to false.', error);
    }

    await dispatch((0, _actions.setSwapsLiveness)(swapsLivenessForNetwork));

    if (!swapsLivenessForNetwork.swapsFeatureIsLive) {
      await history.push(_routes.SWAPS_MAINTENANCE_ROUTE);
      return;
    }

    const customSwapsGas = getCustomSwapsGas(state);
    const customMaxFeePerGas = getCustomMaxFeePerGas(state);
    const customMaxPriorityFeePerGas = getCustomMaxPriorityFeePerGas(state);
    const fetchParams = getFetchParams(state);
    const {
      metaData,
      value: swapTokenValue,
      slippage
    } = fetchParams;
    const {
      sourceTokenInfo = {},
      destinationTokenInfo = {}
    } = metaData;
    await dispatch((0, _actions.setBackgroundSwapRouteState)('awaiting'));
    await dispatch((0, _actions.stopPollingForQuotes)());

    if (!hardwareWalletUsed) {
      history.push(_routes.AWAITING_SWAP_ROUTE);
    }

    const {
      fast: fastGasEstimate
    } = getSwapGasPriceEstimateData(state);
    let maxFeePerGas;
    let maxPriorityFeePerGas;
    let baseAndPriorityFeePerGas;
    let decEstimatedBaseFee;

    if (networkAndAccountSupports1559) {
      const {
        high: {
          suggestedMaxFeePerGas,
          suggestedMaxPriorityFeePerGas
        },
        estimatedBaseFee = '0'
      } = (0, _metamask.getGasFeeEstimates)(state);
      decEstimatedBaseFee = (0, _conversions.decGWEIToHexWEI)(estimatedBaseFee);
      maxFeePerGas = customMaxFeePerGas || (0, _conversions.decGWEIToHexWEI)(suggestedMaxFeePerGas);
      maxPriorityFeePerGas = customMaxPriorityFeePerGas || (0, _conversions.decGWEIToHexWEI)(suggestedMaxPriorityFeePerGas);
      baseAndPriorityFeePerGas = (0, _conversions.addHexes)(decEstimatedBaseFee, maxPriorityFeePerGas);
    }

    const usedQuote = getUsedQuote(state);
    const usedTradeTxParams = usedQuote.trade;
    const estimatedGasLimit = new _bignumber.default((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimate) || `0x0`, 16);
    const estimatedGasLimitWithMultiplier = estimatedGasLimit.times((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasMultiplier) || FALLBACK_GAS_MULTIPLIER, 10).round(0).toString(16);
    const maxGasLimit = customSwapsGas || (usedQuote !== null && usedQuote !== void 0 && usedQuote.gasEstimate ? estimatedGasLimitWithMultiplier : `0x${(0, _conversions.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.maxGas) || 0)}`);
    const usedGasPrice = getUsedSwapsGasPrice(state);
    usedTradeTxParams.gas = maxGasLimit;

    if (networkAndAccountSupports1559) {
      usedTradeTxParams.maxFeePerGas = maxFeePerGas;
      usedTradeTxParams.maxPriorityFeePerGas = maxPriorityFeePerGas;
      delete usedTradeTxParams.gasPrice;
    } else {
      usedTradeTxParams.gasPrice = usedGasPrice;
    }

    const usdConversionRate = (0, _selectors.getUSDConversionRate)(state);
    const destinationValue = (0, _tokenUtil.calcTokenAmount)(usedQuote.destinationAmount, destinationTokenInfo.decimals || 18).toPrecision(8);
    const usedGasLimitEstimate = (usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.gasEstimateWithRefund) || `0x${(0, _conversions.decimalToHex)((usedQuote === null || usedQuote === void 0 ? void 0 : usedQuote.averageGas) || 0)}`;
    const totalGasLimitEstimate = new _bignumber.default(usedGasLimitEstimate, 16).plus(((_usedQuote$approvalNe = usedQuote.approvalNeeded) === null || _usedQuote$approvalNe === void 0 ? void 0 : _usedQuote$approvalNe.gas) || '0x0', 16).toString(16);
    const gasEstimateTotalInUSD = (0, _conversions.getValueFromWeiHex)({
      value: (0, _send.calcGasTotal)(totalGasLimitEstimate, networkAndAccountSupports1559 ? baseAndPriorityFeePerGas : usedGasPrice),
      toCurrency: 'usd',
      conversionRate: usdConversionRate,
      numberOfDecimals: 6
    });
    const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(state);
    const smartTransactionsEnabled = getSmartTransactionsEnabled(state);
    const swapMetaData = {
      token_from: sourceTokenInfo.symbol,
      token_from_amount: String(swapTokenValue),
      token_to: destinationTokenInfo.symbol,
      token_to_amount: destinationValue,
      slippage,
      custom_slippage: slippage !== 2,
      best_quote_source: (_getTopQuote4 = getTopQuote(state)) === null || _getTopQuote4 === void 0 ? void 0 : _getTopQuote4.aggregator,
      available_quotes: (_getQuotes2 = getQuotes(state)) === null || _getQuotes2 === void 0 ? void 0 : _getQuotes2.length,
      other_quote_selected: usedQuote.aggregator !== ((_getTopQuote5 = getTopQuote(state)) === null || _getTopQuote5 === void 0 ? void 0 : _getTopQuote5.aggregator),
      other_quote_selected_source: usedQuote.aggregator === ((_getTopQuote6 = getTopQuote(state)) === null || _getTopQuote6 === void 0 ? void 0 : _getTopQuote6.aggregator) ? '' : usedQuote.aggregator,
      gas_fees: gasEstimateTotalInUSD,
      estimated_gas: estimatedGasLimit.toString(10),
      suggested_gas_price: fastGasEstimate,
      used_gas_price: (0, _conversions.hexWEIToDecGWEI)(usedGasPrice),
      average_savings: (_usedQuote$savings5 = usedQuote.savings) === null || _usedQuote$savings5 === void 0 ? void 0 : _usedQuote$savings5.total,
      performance_savings: (_usedQuote$savings6 = usedQuote.savings) === null || _usedQuote$savings6 === void 0 ? void 0 : _usedQuote$savings6.performance,
      fee_savings: (_usedQuote$savings7 = usedQuote.savings) === null || _usedQuote$savings7 === void 0 ? void 0 : _usedQuote$savings7.fee,
      median_metamask_fee: (_usedQuote$savings8 = usedQuote.savings) === null || _usedQuote$savings8 === void 0 ? void 0 : _usedQuote$savings8.medianMetaMaskFee,
      is_hardware_wallet: hardwareWalletUsed,
      hardware_wallet_type: (0, _selectors.getHardwareWalletType)(state),
      stx_enabled: smartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus
    };

    if (networkAndAccountSupports1559) {
      swapMetaData.max_fee_per_gas = maxFeePerGas;
      swapMetaData.max_priority_fee_per_gas = maxPriorityFeePerGas;
      swapMetaData.base_and_priority_fee_per_gas = baseAndPriorityFeePerGas;
    }

    metaMetricsEvent({
      event: 'Swap Started',
      category: 'swaps',
      sensitiveProperties: swapMetaData
    });

    if (!(0, _swaps.isContractAddressValid)(usedTradeTxParams.to, chainId)) {
      (0, _browser.captureMessage)('Invalid contract address', {
        extra: {
          token_from: swapMetaData.token_from,
          token_to: swapMetaData.token_to,
          contract_address: usedTradeTxParams.to
        }
      });
      await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    }

    let finalApproveTxMeta;
    const approveTxParams = getApproveTxParams(state); // For hardware wallets we go to the Awaiting Signatures page first and only after a user
    // completes 1 or 2 confirmations, we redirect to the Awaiting Swap page.

    if (hardwareWalletUsed) {
      history.push(_routes.AWAITING_SIGNATURES_ROUTE);
    }

    if (approveTxParams) {
      if (networkAndAccountSupports1559) {
        approveTxParams.maxFeePerGas = maxFeePerGas;
        approveTxParams.maxPriorityFeePerGas = maxPriorityFeePerGas;
        delete approveTxParams.gasPrice;
      }

      const approveTxMeta = await dispatch((0, _actions.addUnapprovedTransaction)(_objectSpread(_objectSpread({}, approveTxParams), {}, {
        amount: '0x0'
      }), 'metamask', _transaction.TRANSACTION_TYPES.SWAP_APPROVAL));
      await dispatch((0, _actions.setApproveTxId)(approveTxMeta.id));
      finalApproveTxMeta = await dispatch((0, _actions.updateTransaction)(_objectSpread(_objectSpread({}, approveTxMeta), {}, {
        estimatedBaseFee: decEstimatedBaseFee,
        type: _transaction.TRANSACTION_TYPES.SWAP_APPROVAL,
        sourceTokenSymbol: sourceTokenInfo.symbol
      }), true));

      try {
        await dispatch((0, _actions.updateAndApproveTx)(finalApproveTxMeta, true));
      } catch (e) {
        await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
        history.push(_routes.SWAPS_ERROR_ROUTE);
        return;
      }
    }

    const tradeTxMeta = await dispatch((0, _actions.addUnapprovedTransaction)(usedTradeTxParams, 'metamask', _transaction.TRANSACTION_TYPES.SWAP));
    dispatch((0, _actions.setTradeTxId)(tradeTxMeta.id)); // The simulationFails property is added during the transaction controllers
    // addUnapprovedTransaction call if the estimateGas call fails. In cases
    // when no approval is required, this indicates that the swap will likely
    // fail. There was an earlier estimateGas call made by the swaps controller,
    // but it is possible that external conditions have change since then, and
    // a previously succeeding estimate gas call could now fail. By checking for
    // the `simulationFails` property here, we can reduce the number of swap
    // transactions that get published to the blockchain only to fail and thereby
    // waste the user's funds on gas.

    if (!approveTxParams && tradeTxMeta.simulationFails) {
      await dispatch((0, _actions.cancelTx)(tradeTxMeta, false));
      await dispatch((0, _actions.setSwapsErrorKey)(_swaps2.SWAP_FAILED_ERROR));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    }

    const finalTradeTxMeta = await dispatch((0, _actions.updateTransaction)(_objectSpread(_objectSpread({}, tradeTxMeta), {}, {
      estimatedBaseFee: decEstimatedBaseFee,
      sourceTokenSymbol: sourceTokenInfo.symbol,
      destinationTokenSymbol: destinationTokenInfo.symbol,
      type: _transaction.TRANSACTION_TYPES.SWAP,
      destinationTokenDecimals: destinationTokenInfo.decimals,
      destinationTokenAddress: destinationTokenInfo.address,
      swapMetaData,
      swapTokenValue,
      approvalTxId: (_finalApproveTxMeta = finalApproveTxMeta) === null || _finalApproveTxMeta === void 0 ? void 0 : _finalApproveTxMeta.id
    }), true));

    try {
      await dispatch((0, _actions.updateAndApproveTx)(finalTradeTxMeta, true));
    } catch (e) {
      const errorKey = e.message.includes('EthAppPleaseEnableContractData') ? _swaps2.CONTRACT_DATA_DISABLED_ERROR : _swaps2.SWAP_FAILED_ERROR;
      await dispatch((0, _actions.setSwapsErrorKey)(errorKey));
      history.push(_routes.SWAPS_ERROR_ROUTE);
      return;
    } // Only after a user confirms swapping on a hardware wallet (second `updateAndApproveTx` call above),
    // we redirect to the Awaiting Swap page.


    if (hardwareWalletUsed) {
      history.push(_routes.AWAITING_SWAP_ROUTE);
    }

    await (0, _actions.forceUpdateMetamaskState)(dispatch);
  };
};

exports.signAndSendTransactions = signAndSendTransactions;

function fetchMetaSwapsGasPriceEstimates() {
  return async (dispatch, getState) => {
    const state = getState();
    const chainId = (0, _selectors.getCurrentChainId)(state);
    dispatch(swapGasPriceEstimatesFetchStarted());
    let priceEstimates;

    try {
      priceEstimates = await (0, _swaps.fetchSwapsGasPrices)(chainId);
    } catch (e) {
      var _e$message;

      _loglevel.default.warn('Fetching swaps gas prices failed:', e);

      if (!((_e$message = e.message) !== null && _e$message !== void 0 && _e$message.match(/NetworkError|Fetch failed with status:/u))) {
        throw e;
      }

      dispatch(swapGasPriceEstimatesFetchFailed());

      try {
        const gasPrice = await global.ethQuery.gasPrice();
        const gasPriceInDecGWEI = (0, _conversions.hexWEIToDecGWEI)(gasPrice.toString(10));
        dispatch(retrievedFallbackSwapsGasPrice(gasPriceInDecGWEI));
        return null;
      } catch (networkGasPriceError) {
        console.error(`Failed to retrieve fallback gas price: `, networkGasPriceError);
        return null;
      }
    }

    dispatch(swapGasPriceEstimatesFetchCompleted({
      priceEstimates
    }));
    return priceEstimates;
  };
}

function fetchSwapsSmartTransactionFees(unsignedTransaction) {
  return async (dispatch, getState) => {
    const {
      swaps: {
        isFeatureFlagLoaded
      }
    } = getState();

    try {
      return await dispatch((0, _actions.fetchSmartTransactionFees)(unsignedTransaction));
    } catch (e) {
      if (e.message.startsWith('Fetch error:') && isFeatureFlagLoaded) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch(setCurrentSmartTransactionsError(errorObj === null || errorObj === void 0 ? void 0 : errorObj.type));
      }
    }

    return null;
  };
}

function estimateSwapsSmartTransactionsGas(unsignedTransaction, approveTxParams) {
  return async (dispatch, getState) => {
    const {
      swaps: {
        isFeatureFlagLoaded,
        swapsSTXLoading
      }
    } = getState();

    if (swapsSTXLoading) {
      return;
    }

    try {
      await dispatch((0, _actions.estimateSmartTransactionsGas)(unsignedTransaction, approveTxParams));
    } catch (e) {
      if (e.message.startsWith('Fetch error:') && isFeatureFlagLoaded) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch(setCurrentSmartTransactionsError(errorObj === null || errorObj === void 0 ? void 0 : errorObj.type));
      }
    }
  };
}

function cancelSwapsSmartTransaction(uuid) {
  return async (dispatch, getState) => {
    try {
      await dispatch((0, _actions.cancelSmartTransaction)(uuid));
    } catch (e) {
      const {
        swaps: {
          isFeatureFlagLoaded
        }
      } = getState();

      if (e.message.startsWith('Fetch error:') && isFeatureFlagLoaded) {
        const errorObj = (0, _swaps.parseSmartTransactionsError)(e.message);
        dispatch(setCurrentSmartTransactionsError(errorObj === null || errorObj === void 0 ? void 0 : errorObj.type));
      }
    }
  };
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\swaps\\swaps.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remote-redux-devtools\\lib\\devTools.js", {"./configureStore":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remote-redux-devtools\\lib\\configureStore.js","./constants":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remote-redux-devtools\\lib\\constants.js","jsan":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\index.js","redux-devtools-core/lib/utils":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-core\\lib\\utils\\index.js","redux-devtools-core/lib/utils/catchErrors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-core\\lib\\utils\\catchErrors.js","redux-devtools-core/lib/utils/filters":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-core\\lib\\utils\\filters.js","rn-host-detect":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\rn-host-detect\\index.js","socketcluster-client":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\remote-redux-devtools\lib\devTools.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = devToolsEnhancer;
exports.preEnhancer = preEnhancer;
exports.composeWithDevTools = composeWithDevTools;

var _jsan = require('jsan');

var _socketclusterClient = require('socketcluster-client');

var _socketclusterClient2 = _interopRequireDefault(_socketclusterClient);

var _configureStore = require('./configureStore');

var _configureStore2 = _interopRequireDefault(_configureStore);

var _constants = require('./constants');

var _rnHostDetect = require('rn-host-detect');

var _rnHostDetect2 = _interopRequireDefault(_rnHostDetect);

var _utils = require('redux-devtools-core/lib/utils');

var _catchErrors = require('redux-devtools-core/lib/utils/catchErrors');

var _catchErrors2 = _interopRequireDefault(_catchErrors);

var _filters = require('redux-devtools-core/lib/utils/filters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var instanceId = void 0;
var instanceName = void 0;
var suppressConnectErrors = void 0;
var errorCounts = {};
var socketOptions = void 0;
var socket = void 0;
var channel = void 0;
var store = {};
var lastAction = void 0;
var filters = void 0;
var isExcess = void 0;
var isMonitored = void 0;
var started = void 0;
var startOn = void 0;
var stopOn = void 0;
var sendOn = void 0;
var sendOnError = void 0;
var sendTo = void 0;
var lastErrorMsg = void 0;
var locked = void 0;
var paused = void 0;
var actionCreators = void 0;
var stateSanitizer = void 0;
var actionSanitizer = void 0;

function getLiftedState() {
  return (0, _filters.filterStagedActions)(store.liftedStore.getState(), filters);
}

function send() {
  if (!instanceId) instanceId = socket && socket.id || Math.random().toString(36).substr(2);
  try {
    fetch(sendTo, {
      method: 'POST',
      headers: {
        'content-type': 'application/json'
      },
      body: JSON.stringify({
        type: 'STATE',
        id: instanceId,
        name: instanceName,
        payload: (0, _jsan.stringify)(getLiftedState())
      })
    }).catch(function (err) {
      console.log(err);
    });
  } catch (err) {
    console.log(err);
  }
}

function relay(type, state, action, nextActionId) {
  var message = {
    type: type,
    id: socket.id,
    name: instanceName
  };
  if (state) {
    message.payload = type === 'ERROR' ? state : (0, _jsan.stringify)((0, _filters.filterState)(state, type, filters, stateSanitizer, actionSanitizer, nextActionId));
  }
  if (type === 'ACTION') {
    message.action = (0, _jsan.stringify)(!actionSanitizer ? action : actionSanitizer(action.action, nextActionId - 1));
    message.isExcess = isExcess;
    message.nextActionId = nextActionId;
  } else if (action) {
    message.action = action;
  }
  socket.emit(socket.id ? 'log' : 'log-noid', message);
}

function dispatchRemotely(action) {
  try {
    var result = (0, _utils.evalAction)(action, actionCreators);
    store.dispatch(result);
  } catch (e) {
    relay('ERROR', e.message);
  }
}

function handleMessages(message) {
  if (message.type === 'IMPORT' || message.type === 'SYNC' && socket.id && message.id !== socket.id) {
    store.liftedStore.dispatch({
      type: 'IMPORT_STATE', nextLiftedState: (0, _jsan.parse)(message.state)
    });
  } else if (message.type === 'UPDATE') {
    relay('STATE', getLiftedState());
  } else if (message.type === 'START') {
    isMonitored = true;
    if (typeof actionCreators === 'function') actionCreators = actionCreators();
    relay('STATE', getLiftedState(), actionCreators);
  } else if (message.type === 'STOP' || message.type === 'DISCONNECTED') {
    isMonitored = false;
    relay('STOP');
  } else if (message.type === 'ACTION') {
    dispatchRemotely(message.action);
  } else if (message.type === 'DISPATCH') {
    store.liftedStore.dispatch(message.action);
  }
}

function async(fn) {
  setTimeout(fn, 0);
}

function sendError(errorAction) {
  // Prevent flooding
  if (errorAction.message && errorAction.message === lastErrorMsg) return;
  lastErrorMsg = errorAction.message;

  async(function () {
    store.dispatch(errorAction);
    if (!started) send();
  });
}

function str2array(str) {
  return typeof str === 'string' ? [str] : str && str.length;
}

function init(options) {
  instanceName = options.name;

  var _ref = options.filters || {},
      blacklist = _ref.blacklist,
      whitelist = _ref.whitelist;

  filters = (0, _filters.getLocalFilter)({
    actionsBlacklist: blacklist || options.actionsBlacklist,
    actionsWhitelist: whitelist || options.actionsWhitelist
  });
  if (options.port) {
    socketOptions = {
      port: options.port,
      hostname: options.hostname || 'localhost',
      secure: options.secure
    };
  } else socketOptions = _constants.defaultSocketOptions;

  suppressConnectErrors = options.suppressConnectErrors !== undefined ? options.suppressConnectErrors : true;

  startOn = str2array(options.startOn);
  stopOn = str2array(options.stopOn);
  sendOn = str2array(options.sendOn);
  sendOnError = options.sendOnError;
  if (sendOn || sendOnError) {
    sendTo = options.sendTo || (socketOptions.secure ? 'https' : 'http') + '://' + socketOptions.hostname + ':' + socketOptions.port;
    instanceId = options.id;
  }
  if (sendOnError === 1) (0, _catchErrors2.default)(sendError);

  if (options.actionCreators) actionCreators = function actionCreators() {
    return (0, _utils.getActionsArray)(options.actionCreators);
  };
  stateSanitizer = options.stateSanitizer;
  actionSanitizer = options.actionSanitizer;
}

function login() {
  socket.emit('login', 'master', function (err, channelName) {
    if (err) {
      console.log(err);return;
    }
    channel = channelName;
    socket.subscribe(channelName).watch(handleMessages);
    socket.on(channelName, handleMessages);
  });
  started = true;
  relay('START');
}

function stop(keepConnected) {
  started = false;
  isMonitored = false;
  if (!socket) return;
  socket.destroyChannel(channel);
  if (keepConnected) {
    socket.off(channel, handleMessages);
  } else {
    socket.off();
    socket.disconnect();
  }
}

function start() {
  if (started || socket && socket.getState() === socket.CONNECTING) return;

  socket = _socketclusterClient2.default.connect(socketOptions);

  socket.on('error', function (err) {
    // if we've already had this error before, increment it's counter, otherwise assign it '1' since we've had the error once.
    errorCounts[err.name] = errorCounts.hasOwnProperty(err.name) ? errorCounts[err.name] + 1 : 1;

    if (suppressConnectErrors) {
      if (errorCounts[err.name] === 1) {
        console.log('remote-redux-devtools: Socket connection errors are being suppressed. ' + '\n' + 'This can be disabled by setting suppressConnectErrors to \'false\'.');
        console.log(err);
      }
    } else {
      console.log(err);
    }
  });
  socket.on('connect', function () {
    console.log('connected to remotedev-server');
    errorCounts = {}; // clear the errorCounts object, so that we'll log any new errors in the event of a disconnect
    login();
  });
  socket.on('disconnect', function () {
    stop(true);
  });
}

function checkForReducerErrors() {
  var liftedState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : store.liftedStore.getState();

  if (liftedState.computedStates[liftedState.currentStateIndex].error) {
    if (started) relay('STATE', (0, _filters.filterStagedActions)(liftedState, filters));else send();
    return true;
  }
  return false;
}

function monitorReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];

  lastAction = action.type;
  if (!started && sendOnError === 2 && store.liftedStore) async(checkForReducerErrors);else if (action.action) {
    if (startOn && !started && startOn.indexOf(action.action.type) !== -1) async(start);else if (stopOn && started && stopOn.indexOf(action.action.type) !== -1) async(stop);else if (sendOn && !started && sendOn.indexOf(action.action.type) !== -1) async(send);
  }
  return state;
}

function handleChange(state, liftedState, maxAge) {
  if (checkForReducerErrors(liftedState)) return;

  if (lastAction === 'PERFORM_ACTION') {
    var nextActionId = liftedState.nextActionId;
    var liftedAction = liftedState.actionsById[nextActionId - 1];
    if ((0, _filters.isFiltered)(liftedAction.action, filters)) return;
    relay('ACTION', state, liftedAction, nextActionId);
    if (!isExcess && maxAge) isExcess = liftedState.stagedActionIds.length >= maxAge;
  } else {
    if (lastAction === 'JUMP_TO_STATE') return;
    if (lastAction === 'PAUSE_RECORDING') {
      paused = liftedState.isPaused;
    } else if (lastAction === 'LOCK_CHANGES') {
      locked = liftedState.isLocked;
    }
    if (paused || locked) {
      if (lastAction) lastAction = undefined;else return;
    }
    relay('STATE', (0, _filters.filterStagedActions)(liftedState, filters));
  }
}

function devToolsEnhancer() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  init(_extends({}, options, {
    hostname: (0, _rnHostDetect2.default)(options.hostname || 'localhost')
  }));
  var realtime = typeof options.realtime === 'undefined' ? "development" === 'development' : options.realtime;
  if (!realtime && !(startOn || sendOn || sendOnError)) return function (f) {
    return f;
  };

  var maxAge = options.maxAge || 30;
  return function (next) {
    return function (reducer, initialState) {
      store = (0, _configureStore2.default)(next, monitorReducer, {
        maxAge: maxAge,
        trace: options.trace,
        traceLimit: options.traceLimit,
        shouldCatchErrors: !!sendOnError,
        shouldHotReload: options.shouldHotReload,
        shouldRecordChanges: options.shouldRecordChanges,
        shouldStartLocked: options.shouldStartLocked,
        pauseActionType: options.pauseActionType || '@@PAUSED'
      })(reducer, initialState);

      if (realtime) start();
      store.subscribe(function () {
        if (isMonitored) handleChange(store.getState(), store.liftedStore.getState(), maxAge);
      });
      return store;
    };
  };
}

function preEnhancer(createStore) {
  return function (reducer, preloadedState, enhancer) {
    store = createStore(reducer, preloadedState, enhancer);
    return _extends({}, store, {
      dispatch: function dispatch(action) {
        return locked ? action : store.dispatch(action);
      }
    });
  };
}

devToolsEnhancer.updateStore = function (newStore) {
  console.warn('devTools.updateStore is deprecated use composeWithDevTools instead: ' + 'https://github.com/zalmoxisus/remote-redux-devtools#use-devtools-compose-helper');
  store = newStore;
};

var compose = function compose(options) {
  return function () {
    for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }

    return function () {
      return [preEnhancer].concat(funcs).reduceRight(function (composed, f) {
        return f(composed);
      }, devToolsEnhancer(options).apply(undefined, arguments));
    };
  };
};

function composeWithDevTools() {
  if (arguments.length === 0) {
    return devToolsEnhancer();
  }
  if (arguments.length === 1 && _typeof(arguments.length <= 0 ? undefined : arguments[0]) === 'object') {
    return compose(arguments.length <= 0 ? undefined : arguments[0]);
  }
  return compose({}).apply(undefined, arguments);
}
      };
    };
  }
}, {package:"remote-redux-devtools",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remote-redux-devtools\\lib\\devTools.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\index.js", {"./cjs/react-is.development.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\cjs\\react-is.development.js","./cjs/react-is.production.min.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\cjs\\react-is.production.min.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-is\index.js
      return function (require, module, exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/react-is.production.min.js');
} else {
  module.exports = require('./cjs/react-is.development.js');
}

      };
    };
  }
}, {package:"react-is",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\factoryWithThrowingShims.js", {"./lib/ReactPropTypesSecret":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\lib\\ReactPropTypesSecret.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\prop-types\factoryWithThrowingShims.js
      return function (require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

      };
    };
  }
}, {package:"prop-types",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\factoryWithThrowingShims.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\factoryWithTypeCheckers.js", {"./checkPropTypes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\checkPropTypes.js","./lib/ReactPropTypesSecret":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\lib\\ReactPropTypesSecret.js","object-assign":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\object-assign\\index.js","react-is":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\prop-types\factoryWithTypeCheckers.js
      return function (require, module, exports) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactIs = require('react-is');
var assign = require('object-assign');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {};

if ("development" !== 'production') {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if ("development" !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if ("development" !== 'production') {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      "development" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

      };
    };
  }
}, {package:"prop-types",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\factoryWithTypeCheckers.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\error\\error.component.js", {"../../../app/scripts/lib/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\app\\scripts\\lib\\util.js","../../../shared/constants/app":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\app.js","../../helpers/constants/common":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\common.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\error\error.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _util = require("../../../app/scripts/lib/util");

var _app = require("../../../shared/constants/app");

var _common = require("../../helpers/constants/common");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ErrorPage extends _react.PureComponent {
  renderErrorDetail(content) {
    return /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("p", null, content));
  }

  renderErrorStack(title, stack) {
    return /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("span", null, title), /*#__PURE__*/_react.default.createElement("pre", {
      className: "error-page__stack"
    }, stack));
  }

  render() {
    const {
      error
    } = this.props;
    const {
      t
    } = this.context;

    const isPopup = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;

    const supportLink = /*#__PURE__*/_react.default.createElement("a", {
      target: "_blank",
      key: "metamaskSupportLink",
      rel: "noopener noreferrer",
      href: _common.SUPPORT_REQUEST_LINK
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "error-page__link-text"
    }, this.context.t('here')));

    const message = isPopup ? t('errorPagePopupMessage', [supportLink]) : t('errorPageMessage', [supportLink]);
    return /*#__PURE__*/_react.default.createElement("section", {
      className: "error-page"
    }, /*#__PURE__*/_react.default.createElement("h1", {
      className: "error-page__header"
    }, t('errorPageTitle')), /*#__PURE__*/_react.default.createElement("h2", {
      className: "error-page__subheader"
    }, message), /*#__PURE__*/_react.default.createElement("section", {
      className: "error-page__details"
    }, /*#__PURE__*/_react.default.createElement("details", null, /*#__PURE__*/_react.default.createElement("summary", null, t('errorDetails')), /*#__PURE__*/_react.default.createElement("ul", null, error.message ? this.renderErrorDetail(t('errorMessage', [error.message])) : null, error.code ? this.renderErrorDetail(t('errorCode', [error.code])) : null, error.name ? this.renderErrorDetail(t('errorName', [error.name])) : null, error.stack ? this.renderErrorStack(t('errorStack'), error.stack) : null))));
  }

}

(0, _defineProperty2.default)(ErrorPage, "contextTypes", {
  t: _propTypes.default.func.isRequired
});
(0, _defineProperty2.default)(ErrorPage, "propTypes", {
  error: _propTypes.default.object.isRequired
});
var _default = ErrorPage;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\error\\error.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\batch.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\utils\batch.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports.getBatch = exports.setBatch = void 0;

// Default to a dummy "batch" implementation that just runs the callback
function defaultNoopBatch(callback) {
  callback();
}

var batch = defaultNoopBatch; // Allow injecting another batching function later

var setBatch = function setBatch(newBatch) {
  return batch = newBatch;
}; // Supply a getter just to skip dealing with ESM bindings


exports.setBatch = setBatch;

var getBatch = function getBatch() {
  return batch;
};

exports.getBatch = getBatch;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\batch.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\shallowEqual.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\utils\shallowEqual.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports["default"] = shallowEqual;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\shallowEqual.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useDispatch.js", {"../components/Context":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\Context.js","./useStore":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useStore.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\hooks\useDispatch.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports.createDispatchHook = createDispatchHook;
exports.useDispatch = void 0;

var _Context = require("../components/Context");

var _useStore = require("./useStore");

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */
function createDispatchHook(context) {
  if (context === void 0) {
    context = _Context.ReactReduxContext;
  }

  var useStore = context === _Context.ReactReduxContext ? _useStore.useStore : (0, _useStore.createStoreHook)(context);
  return function useDispatch() {
    var store = useStore();
    return store.dispatch;
  };
}
/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */


var useDispatch =
/*#__PURE__*/
createDispatchHook();
exports.useDispatch = useDispatch;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useDispatch.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\reactBatchedUpdates.js", {"react-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\utils\reactBatchedUpdates.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports.unstable_batchedUpdates = void 0;

var _reactDom = require("react-dom");

exports.unstable_batchedUpdates = _reactDom.unstable_batchedUpdates;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\reactBatchedUpdates.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useStore.js", {"../components/Context":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\Context.js","./useReduxContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useReduxContext.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\hooks\useStore.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports.createStoreHook = createStoreHook;
exports.useStore = void 0;

var _react = require("react");

var _Context = require("../components/Context");

var _useReduxContext2 = require("./useReduxContext");

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */
function createStoreHook(context) {
  if (context === void 0) {
    context = _Context.ReactReduxContext;
  }

  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {
    return (0, _react.useContext)(context);
  };
  return function useStore() {
    var _useReduxContext = useReduxContext(),
        store = _useReduxContext.store;

    return store;
  };
}
/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */


var useStore =
/*#__PURE__*/
createStoreHook();
exports.useStore = useStore;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useStore.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\Context.js", {"@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\components\Context.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = exports.ReactReduxContext = void 0;

var _react = _interopRequireDefault(require("react"));

var ReactReduxContext =
/*#__PURE__*/
_react["default"].createContext(null);

exports.ReactReduxContext = ReactReduxContext;

if ("development" !== 'production') {
  ReactReduxContext.displayName = 'ReactRedux';
}

var _default = ReactReduxContext;
exports["default"] = _default;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\Context.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\connectAdvanced.js", {"../utils/Subscription":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\Subscription.js","../utils/useIsomorphicLayoutEffect":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\useIsomorphicLayoutEffect.js","./Context":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\Context.js","@babel/runtime/helpers/extends":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\extends.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireWildcard.js","@babel/runtime/helpers/objectWithoutPropertiesLoose":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\objectWithoutPropertiesLoose.js","hoist-non-react-statics":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\hoist-non-react-statics\\dist\\hoist-non-react-statics.cjs.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-is":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\components\connectAdvanced.js
      return function (require, module, exports) {
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = connectAdvanced;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _react = _interopRequireWildcard(require("react"));

var _reactIs = require("react-is");

var _Subscription = _interopRequireDefault(require("../utils/Subscription"));

var _useIsomorphicLayoutEffect = require("../utils/useIsomorphicLayoutEffect");

var _Context = require("./Context");

// Define some constant arrays just to avoid re-creating these
var EMPTY_ARRAY = [];
var NO_SUBSCRIPTION_ARRAY = [null, null];

var stringifyComponent = function stringifyComponent(Comp) {
  try {
    return JSON.stringify(Comp);
  } catch (err) {
    return String(Comp);
  }
};

function storeStateUpdatesReducer(state, action) {
  var updateCount = state[1];
  return [action.payload, updateCount + 1];
}

function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    return effectFunc.apply(void 0, effectArgs);
  }, dependencies);
}

function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
  // We want to capture the wrapper props and child props we used for later comparisons
  lastWrapperProps.current = wrapperProps;
  lastChildProps.current = actualChildProps;
  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update

  if (childPropsFromStoreUpdate.current) {
    childPropsFromStoreUpdate.current = null;
    notifyNestedSubs();
  }
}

function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
  // If we're not subscribed to the store, nothing to do here
  if (!shouldHandleStateChanges) return; // Capture values for checking if and when this component unmounts

  var didUnsubscribe = false;
  var lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component

  var checkForUpdates = function checkForUpdates() {
    if (didUnsubscribe) {
      // Don't run stale listeners.
      // Redux doesn't guarantee unsubscriptions happen until next dispatch.
      return;
    }

    var latestStoreState = store.getState();
    var newChildProps, error;

    try {
      // Actually run the selector with the most recent store state and wrapper props
      // to determine what the child props should be
      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
    } catch (e) {
      error = e;
      lastThrownError = e;
    }

    if (!error) {
      lastThrownError = null;
    } // If the child props haven't changed, nothing to do here - cascade the subscription update


    if (newChildProps === lastChildProps.current) {
      if (!renderIsScheduled.current) {
        notifyNestedSubs();
      }
    } else {
      // Save references to the new child props.  Note that we track the "child props from store update"
      // as a ref instead of a useState/useReducer because we need a way to determine if that value has
      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without
      // forcing another re-render, which we don't want.
      lastChildProps.current = newChildProps;
      childPropsFromStoreUpdate.current = newChildProps;
      renderIsScheduled.current = true; // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

      forceComponentUpdateDispatch({
        type: 'STORE_UPDATED',
        payload: {
          error: error
        }
      });
    }
  }; // Actually subscribe to the nearest connected ancestor (or store)


  subscription.onStateChange = checkForUpdates;
  subscription.trySubscribe(); // Pull data from the store after first render in case the store has
  // changed since we began.

  checkForUpdates();

  var unsubscribeWrapper = function unsubscribeWrapper() {
    didUnsubscribe = true;
    subscription.tryUnsubscribe();
    subscription.onStateChange = null;

    if (lastThrownError) {
      // It's possible that we caught an error due to a bad mapState function, but the
      // parent re-rendered without this component and we're about to unmount.
      // This shouldn't happen as long as we do top-down subscriptions correctly, but
      // if we ever do those wrong, this throw will surface the error in our tests.
      // In that case, throw the error from here so it doesn't get lost.
      throw lastThrownError;
    }
  };

  return unsubscribeWrapper;
}

var initStateUpdates = function initStateUpdates() {
  return [null, 0];
};

function connectAdvanced(
/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
      export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
selectorFactory, // options object:
_ref) {
  if (_ref === void 0) {
    _ref = {};
  }

  var _ref2 = _ref,
      _ref2$getDisplayName = _ref2.getDisplayName,
      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
    return "ConnectAdvanced(" + name + ")";
  } : _ref2$getDisplayName,
      _ref2$methodName = _ref2.methodName,
      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
      _ref2$renderCountProp = _ref2.renderCountProp,
      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
      _ref2$storeKey = _ref2.storeKey,
      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,
      _ref2$withRef = _ref2.withRef,
      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,
      _ref2$forwardRef = _ref2.forwardRef,
      forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef,
      _ref2$context = _ref2.context,
      context = _ref2$context === void 0 ? _Context.ReactReduxContext : _ref2$context,
      connectOptions = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"]);

  if ("development" !== 'production') {
    if (renderCountProp !== undefined) {
      throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
    }

    if (withRef) {
      throw new Error('withRef is removed. To access the wrapped instance, use a ref on the connected component');
    }

    var customStoreWarningMessage = 'To use a custom Redux store for specific components, create a custom React context with ' + "React.createContext(), and pass the context object to React Redux's Provider and specific components" + ' like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. ' + 'You may also pass a {context : MyContext} option to connect';

    if (storeKey !== 'store') {
      throw new Error('storeKey has been removed and does not do anything. ' + customStoreWarningMessage);
    }
  }

  var Context = context;
  return function wrapWithConnect(WrappedComponent) {
    if ("development" !== 'production' && !(0, _reactIs.isValidElementType)(WrappedComponent)) {
      throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
    }

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    var displayName = getDisplayName(wrappedComponentName);
    var selectorFactoryOptions = (0, _extends2["default"])({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent
    });
    var pure = connectOptions.pure;

    function createChildSelector(store) {
      return selectorFactory(store.dispatch, selectorFactoryOptions);
    } // If we aren't running in "pure" mode, we don't want to memoize values.
    // To avoid conditionally calling hooks, we fall back to a tiny wrapper
    // that just executes the given callback immediately.


    var usePureOnlyMemo = pure ? _react.useMemo : function (callback) {
      return callback();
    };

    function ConnectFunction(props) {
      var _useMemo = (0, _react.useMemo)(function () {
        // Distinguish between actual "data" props that were passed to the wrapper component,
        // and values needed to control behavior (forwarded refs, alternate context instances).
        // To maintain the wrapperProps object reference, memoize this destructuring.
        var forwardedRef = props.forwardedRef,
            wrapperProps = (0, _objectWithoutPropertiesLoose2["default"])(props, ["forwardedRef"]);
        return [props.context, forwardedRef, wrapperProps];
      }, [props]),
          propsContext = _useMemo[0],
          forwardedRef = _useMemo[1],
          wrapperProps = _useMemo[2];

      var ContextToUse = (0, _react.useMemo)(function () {
        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.
        // Memoize the check that determines which context instance we should use.
        return propsContext && propsContext.Consumer && (0, _reactIs.isContextConsumer)(_react["default"].createElement(propsContext.Consumer, null)) ? propsContext : Context;
      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available

      var contextValue = (0, _react.useContext)(ContextToUse); // The store _must_ exist as either a prop or in context.
      // We'll check to see if it _looks_ like a Redux store first.
      // This allows us to pass through a `store` prop that is just a plain value.

      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);

      if ("development" !== 'production' && !didStoreComeFromProps && !didStoreComeFromContext) {
        throw new Error("Could not find \"store\" in the context of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
      } // Based on the previous check, one of these must be true


      var store = didStoreComeFromProps ? props.store : contextValue.store;
      var childPropsSelector = (0, _react.useMemo)(function () {
        // The child props selector needs the store reference as an input.
        // Re-create this selector whenever the store changes.
        return createChildSelector(store);
      }, [store]);

      var _useMemo2 = (0, _react.useMemo)(function () {
        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component
        // connected to the store via props shouldn't use subscription from context, or vice versa.

        var subscription = new _Subscription["default"](store, didStoreComeFromProps ? null : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
        // the middle of the notification loop, where `subscription` will then be null. This can
        // probably be avoided if Subscription's listeners logic is changed to not call listeners
        // that have been unsubscribed in the  middle of the notification loop.

        var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);
        return [subscription, notifyNestedSubs];
      }, [store, didStoreComeFromProps, contextValue]),
          subscription = _useMemo2[0],
          notifyNestedSubs = _useMemo2[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,
      // and memoize that value to avoid unnecessary context updates.


      var overriddenContextValue = (0, _react.useMemo)(function () {
        if (didStoreComeFromProps) {
          // This component is directly subscribed to a store from props.
          // We don't want descendants reading from this store - pass down whatever
          // the existing context value is from the nearest connected ancestor.
          return contextValue;
        } // Otherwise, put this component's subscription instance into context, so that
        // connected descendants won't update until after this component is done


        return (0, _extends2["default"])({}, contextValue, {
          subscription: subscription
        });
      }, [didStoreComeFromProps, contextValue, subscription]); // We need to force this wrapper component to re-render whenever a Redux store update
      // causes a change to the calculated child component props (or we caught an error in mapState)

      var _useReducer = (0, _react.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates),
          _useReducer$ = _useReducer[0],
          previousStateUpdateResult = _useReducer$[0],
          forceComponentUpdateDispatch = _useReducer[1]; // Propagate any mapState/mapDispatch errors upwards


      if (previousStateUpdateResult && previousStateUpdateResult.error) {
        throw previousStateUpdateResult.error;
      } // Set up refs to coordinate values between the subscription effect and the render logic


      var lastChildProps = (0, _react.useRef)();
      var lastWrapperProps = (0, _react.useRef)(wrapperProps);
      var childPropsFromStoreUpdate = (0, _react.useRef)();
      var renderIsScheduled = (0, _react.useRef)(false);
      var actualChildProps = usePureOnlyMemo(function () {
        // Tricky logic here:
        // - This render may have been triggered by a Redux store update that produced new child props
        // - However, we may have gotten new wrapper props after that
        // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.
        // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.
        // So, we'll use the child props from store update only if the wrapper props are the same as last time.
        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
          return childPropsFromStoreUpdate.current;
        } // TODO We're reading the store directly in render() here. Bad idea?
        // This will likely cause Bad Things (TM) to happen in Concurrent Mode.
        // Note that we do this because on renders _not_ caused by store updates, we need the latest store state
        // to determine what the child props should be.


        return childPropsSelector(store.getState(), wrapperProps);
      }, [store, previousStateUpdateResult, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns
      // about useLayoutEffect in SSR, so we try to detect environment and fall back to
      // just useEffect instead to avoid the warning, since neither will run anyway.

      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]); // Our re-subscribe logic only runs when the store/subscription setup changes

      useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]); // Now that all that's done, we can finally try to actually render the child component.
      // We memoize the elements for the rendered child component as an optimization.

      var renderedWrappedComponent = (0, _react.useMemo)(function () {
        return _react["default"].createElement(WrappedComponent, (0, _extends2["default"])({}, actualChildProps, {
          ref: forwardedRef
        }));
      }, [forwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering
      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

      var renderedChild = (0, _react.useMemo)(function () {
        if (shouldHandleStateChanges) {
          // If this component is subscribed to store updates, we need to pass its own
          // subscription instance down to our descendants. That means rendering the same
          // Context instance, and putting a different value into the context.
          return _react["default"].createElement(ContextToUse.Provider, {
            value: overriddenContextValue
          }, renderedWrappedComponent);
        }

        return renderedWrappedComponent;
      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
      return renderedChild;
    } // If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.


    var Connect = pure ? _react["default"].memo(ConnectFunction) : ConnectFunction;
    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;

    if (forwardRef) {
      var forwarded = _react["default"].forwardRef(function forwardConnectRef(props, ref) {
        return _react["default"].createElement(Connect, (0, _extends2["default"])({}, props, {
          forwardedRef: ref
        }));
      });

      forwarded.displayName = displayName;
      forwarded.WrappedComponent = WrappedComponent;
      return (0, _hoistNonReactStatics["default"])(forwarded, WrappedComponent);
    }

    return (0, _hoistNonReactStatics["default"])(Connect, WrappedComponent);
  };
}
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\connectAdvanced.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useSelector.js", {"../components/Context":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\Context.js","../utils/Subscription":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\Subscription.js","../utils/useIsomorphicLayoutEffect":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\useIsomorphicLayoutEffect.js","./useReduxContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useReduxContext.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\hooks\useSelector.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.createSelectorHook = createSelectorHook;
exports.useSelector = void 0;

var _react = require("react");

var _useReduxContext2 = require("./useReduxContext");

var _Subscription = _interopRequireDefault(require("../utils/Subscription"));

var _useIsomorphicLayoutEffect = require("../utils/useIsomorphicLayoutEffect");

var _Context = require("../components/Context");

var refEquality = function refEquality(a, b) {
  return a === b;
};

function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
  var _useReducer = (0, _react.useReducer)(function (s) {
    return s + 1;
  }, 0),
      forceRender = _useReducer[1];

  var subscription = (0, _react.useMemo)(function () {
    return new _Subscription["default"](store, contextSub);
  }, [store, contextSub]);
  var latestSubscriptionCallbackError = (0, _react.useRef)();
  var latestSelector = (0, _react.useRef)();
  var latestSelectedState = (0, _react.useRef)();
  var selectedState;

  try {
    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {
      selectedState = selector(store.getState());
    } else {
      selectedState = latestSelectedState.current;
    }
  } catch (err) {
    if (latestSubscriptionCallbackError.current) {
      err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
    }

    throw err;
  }

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    latestSelector.current = selector;
    latestSelectedState.current = selectedState;
    latestSubscriptionCallbackError.current = undefined;
  });
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    function checkForUpdates() {
      try {
        var newSelectedState = latestSelector.current(store.getState());

        if (equalityFn(newSelectedState, latestSelectedState.current)) {
          return;
        }

        latestSelectedState.current = newSelectedState;
      } catch (err) {
        // we ignore all errors here, since when the component
        // is re-rendered, the selectors are called again, and
        // will throw again, if neither props nor store state
        // changed
        latestSubscriptionCallbackError.current = err;
      }

      forceRender({});
    }

    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    return function () {
      return subscription.tryUnsubscribe();
    };
  }, [store, subscription]);
  return selectedState;
}
/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */


function createSelectorHook(context) {
  if (context === void 0) {
    context = _Context.ReactReduxContext;
  }

  var useReduxContext = context === _Context.ReactReduxContext ? _useReduxContext2.useReduxContext : function () {
    return (0, _react.useContext)(context);
  };
  return function useSelector(selector, equalityFn) {
    if (equalityFn === void 0) {
      equalityFn = refEquality;
    }

    if ("development" !== 'production' && !selector) {
      throw new Error("You must pass a selector to useSelectors");
    }

    var _useReduxContext = useReduxContext(),
        store = _useReduxContext.store,
        contextSub = _useReduxContext.subscription;

    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
  };
}
/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */


var useSelector =
/*#__PURE__*/
createSelectorHook();
exports.useSelector = useSelector;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useSelector.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\connect.js", {"../components/connectAdvanced":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\connectAdvanced.js","../utils/shallowEqual":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\shallowEqual.js","./mapDispatchToProps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\mapDispatchToProps.js","./mapStateToProps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\mapStateToProps.js","./mergeProps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\mergeProps.js","./selectorFactory":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\selectorFactory.js","@babel/runtime/helpers/extends":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\extends.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","@babel/runtime/helpers/objectWithoutPropertiesLoose":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\objectWithoutPropertiesLoose.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\connect\connect.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.createConnect = createConnect;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _connectAdvanced = _interopRequireDefault(require("../components/connectAdvanced"));

var _shallowEqual = _interopRequireDefault(require("../utils/shallowEqual"));

var _mapDispatchToProps = _interopRequireDefault(require("./mapDispatchToProps"));

var _mapStateToProps = _interopRequireDefault(require("./mapStateToProps"));

var _mergeProps = _interopRequireDefault(require("./mergeProps"));

var _selectorFactory = _interopRequireDefault(require("./selectorFactory"));

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */
function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }

  return function (dispatch, options) {
    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
  };
}

function strictEqual(a, b) {
  return a === b;
} // createConnect with default args builds the 'official' connect behavior. Calling it with
// different options opens up some testing and extensibility scenarios


function createConnect(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === void 0 ? _connectAdvanced["default"] : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? _mapStateToProps["default"] : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? _mapDispatchToProps["default"] : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === void 0 ? _mergeProps["default"] : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === void 0 ? _selectorFactory["default"] : _ref$selectorFactory;

  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
    if (_ref2 === void 0) {
      _ref2 = {};
    }

    var _ref3 = _ref2,
        _ref3$pure = _ref3.pure,
        pure = _ref3$pure === void 0 ? true : _ref3$pure,
        _ref3$areStatesEqual = _ref3.areStatesEqual,
        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,
        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? _shallowEqual["default"] : _ref3$areOwnPropsEqua,
        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? _shallowEqual["default"] : _ref3$areStatePropsEq,
        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? _shallowEqual["default"] : _ref3$areMergedPropsE,
        extraOptions = (0, _objectWithoutPropertiesLoose2["default"])(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);
    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
    return connectHOC(selectorFactory, (0, _extends2["default"])({
      // used in error messages
      methodName: 'connect',
      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return "Connect(" + name + ")";
      },
      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),
      // passed through to selectorFactory
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual
    }, extraOptions));
  };
}

var _default =
/*#__PURE__*/
createConnect();

exports["default"] = _default;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\connect.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\Provider.js", {"../utils/Subscription":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\Subscription.js","./Context":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\Context.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","@babel/runtime/helpers/interopRequireWildcard":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireWildcard.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\components\Provider.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Context = require("./Context");

var _Subscription = _interopRequireDefault(require("../utils/Subscription"));

function Provider(_ref) {
  var store = _ref.store,
      context = _ref.context,
      children = _ref.children;
  var contextValue = (0, _react.useMemo)(function () {
    var subscription = new _Subscription["default"](store);
    subscription.onStateChange = subscription.notifyNestedSubs;
    return {
      store: store,
      subscription: subscription
    };
  }, [store]);
  var previousState = (0, _react.useMemo)(function () {
    return store.getState();
  }, [store]);
  (0, _react.useEffect)(function () {
    var subscription = contextValue.subscription;
    subscription.trySubscribe();

    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }

    return function () {
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
    };
  }, [contextValue, previousState]);
  var Context = context || _Context.ReactReduxContext;
  return _react["default"].createElement(Context.Provider, {
    value: contextValue
  }, children);
}

if ("development" !== 'production') {
  Provider.propTypes = {
    store: _propTypes["default"].shape({
      subscribe: _propTypes["default"].func.isRequired,
      dispatch: _propTypes["default"].func.isRequired,
      getState: _propTypes["default"].func.isRequired
    }),
    context: _propTypes["default"].object,
    children: _propTypes["default"].any
  };
}

var _default = Provider;
exports["default"] = _default;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\Provider.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\cjs\\react-router-dom.min.js", {"history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\node_modules\\history\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\index.js","tiny-invariant":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-invariant\\dist\\tiny-invariant.cjs.js","tiny-warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router-dom\cjs\react-router-dom.min.js
      return function (require, module, exports) {
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var reactRouter=require("react-router"),React=_interopDefault(require("react")),history=require("history");require("prop-types"),require("tiny-warning");var invariant=_interopDefault(require("tiny-invariant"));function _extends(){return(_extends=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function _inheritsLoose(e,r){e.prototype=Object.create(r.prototype),(e.prototype.constructor=e).__proto__=r}function _objectWithoutPropertiesLoose(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],0<=r.indexOf(t)||(n[t]=e[t]);return n}var BrowserRouter=function(n){function e(){for(var e,r=arguments.length,t=new Array(r),o=0;o<r;o++)t[o]=arguments[o];return(e=n.call.apply(n,[this].concat(t))||this).history=history.createBrowserHistory(e.props),e}return _inheritsLoose(e,n),e.prototype.render=function(){return React.createElement(reactRouter.Router,{history:this.history,children:this.props.children})},e}(React.Component),HashRouter=function(n){function e(){for(var e,r=arguments.length,t=new Array(r),o=0;o<r;o++)t[o]=arguments[o];return(e=n.call.apply(n,[this].concat(t))||this).history=history.createHashHistory(e.props),e}return _inheritsLoose(e,n),e.prototype.render=function(){return React.createElement(reactRouter.Router,{history:this.history,children:this.props.children})},e}(React.Component),resolveToLocation=function(e,r){return"function"==typeof e?e(r):e},normalizeToLocation=function(e,r){return"string"==typeof e?history.createLocation(e,null,null,r):e},forwardRefShim=function(e){return e},forwardRef=React.forwardRef;function isModifiedEvent(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}void 0===forwardRef&&(forwardRef=forwardRefShim);var LinkAnchor=forwardRef(function(e,r){var t=e.innerRef,o=e.navigate,n=e.onClick,a=_objectWithoutPropertiesLoose(e,["innerRef","navigate","onClick"]),i=a.target,c=_extends({},a,{onClick:function(r){try{n&&n(r)}catch(e){throw r.preventDefault(),e}r.defaultPrevented||0!==r.button||i&&"_self"!==i||isModifiedEvent(r)||(r.preventDefault(),o())}});return c.ref=forwardRefShim!==forwardRef&&r||t,React.createElement("a",c)}),Link=forwardRef(function(e,a){var r=e.component,i=void 0===r?LinkAnchor:r,c=e.replace,f=e.to,u=e.innerRef,s=_objectWithoutPropertiesLoose(e,["component","replace","to","innerRef"]);return React.createElement(reactRouter.__RouterContext.Consumer,null,function(r){r||invariant(!1);var t=r.history,e=normalizeToLocation(resolveToLocation(f,r.location),r.location),o=e?t.createHref(e):"",n=_extends({},s,{href:o,navigate:function(){var e=resolveToLocation(f,r.location);(c?t.replace:t.push)(e)}});return forwardRefShim!==forwardRef?n.ref=a||u:n.innerRef=u,React.createElement(i,n)})}),forwardRefShim$1=function(e){return e},forwardRef$1=React.forwardRef;function joinClassnames(){for(var e=arguments.length,r=new Array(e),t=0;t<e;t++)r[t]=arguments[t];return r.filter(function(e){return e}).join(" ")}void 0===forwardRef$1&&(forwardRef$1=forwardRefShim$1);var NavLink=forwardRef$1(function(e,s){var r=e["aria-current"],l=void 0===r?"page":r,t=e.activeClassName,p=void 0===t?"active":t,h=e.activeStyle,R=e.className,d=e.exact,v=e.isActive,y=e.location,m=e.strict,w=e.style,_=e.to,L=e.innerRef,x=_objectWithoutPropertiesLoose(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return React.createElement(reactRouter.__RouterContext.Consumer,null,function(e){e||invariant(!1);var r=y||e.location,t=normalizeToLocation(resolveToLocation(_,r),r),o=t.pathname,n=o&&o.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),a=n?reactRouter.matchPath(r.pathname,{path:n,exact:d,strict:m}):null,i=!!(v?v(a,r):a),c=i?joinClassnames(R,p):R,f=i?_extends({},w,{},h):w,u=_extends({"aria-current":i&&l||null,className:c,style:f,to:t},x);return forwardRefShim$1!==forwardRef$1?u.ref=s||L:u.innerRef=L,React.createElement(Link,u)})});Object.keys(reactRouter).forEach(function(e){"default"!==e&&Object.defineProperty(exports,e,{enumerable:!0,get:function(){return reactRouter[e]}})}),exports.BrowserRouter=BrowserRouter,exports.HashRouter=HashRouter,exports.Link=Link,exports.NavLink=NavLink;
//# sourceMappingURL=react-router-dom.min.js.map

      };
    };
  }
}, {package:"react-router-dom",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\cjs\\react-router-dom.min.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\cjs\\react-router-dom.js", {"history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\node_modules\\history\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\index.js","tiny-invariant":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-invariant\\dist\\tiny-invariant.cjs.js","tiny-warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router-dom\cjs\react-router-dom.js
      return function (require, module, exports) {
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var reactRouter = require('react-router');
var React = _interopDefault(require('react'));
var history = require('history');
var PropTypes = _interopDefault(require('prop-types'));
var warning = _interopDefault(require('tiny-warning'));
var invariant = _interopDefault(require('tiny-invariant'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/**
 * The public API for a <Router> that uses HTML5 history.
 */

var BrowserRouter =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(BrowserRouter, _React$Component);

  function BrowserRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = history.createBrowserHistory(_this.props);
    return _this;
  }

  var _proto = BrowserRouter.prototype;

  _proto.render = function render() {
    return React.createElement(reactRouter.Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return BrowserRouter;
}(React.Component);

{
  BrowserRouter.propTypes = {
    basename: PropTypes.string,
    children: PropTypes.node,
    forceRefresh: PropTypes.bool,
    getUserConfirmation: PropTypes.func,
    keyLength: PropTypes.number
  };

  BrowserRouter.prototype.componentDidMount = function () {
     warning(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.") ;
  };
}

/**
 * The public API for a <Router> that uses window.location.hash.
 */

var HashRouter =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(HashRouter, _React$Component);

  function HashRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = history.createHashHistory(_this.props);
    return _this;
  }

  var _proto = HashRouter.prototype;

  _proto.render = function render() {
    return React.createElement(reactRouter.Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return HashRouter;
}(React.Component);

{
  HashRouter.propTypes = {
    basename: PropTypes.string,
    children: PropTypes.node,
    getUserConfirmation: PropTypes.func,
    hashType: PropTypes.oneOf(["hashbang", "noslash", "slash"])
  };

  HashRouter.prototype.componentDidMount = function () {
     warning(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.") ;
  };
}

var resolveToLocation = function resolveToLocation(to, currentLocation) {
  return typeof to === "function" ? to(currentLocation) : to;
};
var normalizeToLocation = function normalizeToLocation(to, currentLocation) {
  return typeof to === "string" ? history.createLocation(to, null, null, currentLocation) : to;
};

var forwardRefShim = function forwardRefShim(C) {
  return C;
};

var forwardRef = React.forwardRef;

if (typeof forwardRef === "undefined") {
  forwardRef = forwardRefShim;
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

var LinkAnchor = forwardRef(function (_ref, forwardedRef) {
  var innerRef = _ref.innerRef,
      navigate = _ref.navigate,
      _onClick = _ref.onClick,
      rest = _objectWithoutPropertiesLoose(_ref, ["innerRef", "navigate", "onClick"]);

  var target = rest.target;

  var props = _extends({}, rest, {
    onClick: function onClick(event) {
      try {
        if (_onClick) _onClick(event);
      } catch (ex) {
        event.preventDefault();
        throw ex;
      }

      if (!event.defaultPrevented && // onClick prevented default
      event.button === 0 && ( // ignore everything but left clicks
      !target || target === "_self") && // let browser handle "target=_blank" etc.
      !isModifiedEvent(event) // ignore clicks with modifier keys
      ) {
          event.preventDefault();
          navigate();
        }
    }
  }); // React 15 compat


  if (forwardRefShim !== forwardRef) {
    props.ref = forwardedRef || innerRef;
  } else {
    props.ref = innerRef;
  }

  return React.createElement("a", props);
});

{
  LinkAnchor.displayName = "LinkAnchor";
}
/**
 * The public API for rendering a history-aware <a>.
 */


var Link = forwardRef(function (_ref2, forwardedRef) {
  var _ref2$component = _ref2.component,
      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,
      replace = _ref2.replace,
      to = _ref2.to,
      innerRef = _ref2.innerRef,
      rest = _objectWithoutPropertiesLoose(_ref2, ["component", "replace", "to", "innerRef"]);

  return React.createElement(reactRouter.__RouterContext.Consumer, null, function (context) {
    !context ?  invariant(false, "You should not use <Link> outside a <Router>")  : void 0;
    var history = context.history;
    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
    var href = location ? history.createHref(location) : "";

    var props = _extends({}, rest, {
      href: href,
      navigate: function navigate() {
        var location = resolveToLocation(to, context.location);
        var method = replace ? history.replace : history.push;
        method(location);
      }
    }); // React 15 compat


    if (forwardRefShim !== forwardRef) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.innerRef = innerRef;
    }

    return React.createElement(component, props);
  });
});

{
  var toType = PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func]);
  var refType = PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.shape({
    current: PropTypes.any
  })]);
  Link.displayName = "Link";
  Link.propTypes = {
    innerRef: refType,
    onClick: PropTypes.func,
    replace: PropTypes.bool,
    target: PropTypes.string,
    to: toType.isRequired
  };
}

var forwardRefShim$1 = function forwardRefShim(C) {
  return C;
};

var forwardRef$1 = React.forwardRef;

if (typeof forwardRef$1 === "undefined") {
  forwardRef$1 = forwardRefShim$1;
}

function joinClassnames() {
  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
    classnames[_key] = arguments[_key];
  }

  return classnames.filter(function (i) {
    return i;
  }).join(" ");
}
/**
 * A <Link> wrapper that knows if it's "active" or not.
 */


var NavLink = forwardRef$1(function (_ref, forwardedRef) {
  var _ref$ariaCurrent = _ref["aria-current"],
      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
      _ref$activeClassName = _ref.activeClassName,
      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,
      activeStyle = _ref.activeStyle,
      classNameProp = _ref.className,
      exact = _ref.exact,
      isActiveProp = _ref.isActive,
      locationProp = _ref.location,
      strict = _ref.strict,
      styleProp = _ref.style,
      to = _ref.to,
      innerRef = _ref.innerRef,
      rest = _objectWithoutPropertiesLoose(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "strict", "style", "to", "innerRef"]);

  return React.createElement(reactRouter.__RouterContext.Consumer, null, function (context) {
    !context ?  invariant(false, "You should not use <NavLink> outside a <Router>")  : void 0;
    var currentLocation = locationProp || context.location;
    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
    var match = escapedPath ? reactRouter.matchPath(currentLocation.pathname, {
      path: escapedPath,
      exact: exact,
      strict: strict
    }) : null;
    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
    var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;

    var props = _extends({
      "aria-current": isActive && ariaCurrent || null,
      className: className,
      style: style,
      to: toLocation
    }, rest); // React 15 compat


    if (forwardRefShim$1 !== forwardRef$1) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.innerRef = innerRef;
    }

    return React.createElement(Link, props);
  });
});

{
  NavLink.displayName = "NavLink";
  var ariaCurrentType = PropTypes.oneOf(["page", "step", "location", "date", "time", "true"]);
  NavLink.propTypes = _extends({}, Link.propTypes, {
    "aria-current": ariaCurrentType,
    activeClassName: PropTypes.string,
    activeStyle: PropTypes.object,
    className: PropTypes.string,
    exact: PropTypes.bool,
    isActive: PropTypes.func,
    location: PropTypes.object,
    strict: PropTypes.bool,
    style: PropTypes.object
  });
}

Object.keys(reactRouter).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return reactRouter[k];
    }
  });
});
exports.BrowserRouter = BrowserRouter;
exports.HashRouter = HashRouter;
exports.Link = Link;
exports.NavLink = NavLink;
//# sourceMappingURL=react-router-dom.js.map

      };
    };
  }
}, {package:"react-router-dom",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\cjs\\react-router-dom.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\routes\\routes.container.js", {"../../ducks/history/history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\history\\history.js","../../ducks/swaps/swaps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\swaps\\swaps.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./routes.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\routes\\routes.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\routes\routes.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _selectors = require("../../selectors");

var _actions = require("../../store/actions");

var _history = require("../../ducks/history/history");

var _swaps = require("../../ducks/swaps/swaps");

var _routes = _interopRequireDefault(require("./routes.component"));

function mapStateToProps(state) {
  var _state$metamask$brows, _state$metamask$brows2, _state$metamask$provi;

  const {
    appState
  } = state;
  const {
    alertOpen,
    alertMessage,
    isLoading,
    loadingMessage
  } = appState;
  const {
    autoLockTimeLimit = 0
  } = (0, _selectors.getPreferences)(state);
  return {
    alertOpen,
    alertMessage,
    textDirection: state.metamask.textDirection,
    isLoading,
    loadingMessage,
    isUnlocked: state.metamask.isUnlocked,
    isNetworkLoading: (0, _selectors.isNetworkLoading)(state),
    currentCurrency: state.metamask.currentCurrency,
    isMouseUser: state.appState.isMouseUser,
    autoLockTimeLimit,
    browserEnvironmentOs: (_state$metamask$brows = state.metamask.browserEnvironment) === null || _state$metamask$brows === void 0 ? void 0 : _state$metamask$brows.os,
    browserEnvironmentContainter: (_state$metamask$brows2 = state.metamask.browserEnvironment) === null || _state$metamask$brows2 === void 0 ? void 0 : _state$metamask$brows2.browser,
    providerId: (0, _selectors.getNetworkIdentifier)(state),
    providerType: (_state$metamask$provi = state.metamask.provider) === null || _state$metamask$provi === void 0 ? void 0 : _state$metamask$provi.type
  };
}

function mapDispatchToProps(dispatch) {
  return {
    lockMetaMask: () => dispatch((0, _actions.lockMetamask)(false)),
    setCurrentCurrencyToUSD: () => dispatch((0, _actions.setCurrentCurrency)('usd')),
    setMouseUserState: isMouseUser => dispatch((0, _actions.setMouseUserState)(isMouseUser)),
    setLastActiveTime: () => dispatch((0, _actions.setLastActiveTime)()),
    pageChanged: path => dispatch((0, _history.pageChanged)(path)),
    prepareToLeaveSwaps: () => dispatch((0, _swaps.prepareToLeaveSwaps)())
  };
}

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_routes.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\routes\\routes.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\units.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\@formatjs\intl-utils\dist\units.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// https://tc39.es/ecma402/#sec-issanctionedsimpleunitidentifier
exports.SANCTIONED_UNITS = [
    'angle-degree',
    'area-acre',
    'area-hectare',
    'concentr-percent',
    'digital-bit',
    'digital-byte',
    'digital-gigabit',
    'digital-gigabyte',
    'digital-kilobit',
    'digital-kilobyte',
    'digital-megabit',
    'digital-megabyte',
    'digital-petabyte',
    'digital-terabit',
    'digital-terabyte',
    'duration-day',
    'duration-hour',
    'duration-millisecond',
    'duration-minute',
    'duration-month',
    'duration-second',
    'duration-week',
    'duration-year',
    'length-centimeter',
    'length-foot',
    'length-inch',
    'length-kilometer',
    'length-meter',
    'length-mile-scandinavian',
    'length-mile',
    'length-millimeter',
    'length-yard',
    'mass-gram',
    'mass-kilogram',
    'mass-ounce',
    'mass-pound',
    'mass-stone',
    'temperature-celsius',
    'temperature-fahrenheit',
    'volume-fluid-ounce',
    'volume-gallon',
    'volume-liter',
    'volume-milliliter',
];
// In CLDR, the unit name always follows the form `namespace-unit` pattern.
// For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.
function removeUnitNamespace(unit) {
    return unit.replace(/^(.*?)-/, '');
}
exports.removeUnitNamespace = removeUnitNamespace;
//# sourceMappingURL=units.js.map
      };
    };
  }
}, {package:"@formatjs\\intl-utils",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\units.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\diff.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\@formatjs\intl-utils\dist\diff.js
      return function (require, module, exports) {
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var MS_PER_SECOND = 1e3;
var SECS_PER_MIN = 60;
var SECS_PER_HOUR = SECS_PER_MIN * 60;
var SECS_PER_DAY = SECS_PER_HOUR * 24;
var SECS_PER_WEEK = SECS_PER_DAY * 7;
function selectUnit(from, to, thresholds) {
    if (to === void 0) { to = Date.now(); }
    if (thresholds === void 0) { thresholds = {}; }
    var resolvedThresholds = __assign(__assign({}, exports.DEFAULT_THRESHOLDS), (thresholds || {}));
    var secs = (+from - +to) / MS_PER_SECOND;
    if (Math.abs(secs) < resolvedThresholds.second) {
        return {
            value: Math.round(secs),
            unit: 'second',
        };
    }
    var mins = secs / SECS_PER_MIN;
    if (Math.abs(mins) < resolvedThresholds.minute) {
        return {
            value: Math.round(mins),
            unit: 'minute',
        };
    }
    var hours = secs / SECS_PER_HOUR;
    if (Math.abs(hours) < resolvedThresholds.hour) {
        return {
            value: Math.round(hours),
            unit: 'hour',
        };
    }
    var days = secs / SECS_PER_DAY;
    if (Math.abs(days) < resolvedThresholds.day) {
        return {
            value: Math.round(days),
            unit: 'day',
        };
    }
    var fromDate = new Date(from);
    var toDate = new Date(to);
    var years = fromDate.getFullYear() - toDate.getFullYear();
    if (Math.round(Math.abs(years)) > 0) {
        return {
            value: Math.round(years),
            unit: 'year',
        };
    }
    var months = years * 12 + fromDate.getMonth() - toDate.getMonth();
    if (Math.round(Math.abs(months)) > 0) {
        return {
            value: Math.round(months),
            unit: 'month',
        };
    }
    var weeks = secs / SECS_PER_WEEK;
    return {
        value: Math.round(weeks),
        unit: 'week',
    };
}
exports.selectUnit = selectUnit;
exports.DEFAULT_THRESHOLDS = {
    second: 45,
    minute: 45,
    hour: 22,
    day: 5,
};
//# sourceMappingURL=diff.js.map
      };
    };
  }
}, {package:"@formatjs\\intl-utils",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\diff.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\invariant.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\@formatjs\intl-utils\dist\invariant.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function invariant(condition, message, Err) {
    if (Err === void 0) { Err = Error; }
    if (!condition) {
        throw new Err(message);
    }
}
exports.invariant = invariant;
//# sourceMappingURL=invariant.js.map
      };
    };
  }
}, {package:"@formatjs\\intl-utils",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\invariant.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\polyfill-utils.js", {"./invariant":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\invariant.js","./units":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\units.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\@formatjs\intl-utils\dist\polyfill-utils.js
      return function (require, module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var invariant_1 = require("./invariant");
var units_1 = require("./units");
function hasOwnProperty(o, key) {
    return Object.prototype.hasOwnProperty.call(o, key);
}
Object.defineProperty(exports, 'hasOwnProperty', { value: hasOwnProperty });
/**
 * https://tc39.es/ecma262/#sec-toobject
 * @param arg
 */
function toObject(arg) {
    if (arg == null) {
        throw new TypeError('undefined/null cannot be converted to object');
    }
    return Object(arg);
}
exports.toObject = toObject;
/**
 * https://tc39.es/ecma262/#sec-tostring
 */
function toString(o) {
    // Only symbol is irregular...
    if (typeof o === 'symbol') {
        throw TypeError('Cannot convert a Symbol value to a string');
    }
    return String(o);
}
exports.toString = toString;
/**
 * https://tc39.es/ecma402/#sec-getoption
 * @param opts
 * @param prop
 * @param type
 * @param values
 * @param fallback
 */
function getOption(opts, prop, type, values, fallback) {
    // const descriptor = Object.getOwnPropertyDescriptor(opts, prop);
    var value = opts[prop];
    if (value !== undefined) {
        if (type !== 'boolean' && type !== 'string') {
            throw new TypeError('invalid type');
        }
        if (type === 'boolean') {
            value = Boolean(value);
        }
        if (type === 'string') {
            value = toString(value);
        }
        if (values !== undefined && !values.filter(function (val) { return val == value; }).length) {
            throw new RangeError(value + " is not within " + values.join(', '));
        }
        return value;
    }
    return fallback;
}
exports.getOption = getOption;
/**
 * https://tc39.es/ecma402/#sec-defaultnumberoption
 * @param val
 * @param min
 * @param max
 * @param fallback
 */
function defaultNumberOption(val, min, max, fallback) {
    if (val !== undefined) {
        val = Number(val);
        if (isNaN(val) || val < min || val > max) {
            throw new RangeError(val + " is outside of range [" + min + ", " + max + "]");
        }
        return Math.floor(val);
    }
    return fallback;
}
exports.defaultNumberOption = defaultNumberOption;
/**
 * https://tc39.es/ecma402/#sec-getnumberoption
 * @param options
 * @param property
 * @param min
 * @param max
 * @param fallback
 */
function getNumberOption(options, property, minimum, maximum, fallback) {
    var val = options[property];
    return defaultNumberOption(val, minimum, maximum, fallback);
}
exports.getNumberOption = getNumberOption;
function setInternalSlot(map, pl, field, value) {
    if (!map.get(pl)) {
        map.set(pl, Object.create(null));
    }
    var slots = map.get(pl);
    slots[field] = value;
}
exports.setInternalSlot = setInternalSlot;
function setMultiInternalSlots(map, pl, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var k = _a[_i];
        setInternalSlot(map, pl, k, props[k]);
    }
}
exports.setMultiInternalSlots = setMultiInternalSlots;
function getInternalSlot(map, pl, field) {
    return getMultiInternalSlots(map, pl, field)[field];
}
exports.getInternalSlot = getInternalSlot;
function getMultiInternalSlots(map, pl) {
    var fields = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        fields[_i - 2] = arguments[_i];
    }
    var slots = map.get(pl);
    if (!slots) {
        throw new TypeError(pl + " InternalSlot has not been initialized");
    }
    return fields.reduce(function (all, f) {
        all[f] = slots[f];
        return all;
    }, Object.create(null));
}
exports.getMultiInternalSlots = getMultiInternalSlots;
function isLiteralPart(patternPart) {
    return patternPart.type === 'literal';
}
exports.isLiteralPart = isLiteralPart;
function partitionPattern(pattern) {
    var result = [];
    var beginIndex = pattern.indexOf('{');
    var endIndex = 0;
    var nextIndex = 0;
    var length = pattern.length;
    while (beginIndex < pattern.length && beginIndex > -1) {
        endIndex = pattern.indexOf('}', beginIndex);
        invariant_1.invariant(endIndex > beginIndex, "Invalid pattern " + pattern);
        if (beginIndex > nextIndex) {
            result.push({
                type: 'literal',
                value: pattern.substring(nextIndex, beginIndex),
            });
        }
        result.push({
            type: pattern.substring(beginIndex + 1, endIndex),
            value: undefined,
        });
        nextIndex = endIndex + 1;
        beginIndex = pattern.indexOf('{', nextIndex);
    }
    if (nextIndex < length) {
        result.push({
            type: 'literal',
            value: pattern.substring(nextIndex, length),
        });
    }
    return result;
}
exports.partitionPattern = partitionPattern;
/**
 * https://tc39.es/ecma402/#sec-setnfdigitoptions
 */
function setNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {
    var mnid = getNumberOption(opts, 'minimumIntegerDigits', 1, 21, 1);
    var mnfd = opts.minimumFractionDigits;
    var mxfd = opts.maximumFractionDigits;
    var mnsd = opts.minimumSignificantDigits;
    var mxsd = opts.maximumSignificantDigits;
    internalSlots.minimumIntegerDigits = mnid;
    if (mnsd !== undefined || mxsd !== undefined) {
        internalSlots.roundingType = 'significantDigits';
        mnsd = defaultNumberOption(mnsd, 1, 21, 1);
        mxsd = defaultNumberOption(mxsd, mnsd, 21, 21);
        internalSlots.minimumSignificantDigits = mnsd;
        internalSlots.maximumSignificantDigits = mxsd;
    }
    else if (mnfd !== undefined || mxfd !== undefined) {
        internalSlots.roundingType = 'fractionDigits';
        mnfd = defaultNumberOption(mnfd, 0, 20, mnfdDefault);
        var mxfdActualDefault = Math.max(mnfd, mxfdDefault);
        mxfd = defaultNumberOption(mxfd, mnfd, 20, mxfdActualDefault);
        internalSlots.minimumFractionDigits = mnfd;
        internalSlots.maximumFractionDigits = mxfd;
    }
    else if (notation === 'compact') {
        internalSlots.roundingType = 'compactRounding';
    }
    else {
        internalSlots.roundingType = 'fractionDigits';
        internalSlots.minimumFractionDigits = mnfdDefault;
        internalSlots.maximumFractionDigits = mxfdDefault;
    }
}
exports.setNumberFormatDigitOptions = setNumberFormatDigitOptions;
function objectIs(x, y) {
    if (Object.is) {
        return Object.is(x, y);
    }
    // SameValue algorithm
    if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
    }
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
}
exports.objectIs = objectIs;
var NOT_A_Z_REGEX = /[^A-Z]/;
/**
 * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
 * @param str string to convert
 */
function toUpperCase(str) {
    return str.replace(/([a-z])/g, function (_, c) { return c.toUpperCase(); });
}
/**
 * https://tc39.es/ecma402/#sec-iswellformedcurrencycode
 */
function isWellFormedCurrencyCode(currency) {
    currency = toUpperCase(currency);
    if (currency.length !== 3) {
        return false;
    }
    if (NOT_A_Z_REGEX.test(currency)) {
        return false;
    }
    return true;
}
exports.isWellFormedCurrencyCode = isWellFormedCurrencyCode;
/**
 * https://tc39.es/ecma402/#sec-formatnumberstring
 * TODO: dedup with intl-pluralrules
 */
function formatNumericToString(internalSlots, x) {
    var isNegative = x < 0 || objectIs(x, -0);
    if (isNegative) {
        x = -x;
    }
    var result;
    var rourndingType = internalSlots.roundingType;
    switch (rourndingType) {
        case 'significantDigits':
            result = toRawPrecision(x, internalSlots.minimumSignificantDigits, internalSlots.maximumSignificantDigits);
            break;
        case 'fractionDigits':
            result = toRawFixed(x, internalSlots.minimumFractionDigits, internalSlots.maximumFractionDigits);
            break;
        default:
            result = toRawPrecision(x, 1, 2);
            if (result.integerDigitsCount > 1) {
                result = toRawFixed(x, 0, 0);
            }
            break;
    }
    x = result.roundedNumber;
    var string = result.formattedString;
    var int = result.integerDigitsCount;
    var minInteger = internalSlots.minimumIntegerDigits;
    if (int < minInteger) {
        var forwardZeros = repeat('0', minInteger - int);
        string = forwardZeros + string;
    }
    if (isNegative) {
        x = -x;
    }
    return { roundedNumber: x, formattedString: string };
}
exports.formatNumericToString = formatNumericToString;
/**
 * TODO: dedup with intl-pluralrules and support BigInt
 * https://tc39.es/ecma402/#sec-torawfixed
 * @param x a finite non-negative Number or BigInt
 * @param minFraction and integer between 0 and 20
 * @param maxFraction and integer between 0 and 20
 */
function toRawFixed(x, minFraction, maxFraction) {
    var f = maxFraction;
    var n = Math.round(x * Math.pow(10, f));
    var xFinal = n / Math.pow(10, f);
    // n is a positive integer, but it is possible to be greater than 1e21.
    // In such case we will go the slow path.
    // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring
    var m;
    if (n < 1e21) {
        m = n.toString();
    }
    else {
        m = n.toString();
        var _a = m.split('e'), mantissa = _a[0], exponent = _a[1];
        m = mantissa.replace('.', '');
        m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));
    }
    var int;
    if (f !== 0) {
        var k = m.length;
        if (k <= f) {
            var z = repeat('0', f + 1 - k);
            m = z + m;
            k = f + 1;
        }
        var a = m.slice(0, k - f);
        var b = m.slice(k - f);
        m = a + "." + b;
        int = a.length;
    }
    else {
        int = m.length;
    }
    var cut = maxFraction - minFraction;
    while (cut > 0 && m[m.length - 1] === '0') {
        m = m.slice(0, -1);
        cut--;
    }
    if (m[m.length - 1] === '.') {
        m = m.slice(0, -1);
    }
    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };
}
exports.toRawFixed = toRawFixed;
// https://tc39.es/ecma402/#sec-torawprecision
function toRawPrecision(x, minPrecision, maxPrecision) {
    var p = maxPrecision;
    var m;
    var e;
    var xFinal;
    if (x === 0) {
        m = repeat('0', p);
        e = 0;
        xFinal = 0;
    }
    else {
        var xToString = x.toString();
        // If xToString is formatted as scientific notation, the number is either very small or very
        // large. If the precision of the formatted string is lower that requested max precision, we
        // should still infer them from the formatted string, otherwise the formatted result might have
        // precision loss (e.g. 1e41 will not have 0 in every trailing digits).
        var xToStringExponentIndex = xToString.indexOf('e');
        var _a = xToString.split('e'), xToStringMantissa = _a[0], xToStringExponent = _a[1];
        var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');
        if (xToStringExponentIndex >= 0 &&
            xToStringMantissaWithoutDecimalPoint.length <= p) {
            e = +xToStringExponent;
            m =
                xToStringMantissaWithoutDecimalPoint +
                    repeat('0', p - xToStringMantissaWithoutDecimalPoint.length);
            xFinal = x;
        }
        else {
            e = getMagnitude(x);
            var decimalPlaceOffset = e - p + 1;
            // n is the integer containing the required precision digits. To derive the formatted string,
            // we will adjust its decimal place in the logic below.
            var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset));
            // The rounding caused the change of magnitude, so we should increment `e` by 1.
            if (adjustDecimalPlace(n, p - 1) >= 10) {
                e = e + 1;
                // Divide n by 10 to swallow one precision.
                n = Math.floor(n / 10);
            }
            m = n.toString();
            // Equivalent of n * 10 ** (e - p + 1)
            xFinal = adjustDecimalPlace(n, p - 1 - e);
        }
    }
    var int;
    if (e >= p - 1) {
        m = m + repeat('0', e - p + 1);
        int = e + 1;
    }
    else if (e >= 0) {
        m = m.slice(0, e + 1) + "." + m.slice(e + 1);
        int = e + 1;
    }
    else {
        m = "0." + repeat('0', -e - 1) + m;
        int = 1;
    }
    if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {
        var cut = maxPrecision - minPrecision;
        while (cut > 0 && m[m.length - 1] === '0') {
            m = m.slice(0, -1);
            cut--;
        }
        if (m[m.length - 1] === '.') {
            m = m.slice(0, -1);
        }
    }
    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };
    // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.
    function adjustDecimalPlace(x, magnitude) {
        return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);
    }
}
exports.toRawPrecision = toRawPrecision;
function repeat(s, times) {
    if (typeof s.repeat === 'function') {
        return s.repeat(times);
    }
    var arr = new Array(times);
    for (var i = 0; i < arr.length; i++) {
        arr[i] = s;
    }
    return arr.join('');
}
exports.repeat = repeat;
/**
 * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue
 * @param x number
 */
function getMagnitude(x) {
    // Cannot count string length via Number.toString because it may use scientific notation
    // for very small or very large numbers.
    return Math.floor(Math.log(x) * Math.LOG10E);
}
exports.getMagnitude = getMagnitude;
/**
 * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
 * @param str string to convert
 */
function toLowerCase(str) {
    return str.replace(/([A-Z])/g, function (_, c) { return c.toLowerCase(); });
}
var SHORTENED_SACTION_UNITS = units_1.SANCTIONED_UNITS.map(function (unit) {
    return unit.replace(/^(.*?)-/, '');
});
/**
 * https://tc39.es/ecma402/#sec-iswellformedunitidentifier
 * @param unit
 */
function isWellFormedUnitIdentifier(unit) {
    unit = toLowerCase(unit);
    if (SHORTENED_SACTION_UNITS.indexOf(unit) > -1) {
        return true;
    }
    var units = unit.split('-per-');
    if (units.length !== 2) {
        return false;
    }
    if (SHORTENED_SACTION_UNITS.indexOf(units[0]) < 0 ||
        SHORTENED_SACTION_UNITS.indexOf(units[1]) < 0) {
        return false;
    }
    return true;
}
exports.isWellFormedUnitIdentifier = isWellFormedUnitIdentifier;
/*
  17 ECMAScript Standard Built-in Objects:
    Every built-in Function object, including constructors, that is not
    identified as an anonymous function has a name property whose value
    is a String.

    Unless otherwise specified, the name property of a built-in Function
    object, if it exists, has the attributes { [[Writable]]: false,
    [[Enumerable]]: false, [[Configurable]]: true }.
*/
function defineProperty(target, name, _a) {
    var value = _a.value;
    Object.defineProperty(target, name, {
        configurable: true,
        enumerable: false,
        writable: true,
        value: value,
    });
}
exports.defineProperty = defineProperty;
//# sourceMappingURL=polyfill-utils.js.map
      };
    };
  }
}, {package:"@formatjs\\intl-utils",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\polyfill-utils.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\resolve-locale.js", {"./invariant":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\invariant.js","./polyfill-utils":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\polyfill-utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\@formatjs\intl-utils\dist\resolve-locale.js
      return function (require, module, exports) {
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var invariant_1 = require("./invariant");
var polyfill_utils_1 = require("./polyfill-utils");
function createResolveLocale(getDefaultLocale) {
    var lookupMatcher = createLookupMatcher(getDefaultLocale);
    var bestFitMatcher = createBestFitMatcher(getDefaultLocale);
    /**
     * https://tc39.es/ecma402/#sec-resolvelocale
     */
    return function resolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData) {
        var matcher = options.localeMatcher;
        var r;
        if (matcher === 'lookup') {
            r = lookupMatcher(availableLocales, requestedLocales);
        }
        else {
            r = bestFitMatcher(availableLocales, requestedLocales);
        }
        var foundLocale = r.locale;
        var result = { locale: '', dataLocale: foundLocale };
        var supportedExtension = '-u';
        for (var _i = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _i < relevantExtensionKeys_1.length; _i++) {
            var key = relevantExtensionKeys_1[_i];
            var foundLocaleData = localeData[foundLocale];
            invariant_1.invariant(typeof foundLocaleData === 'object' && foundLocaleData !== null, "locale data " + key + " must be an object");
            var keyLocaleData = foundLocaleData[key];
            invariant_1.invariant(Array.isArray(keyLocaleData), "keyLocaleData for " + key + " must be an array");
            var value = keyLocaleData[0];
            invariant_1.invariant(typeof value === 'string' || value === null, 'value must be string or null');
            var supportedExtensionAddition = '';
            if (r.extension) {
                var requestedValue = unicodeExtensionValue(r.extension, key);
                if (requestedValue !== undefined) {
                    if (requestedValue !== '') {
                        if (~keyLocaleData.indexOf(requestedValue)) {
                            value = requestedValue;
                            supportedExtensionAddition = "-" + key + "-" + value;
                        }
                    }
                    else if (~requestedValue.indexOf('true')) {
                        value = 'true';
                        supportedExtensionAddition = "-" + key;
                    }
                }
            }
            if (key in options) {
                var optionsValue = options[key];
                invariant_1.invariant(typeof optionsValue === 'string' ||
                    typeof optionsValue === 'undefined' ||
                    optionsValue === null, 'optionsValue must be String, Undefined or Null');
                if (~keyLocaleData.indexOf(optionsValue)) {
                    if (optionsValue !== value) {
                        value = optionsValue;
                        supportedExtensionAddition = '';
                    }
                }
            }
            result[key] = value;
            supportedExtension += supportedExtensionAddition;
        }
        if (supportedExtension.length > 2) {
            var privateIndex = foundLocale.indexOf('-x-');
            if (privateIndex === -1) {
                foundLocale = foundLocale + supportedExtension;
            }
            else {
                var preExtension = foundLocale.slice(0, privateIndex);
                var postExtension = foundLocale.slice(privateIndex, foundLocale.length);
                foundLocale = preExtension + supportedExtension + postExtension;
            }
            foundLocale = Intl.getCanonicalLocales(foundLocale)[0];
        }
        result.locale = foundLocale;
        return result;
    };
}
exports.createResolveLocale = createResolveLocale;
/**
 * https://tc39.es/ecma402/#sec-unicodeextensionvalue
 * @param extension
 * @param key
 */
function unicodeExtensionValue(extension, key) {
    invariant_1.invariant(key.length === 2, 'key must have 2 elements');
    var size = extension.length;
    var searchValue = "-" + key + "-";
    var pos = extension.indexOf(searchValue);
    if (pos !== -1) {
        var start = pos + 4;
        var end = start;
        var k = start;
        var done = false;
        while (!done) {
            var e = extension.indexOf('-', k);
            var len = void 0;
            if (e === -1) {
                len = size - k;
            }
            else {
                len = e - k;
            }
            if (len === 2) {
                done = true;
            }
            else if (e === -1) {
                end = size;
                done = true;
            }
            else {
                end = e;
                k = e + 1;
            }
        }
        return extension.slice(start, end);
    }
    searchValue = "-" + key;
    pos = extension.indexOf(searchValue);
    if (pos !== -1 && pos + 3 === size) {
        return '';
    }
    return undefined;
}
var UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;
/**
 * https://tc39.es/ecma402/#sec-bestavailablelocale
 * @param availableLocales
 * @param locale
 */
function bestAvailableLocale(availableLocales, locale) {
    var candidate = locale;
    while (true) {
        if (~availableLocales.indexOf(candidate)) {
            return candidate;
        }
        var pos = candidate.lastIndexOf('-');
        if (!~pos) {
            return undefined;
        }
        if (pos >= 2 && candidate[pos - 2] === '-') {
            pos -= 2;
        }
        candidate = candidate.slice(0, pos);
    }
}
function createLookupMatcher(getDefaultLocale) {
    /**
     * https://tc39.es/ecma402/#sec-lookupmatcher
     */
    return function lookupMatcher(availableLocales, requestedLocales) {
        var result = { locale: '' };
        for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = bestAvailableLocale(availableLocales, noExtensionLocale);
            if (availableLocale) {
                result.locale = availableLocale;
                if (locale !== noExtensionLocale) {
                    result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);
                }
                return result;
            }
        }
        result.locale = getDefaultLocale();
        return result;
    };
}
function createBestFitMatcher(getDefaultLocale) {
    return function bestFitMatcher(availableLocales, requestedLocales) {
        var result = { locale: '' };
        for (var _i = 0, requestedLocales_2 = requestedLocales; _i < requestedLocales_2.length; _i++) {
            var locale = requestedLocales_2[_i];
            var noExtensionLocale = locale.replace(UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = bestAvailableLocale(availableLocales, noExtensionLocale);
            if (availableLocale) {
                result.locale = availableLocale;
                if (locale !== noExtensionLocale) {
                    result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);
                }
                return result;
            }
        }
        result.locale = getDefaultLocale();
        return result;
    };
}
function getLocaleHierarchy(locale) {
    var results = [locale];
    var localeParts = locale.split('-');
    for (var i = localeParts.length; i > 1; i--) {
        results.push(localeParts.slice(0, i - 1).join('-'));
    }
    return results;
}
exports.getLocaleHierarchy = getLocaleHierarchy;
function lookupSupportedLocales(availableLocales, requestedLocales) {
    var subset = [];
    for (var _i = 0, requestedLocales_3 = requestedLocales; _i < requestedLocales_3.length; _i++) {
        var locale = requestedLocales_3[_i];
        var noExtensionLocale = locale.replace(UNICODE_EXTENSION_SEQUENCE_REGEX, '');
        var availableLocale = bestAvailableLocale(availableLocales, noExtensionLocale);
        if (availableLocale) {
            subset.push(availableLocale);
        }
    }
    return subset;
}
function supportedLocales(availableLocales, requestedLocales, options) {
    var matcher = 'best fit';
    if (options !== undefined) {
        options = polyfill_utils_1.toObject(options);
        matcher = polyfill_utils_1.getOption(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
    }
    if (matcher === 'best fit') {
        return lookupSupportedLocales(availableLocales, requestedLocales);
    }
    return lookupSupportedLocales(availableLocales, requestedLocales);
}
exports.supportedLocales = supportedLocales;
var MissingLocaleDataError = /** @class */ (function (_super) {
    __extends(MissingLocaleDataError, _super);
    function MissingLocaleDataError() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'MISSING_LOCALE_DATA';
        return _this;
    }
    return MissingLocaleDataError;
}(Error));
function isMissingLocaleDataError(e) {
    return e.type === 'MISSING_LOCALE_DATA';
}
exports.isMissingLocaleDataError = isMissingLocaleDataError;
function unpackData(locale, localeData, 
/** By default shallow merge the dictionaries. */
reducer) {
    if (reducer === void 0) { reducer = function (all, d) { return (__assign(__assign({}, all), d)); }; }
    var localeHierarchy = getLocaleHierarchy(locale);
    var dataToMerge = localeHierarchy
        .map(function (l) { return localeData.data[l]; })
        .filter(Boolean);
    if (!dataToMerge.length) {
        throw new MissingLocaleDataError("Missing locale data for \"" + locale + "\", lookup hierarchy: " + localeHierarchy.join(', '));
    }
    dataToMerge.reverse();
    return dataToMerge.reduce(reducer, {});
}
exports.unpackData = unpackData;
//# sourceMappingURL=resolve-locale.js.map
      };
    };
  }
}, {package:"@formatjs\\intl-utils",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@formatjs\\intl-utils\\dist\\resolve-locale.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\scheduler\\cjs\\scheduler.production.min.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\scheduler\cjs\scheduler.production.min.js
      return function (require, module, exports) {
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';Object.defineProperty(exports,"__esModule",{value:!0});var f,g,h,k,l;
if("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,
y=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===
typeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=
function(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=Math.floor((c-1)/2),e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}
function M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;
function V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}
function X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}
function Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_ImmediatePriority=1;exports.unstable_UserBlockingPriority=2;exports.unstable_NormalPriority=3;exports.unstable_IdlePriority=5;exports.unstable_LowPriority=4;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};
exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};
exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};exports.unstable_cancelCallback=function(a){a.callback=null};
exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};exports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_requestPaint=Z;exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};
exports.unstable_pauseExecution=function(){};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_Profiling=null;

      };
    };
  }
}, {package:"scheduler",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\scheduler\\cjs\\scheduler.production.min.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\scheduler\\cjs\\scheduler.development.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\scheduler\cjs\scheduler.development.js
      return function (require, module, exports) {
/** @license React v0.18.0
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if ("development" !== "production") {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var enableSchedulerDebugging = false;
var enableIsInputPending = false;
var enableProfiling = true;

var requestHostCallback;

var requestHostTimeout;
var cancelHostTimeout;
var shouldYieldToHost;
var requestPaint;



if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  var initialTime = Date.now();

  exports.unstable_now = function () {
    return Date.now() - initialTime;
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  shouldYieldToHost = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var performance = window.performance;
  var _Date = window.Date;
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;

  if (typeof console !== 'undefined') {
    // TODO: Scheduler no longer requires these methods to be polyfilled. But
    // maybe we want to continue warning if they don't exist, to preserve the
    // option to rely on it in the future?
    var requestAnimationFrame = window.requestAnimationFrame;
    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

    if (typeof requestAnimationFrame !== 'function') {
      console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  if (typeof performance === 'object' && typeof performance.now === 'function') {
    exports.unstable_now = function () {
      return performance.now();
    };
  } else {
    var _initialTime = _Date.now();

    exports.unstable_now = function () {
      return _Date.now() - _initialTime;
    };
  }

  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
  // thread, like user events. By default, it yields multiple times per frame.
  // It does not attempt to align with frame boundaries, since most tasks don't
  // need to be frame aligned; for those that do, use requestAnimationFrame.

  var yieldInterval = 5;
  var deadline = 0; // TODO: Make this configurable
  // TODO: Adjust this based on priority?

  var maxYieldInterval = 300;
  var needsPaint = false;

  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {
    var scheduling = navigator.scheduling;

    shouldYieldToHost = function () {
      var currentTime = exports.unstable_now();

      if (currentTime >= deadline) {
        // There's no time left. We may want to yield control of the main
        // thread, so the browser can perform high priority tasks. The main ones
        // are painting and user input. If there's a pending paint or a pending
        // input, then we should yield. But if there's neither, then we can
        // yield less often while remaining responsive. We'll eventually yield
        // regardless, since there could be a pending paint that wasn't
        // accompanied by a call to `requestPaint`, or other main thread tasks
        // like network events.
        if (needsPaint || scheduling.isInputPending()) {
          // There is either a pending paint or a pending input.
          return true;
        } // There's no pending input. Only yield if we've reached the max
        // yield interval.


        return currentTime >= maxYieldInterval;
      } else {
        // There's still time left in the frame.
        return false;
      }
    };

    requestPaint = function () {
      needsPaint = true;
    };
  } else {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    shouldYieldToHost = function () {
      return exports.unstable_now() >= deadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
      return;
    }

    if (fps > 0) {
      yieldInterval = Math.floor(1000 / fps);
    } else {
      // reset the framerate
      yieldInterval = 5;
    }
  };

  var performWorkUntilDeadline = function () {
    if (scheduledHostCallback !== null) {
      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
      // cycle. This means there's always time remaining at the beginning of
      // the message event.

      deadline = currentTime + yieldInterval;
      var hasTimeRemaining = true;

      try {
        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

        if (!hasMoreWork) {
          isMessageLoopRunning = false;
          scheduledHostCallback = null;
        } else {
          // If there's more work, schedule the next message event at the end
          // of the preceding one.
          port.postMessage(null);
        }
      } catch (error) {
        // If a scheduler task throws, exit the current browser task so the
        // error can be observed.
        port.postMessage(null);
        throw error;
      }
    } else {
      isMessageLoopRunning = false;
    } // Yielding to the browser will give it a chance to paint, so we can
    // reset this.


    needsPaint = false;
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (!isMessageLoopRunning) {
      isMessageLoopRunning = true;
      port.postMessage(null);
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = Math.floor((index - 1) / 2);
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var NoPriority = 0;
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

var runIdCounter = 0;
var mainThreadIdCounter = 0;
var profilingStateSize = 4;
var sharedProfilingBuffer = enableProfiling ? // $FlowFixMe Flow doesn't know about SharedArrayBuffer
typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
: null;
var profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

var PRIORITY = 0;
var CURRENT_TASK_ID = 1;
var CURRENT_RUN_ID = 2;
var QUEUE_SIZE = 3;

if (enableProfiling) {
  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
  // array might include canceled tasks.

  profilingState[QUEUE_SIZE] = 0;
  profilingState[CURRENT_TASK_ID] = 0;
} // Bytes per element is 4


var INITIAL_EVENT_LOG_SIZE = 131072;
var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

var eventLogSize = 0;
var eventLogBuffer = null;
var eventLog = null;
var eventLogIndex = 0;
var TaskStartEvent = 1;
var TaskCompleteEvent = 2;
var TaskErrorEvent = 3;
var TaskCancelEvent = 4;
var TaskRunEvent = 5;
var TaskYieldEvent = 6;
var SchedulerSuspendEvent = 7;
var SchedulerResumeEvent = 8;

function logEvent(entries) {
  if (eventLog !== null) {
    var offset = eventLogIndex;
    eventLogIndex += entries.length;

    if (eventLogIndex + 1 > eventLogSize) {
      eventLogSize *= 2;

      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
        console.error("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
        stopLoggingProfilingEvents();
        return;
      }

      var newEventLog = new Int32Array(eventLogSize * 4);
      newEventLog.set(eventLog);
      eventLogBuffer = newEventLog.buffer;
      eventLog = newEventLog;
    }

    eventLog.set(entries, offset);
  }
}

function startLoggingProfilingEvents() {
  eventLogSize = INITIAL_EVENT_LOG_SIZE;
  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
  eventLog = new Int32Array(eventLogBuffer);
  eventLogIndex = 0;
}
function stopLoggingProfilingEvents() {
  var buffer = eventLogBuffer;
  eventLogSize = 0;
  eventLogBuffer = null;
  eventLog = null;
  eventLogIndex = 0;
  return buffer;
}
function markTaskStart(task, ms) {
  if (enableProfiling) {
    profilingState[QUEUE_SIZE]++;

    if (eventLog !== null) {
      // performance.now returns a float, representing milliseconds. When the
      // event is logged, it's coerced to an int. Convert to microseconds to
      // maintain extra degrees of precision.
      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
    }
  }
}
function markTaskCompleted(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskCanceled(task, ms) {
  if (enableProfiling) {
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCancelEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskErrored(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskErrorEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskRun(task, ms) {
  if (enableProfiling) {
    runIdCounter++;
    profilingState[PRIORITY] = task.priorityLevel;
    profilingState[CURRENT_TASK_ID] = task.id;
    profilingState[CURRENT_RUN_ID] = runIdCounter;

    if (eventLog !== null) {
      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markTaskYield(task, ms) {
  if (enableProfiling) {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[CURRENT_RUN_ID] = 0;

    if (eventLog !== null) {
      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markSchedulerSuspended(ms) {
  if (enableProfiling) {
    mainThreadIdCounter++;

    if (eventLog !== null) {
      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}
function markSchedulerUnsuspended(ms) {
  if (enableProfiling) {
    if (eventLog !== null) {
      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.

var isSchedulerPaused = false;
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);

      if (enableProfiling) {
        markTaskStart(timer, currentTime);
        timer.isQueued = true;
      }
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  if (enableProfiling) {
    markSchedulerUnsuspended(initialTime);
  } // We'll need a host callback the next time work is scheduled.


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod codepath.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;

    if (enableProfiling) {
      var _currentTime = exports.unstable_now();

      markSchedulerSuspended(_currentTime);
    }
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (callback !== null) {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
      markTaskRun(currentTask, currentTime);
      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
        markTaskYield(currentTask, currentTime);
      } else {
        if (enableProfiling) {
          markTaskCompleted(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function timeoutForPriorityLevel(priorityLevel) {
  switch (priorityLevel) {
    case ImmediatePriority:
      return IMMEDIATE_PRIORITY_TIMEOUT;

    case UserBlockingPriority:
      return USER_BLOCKING_PRIORITY;

    case IdlePriority:
      return IDLE_PRIORITY;

    case LowPriority:
      return LOW_PRIORITY_TIMEOUT;

    case NormalPriority:
    default:
      return NORMAL_PRIORITY_TIMEOUT;
  }
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;
  var timeout;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }

    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
  } else {
    timeout = timeoutForPriorityLevel(priorityLevel);
    startTime = currentTime;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  if (enableProfiling) {
    newTask.isQueued = false;
  }

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);

    if (enableProfiling) {
      markTaskStart(newTask, currentTime);
      newTask.isQueued = true;
    } // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
  isSchedulerPaused = true;
}

function unstable_continueExecution() {
  isSchedulerPaused = false;

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  if (enableProfiling) {
    if (task.isQueued) {
      var currentTime = exports.unstable_now();
      markTaskCanceled(task, currentTime);
      task.isQueued = false;
    }
  } // Null out the callback to indicate the task has been canceled. (Can't
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

function unstable_shouldYield() {
  var currentTime = exports.unstable_now();
  advanceTimers(currentTime);
  var firstTask = peek(taskQueue);
  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling = enableProfiling ? {
  startLoggingProfilingEvents: startLoggingProfilingEvents,
  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
  sharedProfilingBuffer: sharedProfilingBuffer
} : null;

exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_IdlePriority = IdlePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_next = unstable_next;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_wrapCallback = unstable_wrapCallback;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_Profiling = unstable_Profiling;
  })();
}

      };
    };
  }
}, {package:"scheduler",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\scheduler\\cjs\\scheduler.development.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\scheduler\\cjs\\scheduler-tracing.development.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\scheduler\cjs\scheduler-tracing.development.js
      return function (require, module, exports) {
/** @license React v0.18.0
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if ("development" !== "production") {
  (function() {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// Helps identify side effects in render-phase lifecycle hooks and setState
// reducers by double invoking them in Strict Mode.

 // To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.

 // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

 // Gather advanced timing metrics for Profiler subtrees.

 // Trace which interactions trigger each commit.

var enableSchedulerTracing = true; // SSR experiments


 // Only used in www builds.

 // Only used in www builds.

 // Disable javascript: URL strings in href for XSS protection.

 // React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties

 // These APIs will no longer be "unstable" in the upcoming 16.7 release,
// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.


 // Experimental React Flare event system and event components support.

 // Experimental Host Component support.

 // Experimental Scope support.

 // New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107

 // We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v17?)
// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version

 // For tests, we flush suspense fallbacks in an act scope;
// *except* in some of our own tests, where we test incremental loading states.

 // Add a callback property to suspense to notify which promises are currently
// in the update queue. This allows reporting and tracing of what is causing
// the user to see a loading state.
// Also allows hydration callbacks to fire when a dehydrated boundary gets
// hydrated or deleted.

 // Part of the simplification of React.createElement so we can eventually move
// from React.createElement to React.jsx
// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md





 // Flag to turn event.target and event.currentTarget in ReactNative from a reactTag to a component instance

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

if (enableSchedulerTracing) {
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}

function unstable_clear(callback) {
  if (!enableSchedulerTracing) {
    return callback();
  }

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  if (!enableSchedulerTracing) {
    return null;
  } else {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback();
  }

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  if (!enableSchedulerTracing) {
    return callback;
  }

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

if (enableSchedulerTracing) {
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  if (enableSchedulerTracing) {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_trace = unstable_trace;
exports.unstable_wrap = unstable_wrap;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}

      };
    };
  }
}, {package:"scheduler",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\scheduler\\cjs\\scheduler-tracing.development.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\scheduler\\cjs\\scheduler-tracing.production.min.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\scheduler\cjs\scheduler-tracing.production.min.js
      return function (require, module, exports) {
/** @license React v0.18.0
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';Object.defineProperty(exports,"__esModule",{value:!0});var b=0;exports.__interactionsRef=null;exports.__subscriberRef=null;exports.unstable_clear=function(a){return a()};exports.unstable_getCurrent=function(){return null};exports.unstable_getThreadID=function(){return++b};exports.unstable_trace=function(a,d,c){return c()};exports.unstable_wrap=function(a){return a};exports.unstable_subscribe=function(){};exports.unstable_unsubscribe=function(){};

      };
    };
  }
}, {package:"scheduler",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\scheduler\\cjs\\scheduler-tracing.production.min.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remote-redux-devtools\\lib\\constants.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\remote-redux-devtools\lib\constants.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;
var defaultSocketOptions = exports.defaultSocketOptions = {
  secure: true,
  hostname: 'remotedev.io',
  port: 443,
  autoReconnect: true,
  autoReconnectOptions: {
    randomness: 30000
  }
};
      };
    };
  }
}, {package:"remote-redux-devtools",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remote-redux-devtools\\lib\\constants.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\rn-host-detect\\index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\rn-host-detect\index.js
      return function (require, module, exports) {
'use strict'

/*
 * It only for Debug Remotely mode for Android
 * When __DEV__ === false, we can't use window.require('NativeModules')
 */
function getByRemoteConfig(hostname) {
  var remoteModuleConfig = typeof window !== 'undefined' &&
    window.__fbBatchedBridgeConfig &&
    window.__fbBatchedBridgeConfig.remoteModuleConfig

  if (
    !Array.isArray(remoteModuleConfig) ||
    hostname !== 'localhost' && hostname !== '127.0.0.1'
  ) return { hostname: hostname, passed: false }

  var result = hostname
  var passed = false
  remoteModuleConfig.some(function (config) {
    if (!config) return false
    
    var name = config[0]
    var content = config[1]
    if (
      (name === 'AndroidConstants' || name === 'PlatformConstants') &&
      content &&
      content.ServerHost
    ) {
      result = content.ServerHost.split(':')[0]
      passed = true
      return true
    }

    if (
      name === 'SourceCode' &&
      content &&
      content.scriptURL
    ) {
      result = content.scriptURL.replace(/https?:\/\//, '').split(':')[0]
      passed = true
      return true
    }
    return false
  })

  return { hostname: result, passed: passed }
}

function getByRNRequirePolyfill(hostname) {
  var originalWarn = console.warn
  var NativeModules
  var Constants
  var SourceCode
  if (
    typeof window === 'undefined' ||
    !window.__DEV__ ||
    typeof window.require !== 'function' ||
    // RN >= 0.56
    // TODO: Get NativeModules for RN >= 0.56
    window.require.name === 'metroRequire'
  ) {
    return hostname
  }
  console.warn = function() {
    if (
      arguments[0] &&
      typeof arguments[0].indexOf == 'function' &&
      arguments[0].indexOf("Requiring module 'NativeModules' by name") > -1
    )
      return
    return originalWarn.apply(console, arguments)
  }
  try {
    NativeModules = window.require('NativeModules')
  } catch (e) {}
  console.warn = originalWarn
  if (!NativeModules) return hostname

  Constants = NativeModules.PlatformConstants || NativeModules.AndroidConstants
  SourceCode = NativeModules.SourceCode

  if (Constants && Constants.ServerHost) {
    return Constants.ServerHost.split(':')[0]
  } else if (SourceCode && SourceCode.scriptURL) {
    return SourceCode.scriptURL.replace(/https?:\/\//, '').split(':')[0]
  }
  return hostname
}

/*
 * Get React Native server IP if hostname is `localhost`
 * On Android emulator, the IP of host is `10.0.2.2` (Genymotion: 10.0.3.2)
 */
module.exports = function (hostname) {
  // Check if it in React Native environment
  if (
    typeof __fbBatchedBridgeConfig !== 'object' ||
    hostname !== 'localhost' && hostname !== '127.0.0.1'
  ) {
    return hostname
  }
  var result = getByRemoteConfig(hostname)

  // Leave if get hostname by remote config successful
  if (result.passed) {
    return result.hostname
  }

  // Otherwise, use RN's require polyfill
  return getByRNRequirePolyfill(hostname)
}

      };
    };
  }
}, {package:"rn-host-detect",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\rn-host-detect\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-core\\lib\\utils\\catchErrors.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\redux-devtools-core\lib\utils\catchErrors.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = catchErrors;
var ERROR = '@@remotedev/ERROR';

function catchErrors(sendError) {
  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && _typeof(window.onerror) === 'object') {
    window.onerror = function (message, url, lineNo, columnNo, error) {
      var errorAction = { type: ERROR, message: message, url: url, lineNo: lineNo, columnNo: columnNo };
      if (error && error.stack) errorAction.stack = error.stack;
      sendError(errorAction);
      return false;
    };
  } else if (typeof global !== 'undefined' && global.ErrorUtils) {
    global.ErrorUtils.setGlobalHandler(function (error, isFatal) {
      sendError({ type: ERROR, error: error, isFatal: isFatal });
    });
  }

  if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) === 'object' && typeof console.error === 'function' && !console.beforeRemotedev) {
    console.beforeRemotedev = console.error.bind(console);
    console.error = function () {
      var errorAction = { type: ERROR };
      var error = arguments[0];
      errorAction.message = error.message ? error.message : error;
      if (error.sourceURL) {
        errorAction = _extends({}, errorAction, { sourceURL: error.sourceURL, line: error.line, column: error.column
        });
      }
      if (error.stack) errorAction.stack = error.stack;
      sendError(errorAction);
      console.beforeRemotedev.apply(null, arguments);
    };
  }
}
      };
    };
  }
}, {package:"redux-devtools-core",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-core\\lib\\utils\\catchErrors.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\index.js", {"./lib":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\jsan\index.js
      return function (require, module, exports) {
module.exports = require('./lib');

      };
    };
  }
}, {package:"jsan",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-core\\lib\\utils\\filters.js", {"lodash/mapValues":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\mapValues.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\redux-devtools-core\lib\utils\filters.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;
exports.FilterState = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.arrToRegex = arrToRegex;
exports.getLocalFilter = getLocalFilter;
exports.isFiltered = isFiltered;
exports.filterStagedActions = filterStagedActions;
exports.filterState = filterState;

var _mapValues = require('lodash/mapValues');

var _mapValues2 = _interopRequireDefault(_mapValues);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FilterState = exports.FilterState = {
  DO_NOT_FILTER: 'DO_NOT_FILTER',
  BLACKLIST_SPECIFIC: 'BLACKLIST_SPECIFIC',
  WHITELIST_SPECIFIC: 'WHITELIST_SPECIFIC'
};

function arrToRegex(v) {
  return typeof v === 'string' ? v : v.join('|');
}

function filterActions(actionsById, actionsFilter) {
  if (!actionsFilter) return actionsById;
  return (0, _mapValues2.default)(actionsById, function (action, id) {
    return _extends({}, action, { action: actionsFilter(action.action, id) });
  });
}

function filterStates(computedStates, statesFilter) {
  if (!statesFilter) return computedStates;
  return computedStates.map(function (state, idx) {
    return _extends({}, state, { state: statesFilter(state.state, idx) });
  });
}

function getLocalFilter(config) {
  if (config.actionsBlacklist || config.actionsWhitelist) {
    return {
      whitelist: config.actionsWhitelist && config.actionsWhitelist.join('|'),
      blacklist: config.actionsBlacklist && config.actionsBlacklist.join('|')
    };
  }
  return undefined;
}

function getDevToolsOptions() {
  return typeof window !== 'undefined' && window.devToolsOptions || {};
}

function isFiltered(action, localFilter) {
  var _ref = action.action || action,
      type = _ref.type;

  var opts = getDevToolsOptions();
  if (!localFilter && opts.filter && opts.filter === FilterState.DO_NOT_FILTER || type && typeof type.match !== 'function') return false;

  var _ref2 = localFilter || opts,
      whitelist = _ref2.whitelist,
      blacklist = _ref2.blacklist;

  return whitelist && !type.match(whitelist) || blacklist && type.match(blacklist);
}

function filterStagedActions(state, filters) {
  if (!filters) return state;

  var filteredStagedActionIds = [];
  var filteredComputedStates = [];

  state.stagedActionIds.forEach(function (id, idx) {
    if (!isFiltered(state.actionsById[id], filters)) {
      filteredStagedActionIds.push(id);
      filteredComputedStates.push(state.computedStates[idx]);
    }
  });

  return _extends({}, state, {
    stagedActionIds: filteredStagedActionIds,
    computedStates: filteredComputedStates
  });
}

function filterState(state, type, localFilter, stateSanitizer, actionSanitizer, nextActionId, predicate) {
  if (type === 'ACTION') return !stateSanitizer ? state : stateSanitizer(state, nextActionId - 1);else if (type !== 'STATE') return state;

  var _getDevToolsOptions = getDevToolsOptions(),
      filter = _getDevToolsOptions.filter;

  if (predicate || localFilter || filter && filter !== FilterState.DO_NOT_FILTER) {
    var filteredStagedActionIds = [];
    var filteredComputedStates = [];
    var sanitizedActionsById = actionSanitizer && {};
    var actionsById = state.actionsById;
    var computedStates = state.computedStates;


    state.stagedActionIds.forEach(function (id, idx) {
      var liftedAction = actionsById[id];
      var currAction = liftedAction.action;
      var liftedState = computedStates[idx];
      var currState = liftedState.state;
      if (idx) {
        if (predicate && !predicate(currState, currAction)) return;
        if (isFiltered(currAction, localFilter)) return;
      }

      filteredStagedActionIds.push(id);
      filteredComputedStates.push(stateSanitizer ? _extends({}, liftedState, { state: stateSanitizer(currState, idx) }) : liftedState);
      if (actionSanitizer) {
        sanitizedActionsById[id] = _extends({}, liftedAction, { action: actionSanitizer(currAction, id)
        });
      }
    });

    return _extends({}, state, {
      actionsById: sanitizedActionsById || actionsById,
      stagedActionIds: filteredStagedActionIds,
      computedStates: filteredComputedStates
    });
  }

  if (!stateSanitizer && !actionSanitizer) return state;
  return _extends({}, state, {
    actionsById: filterActions(state.actionsById, actionSanitizer),
    computedStates: filterStates(state.computedStates, stateSanitizer)
  });
}
      };
    };
  }
}, {package:"redux-devtools-core",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-core\\lib\\utils\\filters.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\index.js", {"./lib/factory":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\factory.js","./lib/scclientsocket":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\scclientsocket.js","component-emitter":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\component-emitter\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\index.js
      return function (require, module, exports) {
var SCClientSocket = require('./lib/scclientsocket');
var factory = require('./lib/factory');

module.exports.factory = factory;
module.exports.SCClientSocket = SCClientSocket;

module.exports.Emitter = require('component-emitter');

module.exports.create = function (options) {
  return factory.create(options);
};

module.exports.connect = module.exports.create;

module.exports.destroy = function (socket) {
  return factory.destroy(socket);
};

module.exports.clients = factory.clients;

module.exports.version = '14.3.1';

      };
    };
  }
}, {package:"socketcluster-client",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-core\\lib\\utils\\index.js", {"get-params":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\get-params\\index.js","jsan":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\index.js","nanoid/non-secure":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\nanoid\\non-secure\\index.js","remotedev-serialize/immutable/serialize":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remotedev-serialize\\immutable\\serialize.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\redux-devtools-core\lib\utils\index.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.generateId = generateId;
exports.getMethods = getMethods;
exports.getActionsArray = getActionsArray;
exports.evalAction = evalAction;
exports.evalMethod = evalMethod;
exports.stringify = stringify;
exports.getSeralizeParameter = getSeralizeParameter;
exports.getStackTrace = getStackTrace;

var _getParams = require('get-params');

var _getParams2 = _interopRequireDefault(_getParams);

var _jsan = require('jsan');

var _jsan2 = _interopRequireDefault(_jsan);

var _nonSecure = require('nanoid/non-secure');

var _nonSecure2 = _interopRequireDefault(_nonSecure);

var _serialize = require('remotedev-serialize/immutable/serialize');

var _serialize2 = _interopRequireDefault(_serialize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function generateId(id) {
  return id || (0, _nonSecure2.default)(7);
}

function flatTree(obj) {
  var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var functions = [];
  Object.keys(obj).forEach(function (key) {
    var prop = obj[key];
    if (typeof prop === 'function') {
      functions.push({
        name: namespace + (key || prop.name || 'anonymous'),
        func: prop,
        args: (0, _getParams2.default)(prop)
      });
    } else if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object') {
      functions = functions.concat(flatTree(prop, namespace + key + '.'));
    }
  });
  return functions;
}

function getMethods(obj) {
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return undefined;
  var functions = void 0;
  var m = void 0;
  if (obj.__proto__) m = obj.__proto__.__proto__;
  if (!m) m = obj;

  Object.getOwnPropertyNames(m).forEach(function (key) {
    var propDescriptor = Object.getOwnPropertyDescriptor(m, key);
    if (!propDescriptor || 'get' in propDescriptor || 'set' in propDescriptor) return;
    var prop = m[key];
    if (typeof prop === 'function' && key !== 'constructor') {
      if (!functions) functions = [];
      functions.push({
        name: key || prop.name || 'anonymous',
        args: (0, _getParams2.default)(prop)
      });
    }
  });
  return functions;
}

function getActionsArray(actionCreators) {
  if (Array.isArray(actionCreators)) return actionCreators;
  return flatTree(actionCreators);
}

/* eslint-disable no-new-func */
var interpretArg = function interpretArg(arg) {
  return new Function('return ' + arg)();
};

function evalArgs(inArgs, restArgs) {
  var args = inArgs.map(interpretArg);
  if (!restArgs) return args;
  var rest = interpretArg(restArgs);
  if (Array.isArray(rest)) return args.concat.apply(args, rest);
  throw new Error('rest must be an array');
}

function evalAction(action, actionCreators) {
  if (typeof action === 'string') {
    return new Function('return ' + action)();
  }

  var actionCreator = actionCreators[action.selected].func;
  var args = evalArgs(action.args, action.rest);
  return actionCreator.apply(undefined, args);
}

function evalMethod(action, obj) {
  if (typeof action === 'string') {
    return new Function('return ' + action).call(obj);
  }

  var args = evalArgs(action.args, action.rest);
  return new Function('args', 'return this.' + action.name + '(args)').apply(obj, args);
}
/* eslint-enable */

function tryCatchStringify(obj) {
  try {
    return JSON.stringify(obj);
  } catch (err) {
    /* eslint-disable no-console */
    if ("development" !== 'production') console.log('Failed to stringify', err);
    /* eslint-enable no-console */
    return _jsan2.default.stringify(obj, null, null, { circular: '[CIRCULAR]' });
  }
}

function stringify(obj, serialize) {
  if (typeof serialize === 'undefined') {
    return tryCatchStringify(obj);
  }
  if (serialize === true) {
    return _jsan2.default.stringify(obj, function (key, value) {
      if (value && typeof value.toJS === 'function') return value.toJS();
      return value;
    }, null, true);
  }
  return _jsan2.default.stringify(obj, serialize.replacer, null, serialize.options);
}

function getSeralizeParameter(config, param) {
  var serialize = config.serialize;
  if (serialize) {
    if (serialize === true) return { options: true };
    if (serialize.immutable) {
      return {
        replacer: (0, _serialize2.default)(serialize.immutable, serialize.refs).replacer,
        options: serialize.options || true
      };
    }
    if (!serialize.replacer) return { options: serialize.options };
    return { replacer: serialize.replacer, options: serialize.options || true };
  }

  var value = config[param];
  if (typeof value === 'undefined') return undefined;
  console.warn('`' + param + '` parameter for Redux DevTools Extension is deprecated. Use `serialize` parameter instead: https://github.com/zalmoxisus/redux-devtools-extension/releases/tag/v2.12.1'); // eslint-disable-line

  if (typeof serializeState === 'boolean') return { options: value };
  if (typeof serializeState === 'function') return { replacer: value };
  return value;
}

function getStackTrace(config, toExcludeFromTrace) {
  if (!config.trace) return undefined;
  if (typeof config.trace === 'function') return config.trace();

  var stack = void 0;
  var extraFrames = 0;
  var prevStackTraceLimit = void 0;
  var traceLimit = config.traceLimit;
  var error = Error();
  if (Error.captureStackTrace) {
    if (Error.stackTraceLimit < traceLimit) {
      prevStackTraceLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = traceLimit;
    }
    Error.captureStackTrace(error, toExcludeFromTrace);
  } else {
    extraFrames = 3;
  }
  stack = error.stack;
  if (prevStackTraceLimit) Error.stackTraceLimit = prevStackTraceLimit;
  if (extraFrames || typeof Error.stackTraceLimit !== 'number' || Error.stackTraceLimit > traceLimit) {
    var frames = stack.split('\n');
    if (frames.length > traceLimit) {
      stack = frames.slice(0, traceLimit + extraFrames + (frames[0] === 'Error' ? 1 : 0)).join('\n');
    }
  }
  return stack;
}
      };
    };
  }
}, {package:"redux-devtools-core",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-core\\lib\\utils\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remote-redux-devtools\\lib\\configureStore.js", {"redux-devtools-instrument":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-instrument\\lib\\instrument.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\remote-redux-devtools\lib\configureStore.js
      return function (require, module, exports) {
'use strict';

exports.__esModule = true;
exports.default = configureStore;

var _reduxDevtoolsInstrument = require('redux-devtools-instrument');

var _reduxDevtoolsInstrument2 = _interopRequireDefault(_reduxDevtoolsInstrument);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function configureStore(next, subscriber, options) {
  return (0, _reduxDevtoolsInstrument2.default)(subscriber, options)(next);
}
      };
    };
  }
}, {package:"remote-redux-devtools",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remote-redux-devtools\\lib\\configureStore.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\cjs\\react-is.development.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-is\cjs\react-is.development.js
      return function (require, module, exports) {
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if ("development" !== "production") {
  (function() {
'use strict';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}

      };
    };
  }
}, {package:"react-is",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\cjs\\react-is.development.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\cjs\\react-is.production.min.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-is\cjs\react-is.production.min.js
      return function (require, module, exports) {
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;
exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};
exports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};
exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;

      };
    };
  }
}, {package:"react-is",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\cjs\\react-is.production.min.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useReduxContext.js", {"../components/Context":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\components\\Context.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\hooks\useReduxContext.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports.useReduxContext = useReduxContext;

var _react = require("react");

var _Context = require("../components/Context");

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */
function useReduxContext() {
  var contextValue = (0, _react.useContext)(_Context.ReactReduxContext);

  if ("development" !== 'production' && !contextValue) {
    throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');
  }

  return contextValue;
}
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\hooks\\useReduxContext.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\Subscription.js", {"./batch":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\batch.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\utils\Subscription.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _batch = require("./batch");

// encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants
var nullListeners = {
  notify: function notify() {}
};

function createListenerCollection() {
  var batch = (0, _batch.getBatch)();
  var first = null;
  var last = null;
  return {
    clear: function clear() {
      first = null;
      last = null;
    },
    notify: function notify() {
      batch(function () {
        var listener = first;

        while (listener) {
          listener.callback();
          listener = listener.next;
        }
      });
    },
    get: function get() {
      var listeners = [];
      var listener = first;

      while (listener) {
        listeners.push(listener);
        listener = listener.next;
      }

      return listeners;
    },
    subscribe: function subscribe(callback) {
      var isSubscribed = true;
      var listener = last = {
        callback: callback,
        next: null,
        prev: last
      };

      if (listener.prev) {
        listener.prev.next = listener;
      } else {
        first = listener;
      }

      return function unsubscribe() {
        if (!isSubscribed || first === null) return;
        isSubscribed = false;

        if (listener.next) {
          listener.next.prev = listener.prev;
        } else {
          last = listener.prev;
        }

        if (listener.prev) {
          listener.prev.next = listener.next;
        } else {
          first = listener.next;
        }
      };
    }
  };
}

var Subscription =
/*#__PURE__*/
function () {
  function Subscription(store, parentSub) {
    this.store = store;
    this.parentSub = parentSub;
    this.unsubscribe = null;
    this.listeners = nullListeners;
    this.handleChangeWrapper = this.handleChangeWrapper.bind(this);
  }

  var _proto = Subscription.prototype;

  _proto.addNestedSub = function addNestedSub(listener) {
    this.trySubscribe();
    return this.listeners.subscribe(listener);
  };

  _proto.notifyNestedSubs = function notifyNestedSubs() {
    this.listeners.notify();
  };

  _proto.handleChangeWrapper = function handleChangeWrapper() {
    if (this.onStateChange) {
      this.onStateChange();
    }
  };

  _proto.isSubscribed = function isSubscribed() {
    return Boolean(this.unsubscribe);
  };

  _proto.trySubscribe = function trySubscribe() {
    if (!this.unsubscribe) {
      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);
      this.listeners = createListenerCollection();
    }
  };

  _proto.tryUnsubscribe = function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
      this.listeners.clear();
      this.listeners = nullListeners;
    }
  };

  return Subscription;
}();

exports["default"] = Subscription;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\Subscription.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\hoist-non-react-statics\\dist\\hoist-non-react-statics.cjs.js", {"react-is":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\hoist-non-react-statics\dist\hoist-non-react-statics.cjs.js
      return function (require, module, exports) {
'use strict';

var reactIs = require('react-is');

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

function getStatics(component) {
  // React v16.11 and below
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  } // React v16.12 and above


  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;

      };
    };
  }
}, {package:"hoist-non-react-statics",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\hoist-non-react-statics\\dist\\hoist-non-react-statics.cjs.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\useIsomorphicLayoutEffect.js", {"react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\utils\useIsomorphicLayoutEffect.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports.useIsomorphicLayoutEffect = void 0;

var _react = require("react");

// React currently throws a warning when using useLayoutEffect on the server.
// To get around it, we can conditionally useEffect on the server (no-op) and
// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store
// subscription callback always has the selector from the latest render commit
// available, otherwise a store update may happen between render and the effect,
// which may cause missed updates; we also must ensure the store subscription
// is created synchronously, otherwise a store update may occur before the
// subscription is created and an inconsistent state may be observed
var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? _react.useLayoutEffect : _react.useEffect;
exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\useIsomorphicLayoutEffect.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireWildcard.js", {"@babel/runtime/helpers/typeof":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\typeof.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\@babel\runtime\helpers\interopRequireWildcard.js
      return function (require, module, exports) {
var _typeof = require("@babel/runtime/helpers/typeof")["default"];

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;
module.exports["default"] = module.exports, module.exports.__esModule = true;
      };
    };
  }
}, {package:"@babel\\runtime",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireWildcard.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\mapDispatchToProps.js", {"./wrapMapToProps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\wrapMapToProps.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\connect\mapDispatchToProps.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports.whenMapDispatchToPropsIsFunction = whenMapDispatchToPropsIsFunction;
exports.whenMapDispatchToPropsIsMissing = whenMapDispatchToPropsIsMissing;
exports.whenMapDispatchToPropsIsObject = whenMapDispatchToPropsIsObject;
exports["default"] = void 0;

var _redux = require("redux");

var _wrapMapToProps = require("./wrapMapToProps");

function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}

function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
    return {
      dispatch: dispatch
    };
  }) : undefined;
}

function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function (dispatch) {
    return (0, _redux.bindActionCreators)(mapDispatchToProps, dispatch);
  }) : undefined;
}

var _default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
exports["default"] = _default;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\mapDispatchToProps.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\mergeProps.js", {"../utils/verifyPlainObject":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\verifyPlainObject.js","@babel/runtime/helpers/extends":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\extends.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\connect\mergeProps.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.defaultMergeProps = defaultMergeProps;
exports.wrapMergePropsFunc = wrapMergePropsFunc;
exports.whenMergePropsIsFunction = whenMergePropsIsFunction;
exports.whenMergePropsIsOmitted = whenMergePropsIsOmitted;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _verifyPlainObject = _interopRequireDefault(require("../utils/verifyPlainObject"));

function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return (0, _extends2["default"])({}, ownProps, {}, stateProps, {}, dispatchProps);
}

function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if ("development" !== 'production') (0, _verifyPlainObject["default"])(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}

function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}

function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}

var _default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
exports["default"] = _default;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\mergeProps.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\mapStateToProps.js", {"./wrapMapToProps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\wrapMapToProps.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\connect\mapStateToProps.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports.whenMapStateToPropsIsFunction = whenMapStateToPropsIsFunction;
exports.whenMapStateToPropsIsMissing = whenMapStateToPropsIsMissing;
exports["default"] = void 0;

var _wrapMapToProps = require("./wrapMapToProps");

function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? (0, _wrapMapToProps.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
}

function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? (0, _wrapMapToProps.wrapMapToPropsConstant)(function () {
    return {};
  }) : undefined;
}

var _default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
exports["default"] = _default;
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\mapStateToProps.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\selectorFactory.js", {"./verifySubselectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\verifySubselectors.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","@babel/runtime/helpers/objectWithoutPropertiesLoose":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\objectWithoutPropertiesLoose.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\connect\selectorFactory.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.impureFinalPropsSelectorFactory = impureFinalPropsSelectorFactory;
exports.pureFinalPropsSelectorFactory = pureFinalPropsSelectorFactory;
exports["default"] = finalPropsSelectorFactory;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _verifySubselectors = _interopRequireDefault(require("./verifySubselectors"));

function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}

function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;

  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }

  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }

  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
} // TODO: Add more comments
// If pure is true, the selector returned by selectorFactory will memoize its results,
// allowing connectAdvanced's shouldComponentUpdate to return false if final
// props have not changed. If false, the selector will always return a new
// object and shouldComponentUpdate will always return true.


function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = (0, _objectWithoutPropertiesLoose2["default"])(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);
  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);

  if ("development" !== 'production') {
    (0, _verifySubselectors["default"])(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }

  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\selectorFactory.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\index.js", {"./cjs/react-router.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\cjs\\react-router.js","./cjs/react-router.min.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\cjs\\react-router.min.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router\index.js
      return function (require, module, exports) {
"use strict";

if ("development" === "production") {
  module.exports = require("./cjs/react-router.min.js");
} else {
  module.exports = require("./cjs/react-router.js");
}

      };
    };
  }
}, {package:"react-router",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-invariant\\dist\\tiny-invariant.cjs.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\tiny-invariant\dist\tiny-invariant.cjs.js
      return function (require, module, exports) {
'use strict';

var isProduction = "development" === 'production';
var prefix = 'Invariant failed';
function invariant(condition, message) {
  if (condition) {
    return;
  }

  if (isProduction) {
    throw new Error(prefix);
  } else {
    throw new Error(prefix + ": " + (message || ''));
  }
}

module.exports = invariant;

      };
    };
  }
}, {package:"tiny-invariant",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-invariant\\dist\\tiny-invariant.cjs.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\tiny-warning\dist\tiny-warning.cjs.js
      return function (require, module, exports) {
'use strict';

var isProduction = "development" === 'production';
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }

    var text = "Warning: " + message;

    if (typeof console !== 'undefined') {
      console.warn(text);
    }

    try {
      throw Error(text);
    } catch (x) {}
  }
}

module.exports = warning;

      };
    };
  }
}, {package:"tiny-warning",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\node_modules\\history\\index.js", {"./cjs/history.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\node_modules\\history\\cjs\\history.js","./cjs/history.min.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\node_modules\\history\\cjs\\history.min.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router-dom\node_modules\history\index.js
      return function (require, module, exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/history.min.js');
} else {
  module.exports = require('./cjs/history.js');
}

      };
    };
  }
}, {package:"history",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\node_modules\\history\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\routes\\routes.component.js", {"../../../app/scripts/lib/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\app\\scripts\\lib\\util.js","../../../shared/constants/app":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\app.js","../../components/app/account-menu":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\account-menu\\index.js","../../components/app/alerts":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\alerts\\index.js","../../components/app/app-header":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\app-header\\index.js","../../components/app/dropdowns/network-dropdown":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\dropdowns\\network-dropdown.js","../../components/app/loading-network-screen":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\loading-network-screen\\index.js","../../components/app/modals":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\index.js","../../components/app/qr-hardware-popover":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\qr-hardware-popover\\index.js","../../components/ui/alert":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\alert\\index.js","../../components/ui/loading-screen":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\loading-screen\\index.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../helpers/higher-order-components/authenticated":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\authenticated\\index.js","../../helpers/higher-order-components/initialized":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\initialized\\index.js","../add-collectible":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\add-collectible\\index.js","../asset":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\asset\\index.js","../confirm-add-suggested-token":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-add-suggested-token\\index.js","../confirm-import-token":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-import-token\\index.js","../confirm-transaction":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-transaction\\index.js","../confirmation":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirmation\\index.js","../create-account":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\index.js","../first-time-flow":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\first-time-flow\\index.js","../home":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\home\\index.js","../import-token":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\import-token\\index.js","../keychains/restore-vault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\keychains\\restore-vault.js","../keychains/reveal-seed":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\keychains\\reveal-seed.js","../lock":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\lock\\index.js","../mobile-sync":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\mobile-sync\\index.js","../onboarding-flow/onboarding-app-header/onboarding-app-header":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\onboarding-app-header\\onboarding-app-header.js","../onboarding-flow/onboarding-flow":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\onboarding-flow.js","../permissions-connect":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\permissions-connect\\index.js","../send":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\index.js","../settings":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\settings\\index.js","../swaps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\index.js","../token-details":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\token-details\\index.js","../unlock-page":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\unlock-page\\index.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-idle-timer":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-idle-timer\\dist\\index.min.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\routes\routes.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactIdleTimer = _interopRequireDefault(require("react-idle-timer"));

var _firstTimeFlow = _interopRequireDefault(require("../first-time-flow"));

var _send = _interopRequireDefault(require("../send"));

var _swaps = _interopRequireDefault(require("../swaps"));

var _confirmTransaction = _interopRequireDefault(require("../confirm-transaction"));

var _home = _interopRequireDefault(require("../home"));

var _settings = _interopRequireDefault(require("../settings"));

var _authenticated = _interopRequireDefault(require("../../helpers/higher-order-components/authenticated"));

var _initialized = _interopRequireDefault(require("../../helpers/higher-order-components/initialized"));

var _lock = _interopRequireDefault(require("../lock"));

var _permissionsConnect = _interopRequireDefault(require("../permissions-connect"));

var _restoreVault = _interopRequireDefault(require("../keychains/restore-vault"));

var _revealSeed = _interopRequireDefault(require("../keychains/reveal-seed"));

var _mobileSync = _interopRequireDefault(require("../mobile-sync"));

var _importToken = _interopRequireDefault(require("../import-token"));

var _addCollectible = _interopRequireDefault(require("../add-collectible"));

var _confirmImportToken = _interopRequireDefault(require("../confirm-import-token"));

var _confirmAddSuggestedToken = _interopRequireDefault(require("../confirm-add-suggested-token"));

var _createAccount = _interopRequireDefault(require("../create-account"));

var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));

var _loadingNetworkScreen = _interopRequireDefault(require("../../components/app/loading-network-screen"));

var _networkDropdown = _interopRequireDefault(require("../../components/app/dropdowns/network-dropdown"));

var _accountMenu = _interopRequireDefault(require("../../components/app/account-menu"));

var _modals = require("../../components/app/modals");

var _alert = _interopRequireDefault(require("../../components/ui/alert"));

var _appHeader = _interopRequireDefault(require("../../components/app/app-header"));

var _unlockPage = _interopRequireDefault(require("../unlock-page"));

var _alerts = _interopRequireDefault(require("../../components/app/alerts"));

var _asset = _interopRequireDefault(require("../asset"));

var _onboardingAppHeader = _interopRequireDefault(require("../onboarding-flow/onboarding-app-header/onboarding-app-header"));

var _tokenDetails = _interopRequireDefault(require("../token-details"));

var _routes = require("../../helpers/constants/routes");

var _app = require("../../../shared/constants/app");

var _util = require("../../../app/scripts/lib/util");

var _confirmation = _interopRequireDefault(require("../confirmation"));

var _onboardingFlow = _interopRequireDefault(require("../onboarding-flow/onboarding-flow"));

var _qrHardwarePopover = _interopRequireDefault(require("../../components/app/qr-hardware-popover"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class Routes extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "onAppHeaderClick", async () => {
      const {
        prepareToLeaveSwaps
      } = this.props;

      if (this.onSwapsPage()) {
        await prepareToLeaveSwaps();
      }
    });
  }

  UNSAFE_componentWillMount() {
    const {
      currentCurrency,
      pageChanged,
      setCurrentCurrencyToUSD,
      history
    } = this.props;

    if (!currentCurrency) {
      setCurrentCurrencyToUSD();
    }

    history.listen((locationObj, action) => {
      if (action === 'PUSH') {
        pageChanged(locationObj.pathname);
      }
    });
  }

  renderRoutes() {
    const {
      autoLockTimeLimit,
      setLastActiveTime
    } = this.props;

    const routes = /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, false && /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.ONBOARDING_ROUTE,
      component: _onboardingFlow.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.LOCK_ROUTE,
      component: _lock.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      path: _routes.INITIALIZE_ROUTE,
      component: _firstTimeFlow.default
    }), /*#__PURE__*/_react.default.createElement(_initialized.default, {
      path: _routes.UNLOCK_ROUTE,
      component: _unlockPage.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement(_initialized.default, {
      path: _routes.RESTORE_VAULT_ROUTE,
      component: _restoreVault.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.REVEAL_SEED_ROUTE,
      component: _revealSeed.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.MOBILE_SYNC_ROUTE,
      component: _mobileSync.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.SETTINGS_ROUTE,
      component: _settings.default
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: `${_routes.CONFIRM_TRANSACTION_ROUTE}/:id?`,
      component: _confirmTransaction.default
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.SEND_ROUTE,
      component: _send.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: `${_routes.TOKEN_DETAILS}/:address/`,
      component: _tokenDetails.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.SWAPS_ROUTE,
      component: _swaps.default
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.IMPORT_TOKEN_ROUTE,
      component: _importToken.default,
      exact: true
    }), false ? /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.ADD_COLLECTIBLE_ROUTE,
      component: _addCollectible.default,
      exact: true
    }) : null, /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.CONFIRM_IMPORT_TOKEN_ROUTE,
      component: _confirmImportToken.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE,
      component: _confirmAddSuggestedToken.default,
      exact: true
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.CONFIRMATION_V_NEXT_ROUTE,
      component: _confirmation.default
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.NEW_ACCOUNT_ROUTE,
      component: _createAccount.default
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: `${_routes.CONNECT_ROUTE}/:id`,
      component: _permissionsConnect.default
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: `${_routes.ASSET_ROUTE}/:asset/:id`,
      component: _asset.default
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: `${_routes.ASSET_ROUTE}/:asset/`,
      component: _asset.default
    }), /*#__PURE__*/_react.default.createElement(_authenticated.default, {
      path: _routes.DEFAULT_ROUTE,
      component: _home.default
    }));

    if (autoLockTimeLimit > 0) {
      return /*#__PURE__*/_react.default.createElement(_reactIdleTimer.default, {
        onAction: setLastActiveTime,
        throttle: 1000
      }, routes);
    }

    return routes;
  }

  onInitializationUnlockPage() {
    const {
      location
    } = this.props;
    return Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
      path: _routes.INITIALIZE_UNLOCK_ROUTE,
      exact: true
    }));
  }

  onConfirmPage() {
    const {
      location
    } = this.props;
    return Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
      path: _routes.CONFIRM_TRANSACTION_ROUTE,
      exact: false
    }));
  }

  onSwapsPage() {
    const {
      location
    } = this.props;
    return Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
      path: _routes.SWAPS_ROUTE,
      exact: false
    }));
  }

  onSwapsBuildQuotePage() {
    const {
      location
    } = this.props;
    return Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
      path: _routes.BUILD_QUOTE_ROUTE,
      exact: false
    }));
  }

  hideAppHeader() {
    const {
      location
    } = this.props;
    const isInitializing = Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
      path: false ? _routes.ONBOARDING_ROUTE : _routes.INITIALIZE_ROUTE,
      exact: false
    }));

    if (isInitializing && !this.onInitializationUnlockPage()) {
      return true;
    }

    const windowType = (0, _util.getEnvironmentType)();

    if (windowType === _app.ENVIRONMENT_TYPE_NOTIFICATION) {
      return true;
    }

    if (windowType === _app.ENVIRONMENT_TYPE_POPUP && this.onConfirmPage()) {
      return true;
    }

    const isHandlingPermissionsRequest = Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
      path: _routes.CONNECT_ROUTE,
      exact: false
    }));
    const isHandlingAddEthereumChainRequest = Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
      path: _routes.CONFIRMATION_V_NEXT_ROUTE,
      exact: false
    }));
    return isHandlingPermissionsRequest || isHandlingAddEthereumChainRequest;
  }

  showOnboardingHeader() {
    const {
      location
    } = this.props;
    return Boolean((0, _reactRouterDom.matchPath)(location.pathname, {
      path: _routes.ONBOARDING_ROUTE,
      exact: false
    }));
  }

  render() {
    const {
      isLoading,
      isUnlocked,
      alertMessage,
      textDirection,
      loadingMessage,
      isNetworkLoading,
      setMouseUserState,
      isMouseUser,
      browserEnvironmentOs: os,
      browserEnvironmentBrowser: browser
    } = this.props;
    const loadMessage = loadingMessage || isNetworkLoading ? this.getConnectingLabel(loadingMessage) : null;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('app', {
        [`os-${os}`]: os,
        [`browser-${browser}`]: browser,
        'mouse-user-styles': isMouseUser
      }),
      dir: textDirection,
      onClick: () => setMouseUserState(true),
      onKeyDown: e => {
        if (e.keyCode === 9) {
          setMouseUserState(false);
        }
      }
    }, /*#__PURE__*/_react.default.createElement(_qrHardwarePopover.default, null), /*#__PURE__*/_react.default.createElement(_modals.Modal, null), /*#__PURE__*/_react.default.createElement(_alert.default, {
      visible: this.props.alertOpen,
      msg: alertMessage
    }), !this.hideAppHeader() && /*#__PURE__*/_react.default.createElement(_appHeader.default, {
      hideNetworkIndicator: this.onInitializationUnlockPage(),
      disableNetworkIndicator: this.onSwapsPage(),
      onClick: this.onAppHeaderClick,
      disabled: this.onConfirmPage() || this.onSwapsPage() && !this.onSwapsBuildQuotePage()
    }), false && this.showOnboardingHeader() && /*#__PURE__*/_react.default.createElement(_onboardingAppHeader.default, null), /*#__PURE__*/_react.default.createElement(_networkDropdown.default, null), /*#__PURE__*/_react.default.createElement(_accountMenu.default, null), /*#__PURE__*/_react.default.createElement("div", {
      className: "main-container-wrapper"
    }, isLoading ? /*#__PURE__*/_react.default.createElement(_loadingScreen.default, {
      loadingMessage: loadMessage
    }) : null, !isLoading && isNetworkLoading ? /*#__PURE__*/_react.default.createElement(_loadingNetworkScreen.default, null) : null, this.renderRoutes()), isUnlocked ? /*#__PURE__*/_react.default.createElement(_alerts.default, {
      history: this.props.history
    }) : null);
  }

  toggleMetamaskActive() {
    if (this.props.isUnlocked) {
      // currently active: deactivate
      this.props.lockMetaMask();
    } else {
      // currently inactive: redirect to password box
      const passwordBox = document.querySelector('input[type=password]');

      if (!passwordBox) {
        return;
      }

      passwordBox.focus();
    }
  }

  getConnectingLabel(loadingMessage) {
    if (loadingMessage) {
      return loadingMessage;
    }

    const {
      providerType,
      providerId
    } = this.props;

    switch (providerType) {
      case 'mainnet':
        return this.context.t('connectingToMainnet');

      case 'ropsten':
        return this.context.t('connectingToRopsten');

      case 'kovan':
        return this.context.t('connectingToKovan');

      case 'rinkeby':
        return this.context.t('connectingToRinkeby');

      case 'goerli':
        return this.context.t('connectingToGoerli');

      default:
        return this.context.t('connectingTo', [providerId]);
    }
  }

}

exports.default = Routes;
(0, _defineProperty2.default)(Routes, "propTypes", {
  currentCurrency: _propTypes.default.string,
  setCurrentCurrencyToUSD: _propTypes.default.func,
  isLoading: _propTypes.default.bool,
  loadingMessage: _propTypes.default.string,
  alertMessage: _propTypes.default.string,
  textDirection: _propTypes.default.string,
  isNetworkLoading: _propTypes.default.bool,
  alertOpen: _propTypes.default.bool,
  isUnlocked: _propTypes.default.bool,
  setLastActiveTime: _propTypes.default.func,
  history: _propTypes.default.object,
  location: _propTypes.default.object,
  lockMetaMask: _propTypes.default.func,
  isMouseUser: _propTypes.default.bool,
  setMouseUserState: _propTypes.default.func,
  providerId: _propTypes.default.string,
  providerType: _propTypes.default.string,
  autoLockTimeLimit: _propTypes.default.number,
  pageChanged: _propTypes.default.func.isRequired,
  prepareToLeaveSwaps: _propTypes.default.func,
  browserEnvironmentOs: _propTypes.default.string,
  browserEnvironmentBrowser: _propTypes.default.string
});
(0, _defineProperty2.default)(Routes, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\routes\\routes.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\index.js", {"./cycle":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\cycle.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\jsan\lib\index.js
      return function (require, module, exports) {
var cycle = require('./cycle');

exports.stringify = function stringify(value, replacer, space, _options) {

  if (arguments.length < 4) {
    try {
      if (arguments.length === 1) {
        return JSON.stringify(value);
      } else {
        return JSON.stringify.apply(JSON, arguments);
      }
    } catch (e) {}
  }

  var options = _options || false;
  if (typeof options === 'boolean') {
    options = {
      'date': options,
      'function': options,
      'regex': options,
      'undefined': options,
      'error': options,
      'symbol': options,
      'map': options,
      'set': options,
      'nan': options,
      'infinity': options
    }
  }

  var decycled = cycle.decycle(value, options, replacer);
  if (arguments.length === 1) {
    return JSON.stringify(decycled);
  } else {
    // decycle already handles when replacer is a function.
    return JSON.stringify(decycled, Array.isArray(replacer) ? replacer : null, space);
  }
}

exports.parse = function parse(text, reviver) {
  var needsRetrocycle = /"\$jsan"/.test(text);
  var parsed;
  if (arguments.length === 1) {
    parsed = JSON.parse(text);
  } else {
    parsed = JSON.parse(text, reviver);
  }
  if (needsRetrocycle) {
    parsed = cycle.retrocycle(parsed);
  }
  return parsed;
}

      };
    };
  }
}, {package:"jsan",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\component-emitter\\index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\node_modules\component-emitter\index.js
      return function (require, module, exports) {

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

      };
    };
  }
}, {package:"component-emitter",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\component-emitter\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\scclientsocket.js", {"./auth":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\auth.js","./response":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\response.js","./sctransport":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\sctransport.js","buffer/":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\buffer\\index.js","clone":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\clone\\clone.js","component-emitter":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\component-emitter\\index.js","linked-list":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\linked-list\\index.js","querystring":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\querystring-es3\\index.js","sc-channel":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-channel\\index.js","sc-errors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-errors\\index.js","sc-formatter":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-formatter\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\lib\scclientsocket.js
      return function (require, module, exports) {
var Emitter = require('component-emitter');
var SCChannel = require('sc-channel').SCChannel;
var Response = require('./response').Response;
var AuthEngine = require('./auth').AuthEngine;
var formatter = require('sc-formatter');
var SCTransport = require('./sctransport').SCTransport;
var querystring = require('querystring');
var LinkedList = require('linked-list');
var Buffer = require('buffer/').Buffer;
var clone = require('clone');

var scErrors = require('sc-errors');
var InvalidArgumentsError = scErrors.InvalidArgumentsError;
var InvalidMessageError = scErrors.InvalidMessageError;
var InvalidActionError = scErrors.InvalidActionError;
var SocketProtocolError = scErrors.SocketProtocolError;
var TimeoutError = scErrors.TimeoutError;
var BadConnectionError = scErrors.BadConnectionError;

var isBrowser = typeof window !== 'undefined';


var SCClientSocket = function (opts) {
  var self = this;

  Emitter.call(this);

  this.id = null;
  this.state = this.CLOSED;
  this.authState = this.UNAUTHENTICATED;
  this.signedAuthToken = null;
  this.authToken = null;
  this.pendingReconnect = false;
  this.pendingReconnectTimeout = null;
  this.preparingPendingSubscriptions = false;
  this.clientId = opts.clientId;

  this.connectTimeout = opts.connectTimeout;
  this.ackTimeout = opts.ackTimeout;
  this.channelPrefix = opts.channelPrefix || null;
  this.disconnectOnUnload = opts.disconnectOnUnload == null ? true : opts.disconnectOnUnload;
  this.authTokenName = opts.authTokenName;

  // pingTimeout will be ackTimeout at the start, but it will
  // be updated with values provided by the 'connect' event
  this.pingTimeout = this.ackTimeout;
  this.pingTimeoutDisabled = !!opts.pingTimeoutDisabled;
  this.active = true;

  this._clientMap = opts.clientMap || {};

  var maxTimeout = Math.pow(2, 31) - 1;

  var verifyDuration = function (propertyName) {
    if (self[propertyName] > maxTimeout) {
      throw new InvalidArgumentsError('The ' + propertyName +
        ' value provided exceeded the maximum amount allowed');
    }
  };

  verifyDuration('connectTimeout');
  verifyDuration('ackTimeout');

  this._localEvents = {
    'connect': 1,
    'connectAbort': 1,
    'close': 1,
    'disconnect': 1,
    'message': 1,
    'error': 1,
    'raw': 1,
    'kickOut': 1,
    'subscribe': 1,
    'unsubscribe': 1,
    'subscribeStateChange': 1,
    'authStateChange': 1,
    'authenticate': 1,
    'deauthenticate': 1,
    'removeAuthToken': 1,
    'subscribeRequest': 1
  };

  this.connectAttempts = 0;

  this._emitBuffer = new LinkedList();
  this.channels = {};

  this.options = opts;

  this._cid = 1;

  this.options.callIdGenerator = function () {
    return self._cid++;
  };

  if (this.options.autoReconnect) {
    if (this.options.autoReconnectOptions == null) {
      this.options.autoReconnectOptions = {};
    }

    // Add properties to the this.options.autoReconnectOptions object.
    // We assign the reference to a reconnectOptions variable to avoid repetition.
    var reconnectOptions = this.options.autoReconnectOptions;
    if (reconnectOptions.initialDelay == null) {
      reconnectOptions.initialDelay = 10000;
    }
    if (reconnectOptions.randomness == null) {
      reconnectOptions.randomness = 10000;
    }
    if (reconnectOptions.multiplier == null) {
      reconnectOptions.multiplier = 1.5;
    }
    if (reconnectOptions.maxDelay == null) {
      reconnectOptions.maxDelay = 60000;
    }
  }

  if (this.options.subscriptionRetryOptions == null) {
    this.options.subscriptionRetryOptions = {};
  }

  if (this.options.authEngine) {
    this.auth = this.options.authEngine;
  } else {
    this.auth = new AuthEngine();
  }

  if (this.options.codecEngine) {
    this.codec = this.options.codecEngine;
  } else {
    // Default codec engine
    this.codec = formatter;
  }

  if (this.options.protocol) {
    var protocolOptionError = new InvalidArgumentsError('The "protocol" option' +
      ' does not affect socketcluster-client. If you want to utilize SSL/TLS' +
      ' - use "secure" option instead');
    this._onSCError(protocolOptionError);
  }

  this.options.path = this.options.path.replace(/\/$/, '') + '/';

  this.options.query = opts.query || {};
  if (typeof this.options.query === 'string') {
    this.options.query = querystring.parse(this.options.query);
  }

  this._channelEmitter = new Emitter();

  this._unloadHandler = function () {
    self.disconnect();
  };

  if (isBrowser && this.disconnectOnUnload && global.addEventListener) {
    global.addEventListener('beforeunload', this._unloadHandler, false);
  }
  this._clientMap[this.clientId] = this;

  if (this.options.autoConnect) {
    this.connect();
  }
};

SCClientSocket.prototype = Object.create(Emitter.prototype);

SCClientSocket.CONNECTING = SCClientSocket.prototype.CONNECTING = SCTransport.prototype.CONNECTING;
SCClientSocket.OPEN = SCClientSocket.prototype.OPEN = SCTransport.prototype.OPEN;
SCClientSocket.CLOSED = SCClientSocket.prototype.CLOSED = SCTransport.prototype.CLOSED;

SCClientSocket.AUTHENTICATED = SCClientSocket.prototype.AUTHENTICATED = 'authenticated';
SCClientSocket.UNAUTHENTICATED = SCClientSocket.prototype.UNAUTHENTICATED = 'unauthenticated';

SCClientSocket.PENDING = SCClientSocket.prototype.PENDING = 'pending';

SCClientSocket.ignoreStatuses = scErrors.socketProtocolIgnoreStatuses;
SCClientSocket.errorStatuses = scErrors.socketProtocolErrorStatuses;

SCClientSocket.prototype._privateEventHandlerMap = {
  '#publish': function (data) {
    var undecoratedChannelName = this._undecorateChannelName(data.channel);
    var isSubscribed = this.isSubscribed(undecoratedChannelName, true);

    if (isSubscribed) {
      this._channelEmitter.emit(undecoratedChannelName, data.data);
    }
  },
  '#kickOut': function (data) {
    var undecoratedChannelName = this._undecorateChannelName(data.channel);
    var channel = this.channels[undecoratedChannelName];
    if (channel) {
      Emitter.prototype.emit.call(this, 'kickOut', data.message, undecoratedChannelName);
      channel.emit('kickOut', data.message, undecoratedChannelName);
      this._triggerChannelUnsubscribe(channel);
    }
  },
  '#setAuthToken': function (data, response) {
    var self = this;

    if (data) {
      var triggerAuthenticate = function (err) {
        if (err) {
          // This is a non-fatal error, we don't want to close the connection
          // because of this but we do want to notify the server and throw an error
          // on the client.
          response.error(err);
          self._onSCError(err);
        } else {
          self._changeToAuthenticatedState(data.token);
          response.end();
        }
      };

      this.auth.saveToken(this.authTokenName, data.token, {}, triggerAuthenticate);
    } else {
      response.error(new InvalidMessageError('No token data provided by #setAuthToken event'));
    }
  },
  '#removeAuthToken': function (data, response) {
    var self = this;

    this.auth.removeToken(this.authTokenName, function (err, oldToken) {
      if (err) {
        // Non-fatal error - Do not close the connection
        response.error(err);
        self._onSCError(err);
      } else {
        Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);
        self._changeToUnauthenticatedStateAndClearTokens();
        response.end();
      }
    });
  },
  '#disconnect': function (data) {
    this.transport.close(data.code, data.data);
  }
};

SCClientSocket.prototype.getState = function () {
  return this.state;
};

SCClientSocket.prototype.getBytesReceived = function () {
  return this.transport.getBytesReceived();
};

SCClientSocket.prototype.deauthenticate = function (callback) {
  var self = this;

  this.auth.removeToken(this.authTokenName, function (err, oldToken) {
    if (err) {
      // Non-fatal error - Do not close the connection
      self._onSCError(err);
    } else {
      Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);
      if (self.state !== self.CLOSED) {
        self.emit('#removeAuthToken');
      }
      self._changeToUnauthenticatedStateAndClearTokens();
    }
    callback && callback(err);
  });
};

SCClientSocket.prototype.connect = SCClientSocket.prototype.open = function () {
  var self = this;

  if (!this.active) {
    var error = new InvalidActionError('Cannot connect a destroyed client');
    this._onSCError(error);
    return;
  }

  if (this.state === this.CLOSED) {
    this.pendingReconnect = false;
    this.pendingReconnectTimeout = null;
    clearTimeout(this._reconnectTimeoutRef);

    this.state = this.CONNECTING;
    Emitter.prototype.emit.call(this, 'connecting');

    if (this.transport) {
      this.transport.off();
    }

    this.transport = new SCTransport(this.auth, this.codec, this.options);

    this.transport.on('open', function (status) {
      self.state = self.OPEN;
      self._onSCOpen(status);
    });

    this.transport.on('error', function (err) {
      self._onSCError(err);
    });

    this.transport.on('close', function (code, data) {
      self.state = self.CLOSED;
      self._onSCClose(code, data);
    });

    this.transport.on('openAbort', function (code, data) {
      self.state = self.CLOSED;
      self._onSCClose(code, data, true);
    });

    this.transport.on('event', function (event, data, res) {
      self._onSCEvent(event, data, res);
    });
  }
};

SCClientSocket.prototype.reconnect = function (code, data) {
  this.disconnect(code, data);
  this.connect();
};

SCClientSocket.prototype.disconnect = function (code, data) {
  code = code || 1000;

  if (typeof code !== 'number') {
    throw new InvalidArgumentsError('If specified, the code argument must be a number');
  }

  if (this.state === this.OPEN || this.state === this.CONNECTING) {
    this.transport.close(code, data);
  } else {
    this.pendingReconnect = false;
    this.pendingReconnectTimeout = null;
    clearTimeout(this._reconnectTimeoutRef);
  }
};

SCClientSocket.prototype.destroy = function (code, data) {
  if (isBrowser && global.removeEventListener) {
    global.removeEventListener('beforeunload', this._unloadHandler, false);
  }
  this.active = false;
  this.disconnect(code, data);
  delete this._clientMap[this.clientId];
};

SCClientSocket.prototype._changeToUnauthenticatedStateAndClearTokens = function () {
  if (this.authState !== this.UNAUTHENTICATED) {
    var oldState = this.authState;
    var oldSignedToken = this.signedAuthToken;
    this.authState = this.UNAUTHENTICATED;
    this.signedAuthToken = null;
    this.authToken = null;

    var stateChangeData = {
      oldState: oldState,
      newState: this.authState
    };
    Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);
    Emitter.prototype.emit.call(this, 'deauthenticate', oldSignedToken);
  }
};

SCClientSocket.prototype._changeToAuthenticatedState = function (signedAuthToken) {
  this.signedAuthToken = signedAuthToken;
  this.authToken = this._extractAuthTokenData(signedAuthToken);

  if (this.authState !== this.AUTHENTICATED) {
    var oldState = this.authState;
    this.authState = this.AUTHENTICATED;
    var stateChangeData = {
      oldState: oldState,
      newState: this.authState,
      signedAuthToken: signedAuthToken,
      authToken: this.authToken
    };
    if (!this.preparingPendingSubscriptions) {
      this.processPendingSubscriptions();
    }

    Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);
  }
  Emitter.prototype.emit.call(this, 'authenticate', signedAuthToken);
};

SCClientSocket.prototype.decodeBase64 = function (encodedString) {
  return Buffer.from(encodedString, 'base64').toString('utf8');
};

SCClientSocket.prototype.encodeBase64 = function (decodedString) {
  return Buffer.from(decodedString, 'utf8').toString('base64');
};

SCClientSocket.prototype._extractAuthTokenData = function (signedAuthToken) {
  var tokenParts = (signedAuthToken || '').split('.');
  var encodedTokenData = tokenParts[1];
  if (encodedTokenData != null) {
    var tokenData = encodedTokenData;
    try {
      tokenData = this.decodeBase64(tokenData);
      return JSON.parse(tokenData);
    } catch (e) {
      return tokenData;
    }
  }
  return null;
};

SCClientSocket.prototype.getAuthToken = function () {
  return this.authToken;
};

SCClientSocket.prototype.getSignedAuthToken = function () {
  return this.signedAuthToken;
};

// Perform client-initiated authentication by providing an encrypted token string.
SCClientSocket.prototype.authenticate = function (signedAuthToken, callback) {
  var self = this;

  this.emit('#authenticate', signedAuthToken, function (err, authStatus) {
    if (authStatus && authStatus.isAuthenticated != null) {
      // If authStatus is correctly formatted (has an isAuthenticated property),
      // then we will rehydrate the authError.
      if (authStatus.authError) {
        authStatus.authError = scErrors.hydrateError(authStatus.authError);
      }
    } else {
      // Some errors like BadConnectionError and TimeoutError will not pass a valid
      // authStatus object to the current function, so we need to create it ourselves.
      authStatus = {
        isAuthenticated: self.authState,
        authError: null
      };
    }
    if (err) {
      if (err.name !== 'BadConnectionError' && err.name !== 'TimeoutError') {
        // In case of a bad/closed connection or a timeout, we maintain the last
        // known auth state since those errors don't mean that the token is invalid.

        self._changeToUnauthenticatedStateAndClearTokens();
      }
      callback && callback(err, authStatus);
    } else {
      self.auth.saveToken(self.authTokenName, signedAuthToken, {}, function (err) {
        if (err) {
          self._onSCError(err);
        }
        if (authStatus.isAuthenticated) {
          self._changeToAuthenticatedState(signedAuthToken);
        } else {
          self._changeToUnauthenticatedStateAndClearTokens();
        }
        callback && callback(err, authStatus);
      });
    }
  });
};

SCClientSocket.prototype._tryReconnect = function (initialDelay) {
  var self = this;

  var exponent = this.connectAttempts++;
  var reconnectOptions = this.options.autoReconnectOptions;
  var timeout;

  if (initialDelay == null || exponent > 0) {
    var initialTimeout = Math.round(reconnectOptions.initialDelay + (reconnectOptions.randomness || 0) * Math.random());

    timeout = Math.round(initialTimeout * Math.pow(reconnectOptions.multiplier, exponent));
  } else {
    timeout = initialDelay;
  }

  if (timeout > reconnectOptions.maxDelay) {
    timeout = reconnectOptions.maxDelay;
  }

  clearTimeout(this._reconnectTimeoutRef);

  this.pendingReconnect = true;
  this.pendingReconnectTimeout = timeout;
  this._reconnectTimeoutRef = setTimeout(function () {
    self.connect();
  }, timeout);
};

SCClientSocket.prototype._onSCOpen = function (status) {
  var self = this;

  this.preparingPendingSubscriptions = true;

  if (status) {
    this.id = status.id;
    this.pingTimeout = status.pingTimeout;
    this.transport.pingTimeout = this.pingTimeout;
    if (status.isAuthenticated) {
      this._changeToAuthenticatedState(status.authToken);
    } else {
      this._changeToUnauthenticatedStateAndClearTokens();
    }
  } else {
    // This can happen if auth.loadToken (in sctransport.js) fails with
    // an error - This means that the signedAuthToken cannot be loaded by
    // the auth engine and therefore, we need to unauthenticate the client.
    this._changeToUnauthenticatedStateAndClearTokens();
  }

  this.connectAttempts = 0;

  if (this.options.autoSubscribeOnConnect) {
    this.processPendingSubscriptions();
  }

  // If the user invokes the callback while in autoSubscribeOnConnect mode, it
  // won't break anything.
  Emitter.prototype.emit.call(this, 'connect', status, function () {
    self.processPendingSubscriptions();
  });

  if (this.state === this.OPEN) {
    this._flushEmitBuffer();
  }
};

SCClientSocket.prototype._onSCError = function (err) {
  var self = this;

  // Throw error in different stack frame so that error handling
  // cannot interfere with a reconnect action.
  setTimeout(function () {
    if (self.listeners('error').length < 1) {
      throw err;
    } else {
      Emitter.prototype.emit.call(self, 'error', err);
    }
  }, 0);
};

SCClientSocket.prototype._suspendSubscriptions = function () {
  var channel, newState;
  for (var channelName in this.channels) {
    if (this.channels.hasOwnProperty(channelName)) {
      channel = this.channels[channelName];
      if (channel.state === channel.SUBSCRIBED ||
        channel.state === channel.PENDING) {

        newState = channel.PENDING;
      } else {
        newState = channel.UNSUBSCRIBED;
      }

      this._triggerChannelUnsubscribe(channel, newState);
    }
  }
};

SCClientSocket.prototype._abortAllPendingEventsDueToBadConnection = function (failureType) {
  var currentNode = this._emitBuffer.head;
  var nextNode;

  while (currentNode) {
    nextNode = currentNode.next;
    var eventObject = currentNode.data;
    clearTimeout(eventObject.timeout);
    delete eventObject.timeout;
    currentNode.detach();
    currentNode = nextNode;

    var callback = eventObject.callback;
    if (callback) {
      delete eventObject.callback;
      var errorMessage = "Event '" + eventObject.event +
        "' was aborted due to a bad connection";
      var error = new BadConnectionError(errorMessage, failureType);
      callback.call(eventObject, error, eventObject);
    }
    // Cleanup any pending response callback in the transport layer too.
    if (eventObject.cid) {
      this.transport.cancelPendingResponse(eventObject.cid);
    }
  }
};

SCClientSocket.prototype._onSCClose = function (code, data, openAbort) {
  var self = this;

  this.id = null;

  if (this.transport) {
    this.transport.off();
  }
  this.pendingReconnect = false;
  this.pendingReconnectTimeout = null;
  clearTimeout(this._reconnectTimeoutRef);

  this._suspendSubscriptions();
  this._abortAllPendingEventsDueToBadConnection(openAbort ? 'connectAbort' : 'disconnect');

  // Try to reconnect
  // on server ping timeout (4000)
  // or on client pong timeout (4001)
  // or on close without status (1005)
  // or on handshake failure (4003)
  // or on handshake rejection (4008)
  // or on socket hung up (1006)
  if (this.options.autoReconnect) {
    if (code === 4000 || code === 4001 || code === 1005) {
      // If there is a ping or pong timeout or socket closes without
      // status, don't wait before trying to reconnect - These could happen
      // if the client wakes up after a period of inactivity and in this case we
      // want to re-establish the connection as soon as possible.
      this._tryReconnect(0);

      // Codes 4500 and above will be treated as permanent disconnects.
      // Socket will not try to auto-reconnect.
    } else if (code !== 1000 && code < 4500) {
      this._tryReconnect();
    }
  }

  if (openAbort) {
    Emitter.prototype.emit.call(self, 'connectAbort', code, data);
  } else {
    Emitter.prototype.emit.call(self, 'disconnect', code, data);
  }
  Emitter.prototype.emit.call(self, 'close', code, data);

  if (!SCClientSocket.ignoreStatuses[code]) {
    var closeMessage;
    if (data) {
      closeMessage = 'Socket connection closed with status code ' + code + ' and reason: ' + data;
    } else {
      closeMessage = 'Socket connection closed with status code ' + code;
    }
    var err = new SocketProtocolError(SCClientSocket.errorStatuses[code] || closeMessage, code);
    this._onSCError(err);
  }
};

SCClientSocket.prototype._onSCEvent = function (event, data, res) {
  var handler = this._privateEventHandlerMap[event];
  if (handler) {
    handler.call(this, data, res);
  } else {
    Emitter.prototype.emit.call(this, event, data, function () {
      res && res.callback.apply(res, arguments);
    });
  }
};

SCClientSocket.prototype.decode = function (message) {
  return this.transport.decode(message);
};

SCClientSocket.prototype.encode = function (object) {
  return this.transport.encode(object);
};

SCClientSocket.prototype._flushEmitBuffer = function () {
  var currentNode = this._emitBuffer.head;
  var nextNode;

  while (currentNode) {
    nextNode = currentNode.next;
    var eventObject = currentNode.data;
    currentNode.detach();
    this.transport.emitObject(eventObject);
    currentNode = nextNode;
  }
};

SCClientSocket.prototype._handleEventAckTimeout = function (eventObject, eventNode) {
  if (eventNode) {
    eventNode.detach();
  }
  delete eventObject.timeout;

  var callback = eventObject.callback;
  if (callback) {
    delete eventObject.callback;
    var error = new TimeoutError("Event response for '" + eventObject.event + "' timed out");
    callback.call(eventObject, error, eventObject);
  }
  // Cleanup any pending response callback in the transport layer too.
  if (eventObject.cid) {
    this.transport.cancelPendingResponse(eventObject.cid);
  }
};

SCClientSocket.prototype._emit = function (event, data, callback) {
  var self = this;

  if (this.state === this.CLOSED) {
    this.connect();
  }
  var eventObject = {
    event: event,
    callback: callback
  };

  var eventNode = new LinkedList.Item();

  if (this.options.cloneData) {
    eventObject.data = clone(data);
  } else {
    eventObject.data = data;
  }
  eventNode.data = eventObject;

  eventObject.timeout = setTimeout(function () {
    self._handleEventAckTimeout(eventObject, eventNode);
  }, this.ackTimeout);

  this._emitBuffer.append(eventNode);
  if (this.state === this.OPEN) {
    this._flushEmitBuffer();
  }
};

SCClientSocket.prototype.send = function (data) {
  this.transport.send(data);
};

SCClientSocket.prototype.emit = function (event, data, callback) {
  if (this._localEvents[event] == null) {
    this._emit(event, data, callback);
  } else if (event === 'error') {
    Emitter.prototype.emit.call(this, event, data);
  } else {
    var error = new InvalidActionError('The "' + event + '" event is reserved and cannot be emitted on a client socket');
    this._onSCError(error);
  }
};

SCClientSocket.prototype.publish = function (channelName, data, callback) {
  var pubData = {
    channel: this._decorateChannelName(channelName),
    data: data
  };
  this.emit('#publish', pubData, callback);
};

SCClientSocket.prototype._triggerChannelSubscribe = function (channel, subscriptionOptions) {
  var channelName = channel.name;

  if (channel.state !== channel.SUBSCRIBED) {
    var oldState = channel.state;
    channel.state = channel.SUBSCRIBED;

    var stateChangeData = {
      channel: channelName,
      oldState: oldState,
      newState: channel.state,
      subscriptionOptions: subscriptionOptions
    };
    channel.emit('subscribeStateChange', stateChangeData);
    channel.emit('subscribe', channelName, subscriptionOptions);
    Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);
    Emitter.prototype.emit.call(this, 'subscribe', channelName, subscriptionOptions);
  }
};

SCClientSocket.prototype._triggerChannelSubscribeFail = function (err, channel, subscriptionOptions) {
  var channelName = channel.name;
  var meetsAuthRequirements = !channel.waitForAuth || this.authState === this.AUTHENTICATED;

  if (channel.state !== channel.UNSUBSCRIBED && meetsAuthRequirements) {
    channel.state = channel.UNSUBSCRIBED;

    channel.emit('subscribeFail', err, channelName, subscriptionOptions);
    Emitter.prototype.emit.call(this, 'subscribeFail', err, channelName, subscriptionOptions);
  }
};

// Cancel any pending subscribe callback
SCClientSocket.prototype._cancelPendingSubscribeCallback = function (channel) {
  if (channel._pendingSubscriptionCid != null) {
    this.transport.cancelPendingResponse(channel._pendingSubscriptionCid);
    delete channel._pendingSubscriptionCid;
  }
};

SCClientSocket.prototype._decorateChannelName = function (channelName) {
  if (this.channelPrefix) {
    channelName = this.channelPrefix + channelName;
  }
  return channelName;
};

SCClientSocket.prototype._undecorateChannelName = function (decoratedChannelName) {
  if (this.channelPrefix && decoratedChannelName.indexOf(this.channelPrefix) === 0) {
    return decoratedChannelName.replace(this.channelPrefix, '');
  }
  return decoratedChannelName;
};

SCClientSocket.prototype._trySubscribe = function (channel) {
  var self = this;

  var meetsAuthRequirements = !channel.waitForAuth || this.authState === this.AUTHENTICATED;

  // We can only ever have one pending subscribe action at any given time on a channel
  if (this.state === this.OPEN && !this.preparingPendingSubscriptions &&
    channel._pendingSubscriptionCid == null && meetsAuthRequirements) {

    var options = {
      noTimeout: true
    };

    var subscriptionOptions = {
      channel: this._decorateChannelName(channel.name)
    };
    if (channel.waitForAuth) {
      options.waitForAuth = true;
      subscriptionOptions.waitForAuth = options.waitForAuth;
    }
    if (channel.data) {
      subscriptionOptions.data = channel.data;
    }
    if (channel.batch) {
      options.batch = true;
      subscriptionOptions.batch = true;
    }

    channel._pendingSubscriptionCid = this.transport.emit(
      '#subscribe', subscriptionOptions, options,
      function (err) {
        delete channel._pendingSubscriptionCid;
        if (err) {
          self._triggerChannelSubscribeFail(err, channel, subscriptionOptions);
        } else {
          self._triggerChannelSubscribe(channel, subscriptionOptions);
        }
      }
    );
    Emitter.prototype.emit.call(this, 'subscribeRequest', channel.name, subscriptionOptions);
  }
};

SCClientSocket.prototype.subscribe = function (channelName, options) {
  var channel = this.channels[channelName];

  if (!channel) {
    channel = new SCChannel(channelName, this, options);
    this.channels[channelName] = channel;
  } else if (options) {
    channel.setOptions(options);
  }

  if (channel.state === channel.UNSUBSCRIBED) {
    channel.state = channel.PENDING;
    this._trySubscribe(channel);
  }

  return channel;
};

SCClientSocket.prototype._triggerChannelUnsubscribe = function (channel, newState) {
  var channelName = channel.name;
  var oldState = channel.state;

  if (newState) {
    channel.state = newState;
  } else {
    channel.state = channel.UNSUBSCRIBED;
  }
  this._cancelPendingSubscribeCallback(channel);

  if (oldState === channel.SUBSCRIBED) {
    var stateChangeData = {
      channel: channelName,
      oldState: oldState,
      newState: channel.state
    };
    channel.emit('subscribeStateChange', stateChangeData);
    channel.emit('unsubscribe', channelName);
    Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);
    Emitter.prototype.emit.call(this, 'unsubscribe', channelName);
  }
};

SCClientSocket.prototype._tryUnsubscribe = function (channel) {
  var self = this;

  if (this.state === this.OPEN) {
    var options = {
      noTimeout: true
    };
    if (channel.batch) {
      options.batch = true;
    }
    // If there is a pending subscribe action, cancel the callback
    this._cancelPendingSubscribeCallback(channel);

    // This operation cannot fail because the TCP protocol guarantees delivery
    // so long as the connection remains open. If the connection closes,
    // the server will automatically unsubscribe the client and thus complete
    // the operation on the server side.
    var decoratedChannelName = this._decorateChannelName(channel.name);
    this.transport.emit('#unsubscribe', decoratedChannelName, options);
  }
};

SCClientSocket.prototype.unsubscribe = function (channelName) {
  var channel = this.channels[channelName];

  if (channel) {
    if (channel.state !== channel.UNSUBSCRIBED) {
      this._triggerChannelUnsubscribe(channel);
      this._tryUnsubscribe(channel);
    }
  }
};

SCClientSocket.prototype.channel = function (channelName, options) {
  var currentChannel = this.channels[channelName];

  if (!currentChannel) {
    currentChannel = new SCChannel(channelName, this, options);
    this.channels[channelName] = currentChannel;
  }
  return currentChannel;
};

SCClientSocket.prototype.destroyChannel = function (channelName) {
  var channel = this.channels[channelName];

  if (channel) {
    channel.unwatch();
    channel.unsubscribe();
    delete this.channels[channelName];
  }
};

SCClientSocket.prototype.subscriptions = function (includePending) {
  var subs = [];
  var channel, includeChannel;
  for (var channelName in this.channels) {
    if (this.channels.hasOwnProperty(channelName)) {
      channel = this.channels[channelName];

      if (includePending) {
        includeChannel = channel && (channel.state === channel.SUBSCRIBED ||
          channel.state === channel.PENDING);
      } else {
        includeChannel = channel && channel.state === channel.SUBSCRIBED;
      }

      if (includeChannel) {
        subs.push(channelName);
      }
    }
  }
  return subs;
};

SCClientSocket.prototype.isSubscribed = function (channelName, includePending) {
  var channel = this.channels[channelName];
  if (includePending) {
    return !!channel && (channel.state === channel.SUBSCRIBED ||
      channel.state === channel.PENDING);
  }
  return !!channel && channel.state === channel.SUBSCRIBED;
};

SCClientSocket.prototype.processPendingSubscriptions = function () {
  var self = this;

  this.preparingPendingSubscriptions = false;

  var pendingChannels = [];

  for (var i in this.channels) {
    if (this.channels.hasOwnProperty(i)) {
      var channel = this.channels[i];
      if (channel.state === channel.PENDING) {
        pendingChannels.push(channel);
      }
    }
  }

  pendingChannels.sort(function (a, b) {
    var ap = a.priority || 0;
    var bp = b.priority || 0;
    if (ap > bp) {
      return -1;
    }
    if (ap < bp) {
      return 1;
    }
    return 0;
  });

  pendingChannels.forEach(function (channel) {
    self._trySubscribe(channel);
  });
};

SCClientSocket.prototype.watch = function (channelName, handler) {
  if (typeof handler !== 'function') {
    throw new InvalidArgumentsError('No handler function was provided');
  }
  this._channelEmitter.on(channelName, handler);
};

SCClientSocket.prototype.unwatch = function (channelName, handler) {
  if (handler) {
    this._channelEmitter.removeListener(channelName, handler);
  } else {
    this._channelEmitter.removeAllListeners(channelName);
  }
};

SCClientSocket.prototype.watchers = function (channelName) {
  return this._channelEmitter.listeners(channelName);
};

module.exports = SCClientSocket;

      };
    };
  }
}, {package:"socketcluster-client",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\scclientsocket.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\factory.js", {"./scclientsocket":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\scclientsocket.js","sc-errors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-errors\\index.js","uuid":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\lib\factory.js
      return function (require, module, exports) {
var SCClientSocket = require('./scclientsocket');
var scErrors = require('sc-errors');
var uuid = require('uuid');
var InvalidArgumentsError = scErrors.InvalidArgumentsError;

var _clients = {};

function getMultiplexId(options) {
  var protocolPrefix = options.secure ? 'https://' : 'http://';
  var queryString = '';
  if (options.query) {
    if (typeof options.query === 'string') {
      queryString = options.query;
    } else {
      var queryArray = [];
      var queryMap = options.query;
      for (var key in queryMap) {
        if (queryMap.hasOwnProperty(key)) {
          queryArray.push(key + '=' + queryMap[key]);
        }
      }
      if (queryArray.length) {
        queryString = '?' + queryArray.join('&');
      }
    }
  }
  var host;
  if (options.host) {
    host = options.host;
  } else {
    host = options.hostname + ':' + options.port;
  }
  return protocolPrefix + host + options.path + queryString;
}

function isUrlSecure() {
  return global.location && location.protocol === 'https:';
}

function getPort(options, isSecureDefault) {
  var isSecure = options.secure == null ? isSecureDefault : options.secure;
  return options.port || (global.location && location.port ? location.port : isSecure ? 443 : 80);
}

function create(options) {
  var self = this;

  options = options || {};

  if (options.host && !options.host.match(/[^:]+:\d{2,5}/)) {
    throw new InvalidArgumentsError('The host option should include both' +
      ' the hostname and the port number in the format "hostname:port"');
  }

  if (options.host && options.hostname) {
    throw new InvalidArgumentsError('The host option should already include' +
      ' the hostname and the port number in the format "hostname:port"' +
      ' - Because of this, you should never use host and hostname options together');
  }

  if (options.host && options.port) {
    throw new InvalidArgumentsError('The host option should already include' +
      ' the hostname and the port number in the format "hostname:port"' +
      ' - Because of this, you should never use host and port options together');
  }

  var isSecureDefault = isUrlSecure();

  var opts = {
    port: getPort(options, isSecureDefault),
    hostname: global.location && location.hostname || 'localhost',
    path: '/socketcluster/',
    secure: isSecureDefault,
    autoConnect: true,
    autoReconnect: true,
    autoSubscribeOnConnect: true,
    connectTimeout: 20000,
    ackTimeout: 10000,
    timestampRequests: false,
    timestampParam: 't',
    authEngine: null,
    authTokenName: 'socketCluster.authToken',
    binaryType: 'arraybuffer',
    multiplex: true,
    pubSubBatchDuration: null,
    cloneData: false
  };
  for (var i in options) {
    if (options.hasOwnProperty(i)) {
      opts[i] = options[i];
    }
  }
  opts.clientMap = _clients;

  if (opts.multiplex === false) {
    opts.clientId = uuid.v4();
    var socket = new SCClientSocket(opts);
    _clients[opts.clientId] = socket;
    return socket;
  }
  opts.clientId = getMultiplexId(opts);

  if (_clients[opts.clientId]) {
    if (opts.autoConnect) {
      _clients[opts.clientId].connect();
    }
  } else {
    _clients[opts.clientId] = new SCClientSocket(opts);
  }
  return _clients[opts.clientId];
}

function destroy(socket) {
  socket.destroy();
}

module.exports = {
  create: create,
  destroy: destroy,
  clients: _clients
};

      };
    };
  }
}, {package:"socketcluster-client",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\factory.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\get-params\\index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\get-params\index.js
      return function (require, module, exports) {
/* global window */
var GetParams = function (func) {
	'use strict';

	if (typeof func !== 'function') {
		return [];
	}

	var patternComments = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var patternArguments = /([^\s,]+)/g;

	var funcString = func
		.toString()
		.replace(patternComments, '');

	var result = funcString
		.slice(
			funcString.indexOf('(') + 1,
			funcString.indexOf(')')
		)
		.match(patternArguments);

	if (result === null) {
		return [];
	}

	return result;
};

if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
	module.exports = GetParams;
}

if (typeof window !== 'undefined') {
	window.GetParams = GetParams;
}

      };
    };
  }
}, {package:"get-params",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\get-params\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\nanoid\\non-secure\\index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\nanoid\non-secure\index.js
      return function (require, module, exports) {
// This alphabet uses a-z A-Z 0-9 _- symbols.
// Symbols are generated for smaller size.
// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA
var url = '-_'
// Loop from 36 to 0 (from z to a and 9 to 0 in Base36).
var i = 36
while (i--) {
  // 36 is radix. Number.prototype.toString(36) returns number
  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.
  url += i.toString(36)
}
// Loop from 36 to 10 (from Z to A in Base36).
i = 36
while (i-- - 10) {
  url += i.toString(36).toUpperCase()
}

/**
 * Generate URL-friendly unique ID. This method use non-secure predictable
 * random generator with bigger collision probability.
 *
 * @param {number} [size=21] The number of symbols in ID.
 *
 * @return {string} Random string.
 *
 * @example
 * const nanoid = require('nanoid/non-secure')
 * model.id = nanoid() //=> "Uakgb_J5m9g-0JDMbcJqL"
 *
 * @name nonSecure
 * @function
 */
module.exports = function (size) {
  var id = ''
  i = size || 21
  // Compact alternative for `for (var i = 0; i < size; i++)`
  while (i--) {
    // `| 0` is compact and faster alternative for `Math.floor()`
    id += url[Math.random() * 64 | 0]
  }
  return id
}

      };
    };
  }
}, {package:"nanoid",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\nanoid\\non-secure\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remotedev-serialize\\immutable\\serialize.js", {"../constants/options":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remotedev-serialize\\constants\\options.js","../helpers":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remotedev-serialize\\helpers\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\remotedev-serialize\immutable\serialize.js
      return function (require, module, exports) {
var helpers = require('../helpers');
var mark = helpers.mark;
var extract = helpers.extract;
var refer = helpers.refer;
var options = require('../constants/options');

module.exports = function serialize(
  Immutable,
  refs,
  customReplacer,
  customReviver
) {
  function replacer(key, value) {
    if (value instanceof Immutable.Record)
      return refer(value, 'ImmutableRecord', 'toObject', refs);
    if (value instanceof Immutable.Range)
      return extract(value, 'ImmutableRange');
    if (value instanceof Immutable.Repeat)
      return extract(value, 'ImmutableRepeat');
    if (Immutable.OrderedMap.isOrderedMap(value))
      return mark(value, 'ImmutableOrderedMap', 'toObject');
    if (Immutable.Map.isMap(value))
      return mark(value, 'ImmutableMap', 'toObject');
    if (Immutable.List.isList(value))
      return mark(value, 'ImmutableList', 'toArray');
    if (Immutable.OrderedSet.isOrderedSet(value))
      return mark(value, 'ImmutableOrderedSet', 'toArray');
    if (Immutable.Set.isSet(value))
      return mark(value, 'ImmutableSet', 'toArray');
    if (Immutable.Seq.isSeq(value))
      return mark(value, 'ImmutableSeq', 'toArray');
    if (Immutable.Stack.isStack(value))
      return mark(value, 'ImmutableStack', 'toArray');
    return value;
  }

  function reviver(key, value) {
    if (
      typeof value === 'object' &&
      value !== null &&
      '__serializedType__' in value
    ) {
      var data = value.data;
      switch (value.__serializedType__) {
        case 'ImmutableMap':
          return Immutable.Map(data);
        case 'ImmutableOrderedMap':
          return Immutable.OrderedMap(data);
        case 'ImmutableList':
          return Immutable.List(data);
        case 'ImmutableRange':
          return Immutable.Range(data._start, data._end, data._step);
        case 'ImmutableRepeat':
          return Immutable.Repeat(data._value, data.size);
        case 'ImmutableSet':
          return Immutable.Set(data);
        case 'ImmutableOrderedSet':
          return Immutable.OrderedSet(data);
        case 'ImmutableSeq':
          return Immutable.Seq(data);
        case 'ImmutableStack':
          return Immutable.Stack(data);
        case 'ImmutableRecord':
          return refs && refs[value.__serializedRef__]
            ? new refs[value.__serializedRef__](data)
            : Immutable.Map(data);
        default:
          return data;
      }
    }
    return value;
  }

  return {
    replacer: customReplacer
      ? function (key, value) {
          return customReplacer(key, value, replacer);
        }
      : replacer,
    reviver: customReviver
      ? function (key, value) {
          return customReviver(key, value, reviver);
        }
      : reviver,
    options: options,
  };
};

      };
    };
  }
}, {package:"remotedev-serialize",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remotedev-serialize\\immutable\\serialize.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-instrument\\lib\\instrument.js", {"_process":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\process\\browser.js","lodash/difference":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\difference.js","lodash/isPlainObject":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isPlainObject.js","lodash/union":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\union.js","symbol-observable":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-instrument\\node_modules\\symbol-observable\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\redux-devtools-instrument\lib\instrument.js
      return function (require, module, exports) {
(function (process){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.liftAction = liftAction;
exports.liftReducerWith = liftReducerWith;
exports.unliftState = unliftState;
exports.unliftStore = unliftStore;
exports["default"] = instrument;
exports.INIT_ACTION = exports.ActionCreators = exports.ActionTypes = void 0;

var _difference = _interopRequireDefault(require("lodash/difference"));

var _union = _interopRequireDefault(require("lodash/union"));

var _isPlainObject = _interopRequireDefault(require("lodash/isPlainObject"));

var _symbolObservable = _interopRequireDefault(require("symbol-observable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var ActionTypes = {
  PERFORM_ACTION: 'PERFORM_ACTION',
  RESET: 'RESET',
  ROLLBACK: 'ROLLBACK',
  COMMIT: 'COMMIT',
  SWEEP: 'SWEEP',
  TOGGLE_ACTION: 'TOGGLE_ACTION',
  SET_ACTIONS_ACTIVE: 'SET_ACTIONS_ACTIVE',
  JUMP_TO_STATE: 'JUMP_TO_STATE',
  JUMP_TO_ACTION: 'JUMP_TO_ACTION',
  REORDER_ACTION: 'REORDER_ACTION',
  IMPORT_STATE: 'IMPORT_STATE',
  LOCK_CHANGES: 'LOCK_CHANGES',
  PAUSE_RECORDING: 'PAUSE_RECORDING'
};
exports.ActionTypes = ActionTypes;
var isChrome = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && (typeof window.chrome !== 'undefined' || typeof window.process !== 'undefined' && window.process.type === 'renderer');
var isChromeOrNode = isChrome || typeof process !== 'undefined' && process.release && process.release.name === 'node';

/**
 * Action creators to change the History state.
 */
var ActionCreators = {
  performAction: function performAction(action, trace, traceLimit, // eslint-disable-next-line @typescript-eslint/ban-types
  toExcludeFromTrace) {
    if (!(0, _isPlainObject["default"])(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    var stack;

    if (trace) {
      var extraFrames = 0;

      if (typeof trace === 'function') {
        stack = trace(action);
      } else {
        var error = Error();
        var prevStackTraceLimit;

        if (Error.captureStackTrace && isChromeOrNode) {
          // avoid error-polyfill
          if (traceLimit && Error.stackTraceLimit < traceLimit) {
            prevStackTraceLimit = Error.stackTraceLimit;
            Error.stackTraceLimit = traceLimit;
          }

          Error.captureStackTrace(error, toExcludeFromTrace);
        } else {
          extraFrames = 3;
        }

        stack = error.stack;
        if (prevStackTraceLimit) Error.stackTraceLimit = prevStackTraceLimit;

        if (extraFrames || typeof Error.stackTraceLimit !== 'number' || traceLimit && Error.stackTraceLimit > traceLimit) {
          if (stack != null) {
            var frames = stack.split('\n');

            if (traceLimit && frames.length > traceLimit) {
              stack = frames.slice(0, traceLimit + extraFrames + (frames[0].startsWith('Error') ? 1 : 0)).join('\n');
            }
          }
        }
      }
    }

    return {
      type: ActionTypes.PERFORM_ACTION,
      action: action,
      timestamp: Date.now(),
      stack: stack
    };
  },
  reset: function reset() {
    return {
      type: ActionTypes.RESET,
      timestamp: Date.now()
    };
  },
  rollback: function rollback() {
    return {
      type: ActionTypes.ROLLBACK,
      timestamp: Date.now()
    };
  },
  commit: function commit() {
    return {
      type: ActionTypes.COMMIT,
      timestamp: Date.now()
    };
  },
  sweep: function sweep() {
    return {
      type: ActionTypes.SWEEP
    };
  },
  toggleAction: function toggleAction(id) {
    return {
      type: ActionTypes.TOGGLE_ACTION,
      id: id
    };
  },
  setActionsActive: function setActionsActive(start, end) {
    var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    return {
      type: ActionTypes.SET_ACTIONS_ACTIVE,
      start: start,
      end: end,
      active: active
    };
  },
  reorderAction: function reorderAction(actionId, beforeActionId) {
    return {
      type: ActionTypes.REORDER_ACTION,
      actionId: actionId,
      beforeActionId: beforeActionId
    };
  },
  jumpToState: function jumpToState(index) {
    return {
      type: ActionTypes.JUMP_TO_STATE,
      index: index
    };
  },
  jumpToAction: function jumpToAction(actionId) {
    return {
      type: ActionTypes.JUMP_TO_ACTION,
      actionId: actionId
    };
  },
  importState: function importState(nextLiftedState, noRecompute) {
    return {
      type: ActionTypes.IMPORT_STATE,
      nextLiftedState: nextLiftedState,
      noRecompute: noRecompute
    };
  },
  lockChanges: function lockChanges(status) {
    return {
      type: ActionTypes.LOCK_CHANGES,
      status: status
    };
  },
  pauseRecording: function pauseRecording(status) {
    return {
      type: ActionTypes.PAUSE_RECORDING,
      status: status
    };
  }
};
exports.ActionCreators = ActionCreators;
var INIT_ACTION = {
  type: '@@INIT'
};
/**
 * Computes the next entry with exceptions catching.
 */

exports.INIT_ACTION = INIT_ACTION;

function computeWithTryCatch(reducer, action, state) {
  var nextState = state;
  var nextError;

  try {
    nextState = reducer(state, action);
  } catch (err) {
    nextError = err.toString();

    if (isChrome) {
      // In Chrome, rethrowing provides better source map support
      setTimeout(function () {
        throw err;
      });
    } else {
      console.error(err); // eslint-disable-line no-console
    }
  }

  return {
    state: nextState,
    error: nextError
  };
}
/**
 * Computes the next entry in the log by applying an action.
 */


function computeNextEntry(reducer, action, state, shouldCatchErrors) {
  if (!shouldCatchErrors) {
    return {
      state: reducer(state, action)
    };
  }

  return computeWithTryCatch(reducer, action, state);
}
/**
 * Runs the reducer on invalidated actions to get a fresh computation log.
 */


function recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, shouldCatchErrors) {
  // Optimization: exit early and return the same reference
  // if we know nothing could have changed.
  if (!computedStates || minInvalidatedStateIndex === -1 || minInvalidatedStateIndex >= computedStates.length && computedStates.length === stagedActionIds.length) {
    return computedStates;
  }

  var nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);

  for (var i = minInvalidatedStateIndex; i < stagedActionIds.length; i++) {
    var _actionId = stagedActionIds[i];
    var _action = actionsById[_actionId].action;
    var previousEntry = nextComputedStates[i - 1];
    var previousState = previousEntry ? previousEntry.state : committedState;
    var shouldSkip = skippedActionIds.indexOf(_actionId) > -1;
    var entry = void 0;

    if (shouldSkip) {
      entry = previousEntry;
    } else {
      if (shouldCatchErrors && previousEntry && previousEntry.error) {
        entry = {
          state: previousState,
          error: 'Interrupted by an error up the chain'
        };
      } else {
        entry = computeNextEntry(reducer, _action, previousState, shouldCatchErrors);
      }
    }

    nextComputedStates.push(entry);
  }

  return nextComputedStates;
}
/**
 * Lifts an app's action into an action on the lifted store.
 */


function liftAction(action, trace, traceLimit, // eslint-disable-next-line @typescript-eslint/ban-types
toExcludeFromTrace) {
  return ActionCreators.performAction(action, trace, traceLimit, toExcludeFromTrace);
}

function isArray(nextLiftedState) {
  return Array.isArray(nextLiftedState);
}

/**
 * Creates a history state reducer from an app's reducer.
 */
function liftReducerWith(reducer, initialCommittedState, monitorReducer, options) {
  var initialLiftedState = {
    monitorState: monitorReducer(undefined, {}),
    nextActionId: 1,
    actionsById: {
      0: liftAction(INIT_ACTION)
    },
    stagedActionIds: [0],
    skippedActionIds: [],
    committedState: initialCommittedState,
    currentStateIndex: 0,
    computedStates: [],
    isLocked: options.shouldStartLocked === true,
    isPaused: options.shouldRecordChanges === false
  };
  /**
   * Manages how the history actions modify the history state.
   */

  return function (liftedState, liftedAction) {
    var _ref = liftedState || initialLiftedState,
        monitorState = _ref.monitorState,
        actionsById = _ref.actionsById,
        nextActionId = _ref.nextActionId,
        stagedActionIds = _ref.stagedActionIds,
        skippedActionIds = _ref.skippedActionIds,
        committedState = _ref.committedState,
        currentStateIndex = _ref.currentStateIndex,
        computedStates = _ref.computedStates,
        isLocked = _ref.isLocked,
        isPaused = _ref.isPaused;

    if (!liftedState) {
      // Prevent mutating initialLiftedState
      actionsById = _objectSpread({}, actionsById);
    }

    function commitExcessActions(n) {
      // Auto-commits n-number of excess actions.
      var excess = n;
      var idsToDelete = stagedActionIds.slice(1, excess + 1);

      for (var i = 0; i < idsToDelete.length; i++) {
        if (computedStates[i + 1].error) {
          // Stop if error is found. Commit actions up to error.
          excess = i;
          idsToDelete = stagedActionIds.slice(1, excess + 1);
          break;
        } else {
          delete actionsById[idsToDelete[i]];
        }
      }

      skippedActionIds = skippedActionIds.filter(function (id) {
        return idsToDelete.indexOf(id) === -1;
      });
      stagedActionIds = [0].concat(_toConsumableArray(stagedActionIds.slice(excess + 1)));
      committedState = computedStates[excess].state;
      computedStates = computedStates.slice(excess);
      currentStateIndex = currentStateIndex > excess ? currentStateIndex - excess : 0;
    }

    function computePausedAction(shouldInit) {
      var computedState;

      if (shouldInit) {
        computedState = computedStates[currentStateIndex];
        monitorState = monitorReducer(monitorState, liftedAction);
      } else {
        computedState = computeNextEntry(reducer, liftedAction.action, computedStates[currentStateIndex].state, false);
      }

      if (!options.pauseActionType || nextActionId === 1) {
        return {
          monitorState: monitorState,
          actionsById: {
            0: liftAction(INIT_ACTION)
          },
          nextActionId: 1,
          stagedActionIds: [0],
          skippedActionIds: [],
          committedState: computedState.state,
          currentStateIndex: 0,
          computedStates: [computedState],
          isLocked: isLocked,
          isPaused: true
        };
      }

      if (shouldInit) {
        if (currentStateIndex === stagedActionIds.length - 1) {
          currentStateIndex++;
        }

        stagedActionIds = [].concat(_toConsumableArray(stagedActionIds), [nextActionId]);
        nextActionId++;
      }

      return {
        monitorState: monitorState,
        actionsById: _objectSpread(_objectSpread({}, actionsById), {}, _defineProperty({}, nextActionId - 1, liftAction({
          type: options.pauseActionType
        }))),
        nextActionId: nextActionId,
        stagedActionIds: stagedActionIds,
        skippedActionIds: skippedActionIds,
        committedState: committedState,
        currentStateIndex: currentStateIndex,
        computedStates: [].concat(_toConsumableArray(computedStates.slice(0, stagedActionIds.length - 1)), [computedState]),
        isLocked: isLocked,
        isPaused: true
      };
    } // By default, aggressively recompute every state whatever happens.
    // This has O(n) performance, so we'll override this to a sensible
    // value whenever we feel like we don't have to recompute the states.


    var minInvalidatedStateIndex = 0; // maxAge number can be changed dynamically

    var maxAge = options.maxAge;
    if (typeof maxAge === 'function') maxAge = maxAge(liftedAction, liftedState);

    if (/^@@redux\/(INIT|REPLACE)/.test(liftedAction.type)) {
      if (options.shouldHotReload === false) {
        actionsById = {
          0: liftAction(INIT_ACTION)
        };
        nextActionId = 1;
        stagedActionIds = [0];
        skippedActionIds = [];
        committedState = computedStates.length === 0 ? initialCommittedState : computedStates[currentStateIndex].state;
        currentStateIndex = 0;
        computedStates = [];
      } // Recompute states on hot reload and init.


      minInvalidatedStateIndex = 0;

      if (maxAge && stagedActionIds.length > maxAge) {
        // States must be recomputed before committing excess.
        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, options.shouldCatchErrors);
        commitExcessActions(stagedActionIds.length - maxAge); // Avoid double computation.

        minInvalidatedStateIndex = Infinity;
      }
    } else {
      switch (liftedAction.type) {
        case ActionTypes.PERFORM_ACTION:
          {
            if (isLocked) return liftedState || initialLiftedState;
            if (isPaused) return computePausedAction(); // Auto-commit as new actions come in.

            if (maxAge && stagedActionIds.length >= maxAge) {
              commitExcessActions(stagedActionIds.length - maxAge + 1);
            }

            if (currentStateIndex === stagedActionIds.length - 1) {
              currentStateIndex++;
            }

            var _actionId2 = nextActionId++; // Mutation! This is the hottest path, and we optimize on purpose.
            // It is safe because we set a new key in a cache dictionary.


            actionsById[_actionId2] = liftedAction;
            stagedActionIds = [].concat(_toConsumableArray(stagedActionIds), [_actionId2]); // Optimization: we know that only the new action needs computing.

            minInvalidatedStateIndex = stagedActionIds.length - 1;
            break;
          }

        case ActionTypes.RESET:
          {
            // Get back to the state the store was created with.
            actionsById = {
              0: liftAction(INIT_ACTION)
            };
            nextActionId = 1;
            stagedActionIds = [0];
            skippedActionIds = [];
            committedState = initialCommittedState;
            currentStateIndex = 0;
            computedStates = [];
            break;
          }

        case ActionTypes.COMMIT:
          {
            // Consider the last committed state the new starting point.
            // Squash any staged actions into a single committed state.
            actionsById = {
              0: liftAction(INIT_ACTION)
            };
            nextActionId = 1;
            stagedActionIds = [0];
            skippedActionIds = [];
            committedState = computedStates[currentStateIndex].state;
            currentStateIndex = 0;
            computedStates = [];
            break;
          }

        case ActionTypes.ROLLBACK:
          {
            // Forget about any staged actions.
            // Start again from the last committed state.
            actionsById = {
              0: liftAction(INIT_ACTION)
            };
            nextActionId = 1;
            stagedActionIds = [0];
            skippedActionIds = [];
            currentStateIndex = 0;
            computedStates = [];
            break;
          }

        case ActionTypes.TOGGLE_ACTION:
          {
            // Toggle whether an action with given ID is skipped.
            // Being skipped means it is a no-op during the computation.
            var _actionId3 = liftedAction.id;
            var index = skippedActionIds.indexOf(_actionId3);

            if (index === -1) {
              skippedActionIds = [_actionId3].concat(_toConsumableArray(skippedActionIds));
            } else {
              skippedActionIds = skippedActionIds.filter(function (id) {
                return id !== _actionId3;
              });
            } // Optimization: we know history before this action hasn't changed


            minInvalidatedStateIndex = stagedActionIds.indexOf(_actionId3);
            break;
          }

        case ActionTypes.SET_ACTIONS_ACTIVE:
          {
            // Toggle whether an action with given ID is skipped.
            // Being skipped means it is a no-op during the computation.
            var start = liftedAction.start,
                end = liftedAction.end,
                active = liftedAction.active;
            var actionIds = [];

            for (var i = start; i < end; i++) {
              actionIds.push(i);
            }

            if (active) {
              skippedActionIds = (0, _difference["default"])(skippedActionIds, actionIds);
            } else {
              skippedActionIds = (0, _union["default"])(skippedActionIds, actionIds);
            } // Optimization: we know history before this action hasn't changed


            minInvalidatedStateIndex = stagedActionIds.indexOf(start);
            break;
          }

        case ActionTypes.JUMP_TO_STATE:
          {
            // Without recomputing anything, move the pointer that tell us
            // which state is considered the current one. Useful for sliders.
            currentStateIndex = liftedAction.index; // Optimization: we know the history has not changed.

            minInvalidatedStateIndex = Infinity;
            break;
          }

        case ActionTypes.JUMP_TO_ACTION:
          {
            // Jumps to a corresponding state to a specific action.
            // Useful when filtering actions.
            var _index = stagedActionIds.indexOf(liftedAction.actionId);

            if (_index !== -1) currentStateIndex = _index;
            minInvalidatedStateIndex = Infinity;
            break;
          }

        case ActionTypes.SWEEP:
          {
            // Forget any actions that are currently being skipped.
            stagedActionIds = (0, _difference["default"])(stagedActionIds, skippedActionIds);
            skippedActionIds = [];
            currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);
            break;
          }

        case ActionTypes.REORDER_ACTION:
          {
            // Recompute actions in a new order.
            var _actionId4 = liftedAction.actionId;
            var idx = stagedActionIds.indexOf(_actionId4); // do nothing in case the action is already removed or trying to move the first action

            if (idx < 1) break;
            var beforeActionId = liftedAction.beforeActionId;
            var newIdx = stagedActionIds.indexOf(beforeActionId);

            if (newIdx < 1) {
              // move to the beginning or to the end
              var count = stagedActionIds.length;
              newIdx = beforeActionId > stagedActionIds[count - 1] ? count : 1;
            }

            var diff = idx - newIdx;

            if (diff > 0) {
              // move left
              stagedActionIds = [].concat(_toConsumableArray(stagedActionIds.slice(0, newIdx)), [_actionId4], _toConsumableArray(stagedActionIds.slice(newIdx, idx)), _toConsumableArray(stagedActionIds.slice(idx + 1)));
              minInvalidatedStateIndex = newIdx;
            } else if (diff < 0) {
              // move right
              stagedActionIds = [].concat(_toConsumableArray(stagedActionIds.slice(0, idx)), _toConsumableArray(stagedActionIds.slice(idx + 1, newIdx)), [_actionId4], _toConsumableArray(stagedActionIds.slice(newIdx)));
              minInvalidatedStateIndex = idx;
            }

            break;
          }

        case ActionTypes.IMPORT_STATE:
          {
            if (isArray(liftedAction.nextLiftedState)) {
              // recompute array of actions
              actionsById = {
                0: liftAction(INIT_ACTION)
              };
              nextActionId = 1;
              stagedActionIds = [0];
              skippedActionIds = [];
              currentStateIndex = liftedAction.nextLiftedState.length;
              computedStates = [];
              committedState = liftedAction.preloadedState;
              minInvalidatedStateIndex = 0; // iterate through actions

              liftedAction.nextLiftedState.forEach(function (action) {
                actionsById[nextActionId] = liftAction(action, options.trace || options.shouldIncludeCallstack);
                stagedActionIds.push(nextActionId);
                nextActionId++;
              });
            } else {
              // Completely replace everything.
              var _liftedAction$nextLif = liftedAction.nextLiftedState;
              monitorState = _liftedAction$nextLif.monitorState;
              actionsById = _liftedAction$nextLif.actionsById;
              nextActionId = _liftedAction$nextLif.nextActionId;
              stagedActionIds = _liftedAction$nextLif.stagedActionIds;
              skippedActionIds = _liftedAction$nextLif.skippedActionIds;
              committedState = _liftedAction$nextLif.committedState;
              currentStateIndex = _liftedAction$nextLif.currentStateIndex;
              computedStates = _liftedAction$nextLif.computedStates;

              if (liftedAction.noRecompute) {
                minInvalidatedStateIndex = Infinity;
              }
            }

            break;
          }

        case ActionTypes.LOCK_CHANGES:
          {
            isLocked = liftedAction.status;
            minInvalidatedStateIndex = Infinity;
            break;
          }

        case ActionTypes.PAUSE_RECORDING:
          {
            isPaused = liftedAction.status;

            if (isPaused) {
              return computePausedAction(true);
            } // Commit when unpausing


            actionsById = {
              0: liftAction(INIT_ACTION)
            };
            nextActionId = 1;
            stagedActionIds = [0];
            skippedActionIds = [];
            committedState = computedStates[currentStateIndex].state;
            currentStateIndex = 0;
            computedStates = [];
            break;
          }

        default:
          {
            // If the action is not recognized, it's a monitor action.
            // Optimization: a monitor action can't change history.
            minInvalidatedStateIndex = Infinity;
            break;
          }
      }
    }

    computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, options.shouldCatchErrors);
    monitorState = monitorReducer(monitorState, liftedAction);
    return {
      monitorState: monitorState,
      actionsById: actionsById,
      nextActionId: nextActionId,
      stagedActionIds: stagedActionIds,
      skippedActionIds: skippedActionIds,
      committedState: committedState,
      currentStateIndex: currentStateIndex,
      computedStates: computedStates,
      isLocked: isLocked,
      isPaused: isPaused
    };
  };
}
/**
 * Provides an app's view into the state of the lifted store.
 */


function unliftState(liftedState) {
  var computedStates = liftedState.computedStates,
      currentStateIndex = liftedState.currentStateIndex;
  var state = computedStates[currentStateIndex].state;
  return state;
}

/**
 * Provides an app's view into the lifted store.
 */
function unliftStore(liftedStore, liftReducer, options) {
  var lastDefinedState;
  var trace = options.trace || options.shouldIncludeCallstack;
  var traceLimit = options.traceLimit || 10;

  function getState() {
    var state = unliftState(liftedStore.getState());

    if (state !== undefined) {
      lastDefinedState = state;
    }

    return lastDefinedState;
  }

  function dispatch(action) {
    liftedStore.dispatch(liftAction(action, trace, traceLimit, dispatch));
    return action;
  }

  return _objectSpread(_objectSpread({}, liftedStore), {}, _defineProperty({
    liftedStore: liftedStore,
    dispatch: dispatch,
    getState: getState,
    replaceReducer: function replaceReducer(nextReducer) {
      liftedStore.replaceReducer(liftReducer(nextReducer));
    }
  }, _symbolObservable["default"], function () {
    return _objectSpread(_objectSpread({}, liftedStore[_symbolObservable["default"]]()), {}, _defineProperty({
      subscribe: function subscribe(observer) {
        if (_typeof(observer) !== 'object') {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = liftedStore.subscribe(observeState);
        return {
          unsubscribe: unsubscribe
        };
      }
    }, _symbolObservable["default"], function () {
      return this;
    }));
  }));
}

/**
 * Redux instrumentation store enhancer.
 */
function instrument() {
  var monitorReducer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
    return null;
  };
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof options.maxAge === 'number' && options.maxAge < 2) {
    throw new Error('DevTools.instrument({ maxAge }) option, if specified, ' + 'may not be less than 2.');
  }

  return function (createStore) {
    return function (reducer, initialState) {
      function liftReducer(r) {
        if (typeof r !== 'function') {
          if (r && typeof r["default"] === 'function') {
            throw new Error('Expected the reducer to be a function. ' + 'Instead got an object with a "default" field. ' + 'Did you pass a module instead of the default export? ' + 'Try passing require(...).default instead.');
          }

          throw new Error('Expected the reducer to be a function.');
        }

        return liftReducerWith(r, initialState, monitorReducer, options);
      }

      var liftedStore = createStore(liftReducer(reducer));

      if (liftedStore.liftedStore) {
        throw new Error('DevTools instrumentation should not be applied more than once. ' + 'Check your store configuration.');
      }

      return unliftStore(liftedStore, liftReducer, options);
    };
  };
}

}).call(this)}).call(this,require('_process'))

      };
    };
  }
}, {package:"redux-devtools-instrument",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-instrument\\lib\\instrument.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\wrapMapToProps.js", {"../utils/verifyPlainObject":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\verifyPlainObject.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\connect\wrapMapToProps.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.wrapMapToPropsConstant = wrapMapToPropsConstant;
exports.getDependsOnOwnProps = getDependsOnOwnProps;
exports.wrapMapToPropsFunc = wrapMapToPropsFunc;

var _verifyPlainObject = _interopRequireDefault(require("../utils/verifyPlainObject"));

function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }

    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
//
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..


function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
// this function wraps mapToProps in a proxy function which does several things:
//
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//


function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    }; // allow detectFactoryAndVerify to get ownProps


    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      if ("development" !== 'production') (0, _verifyPlainObject["default"])(props, displayName, methodName);
      return props;
    };

    return proxy;
  };
}
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\wrapMapToProps.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\verifyPlainObject.js", {"./isPlainObject":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\isPlainObject.js","./warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\warning.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\utils\verifyPlainObject.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = verifyPlainObject;

var _isPlainObject = _interopRequireDefault(require("./isPlainObject"));

var _warning = _interopRequireDefault(require("./warning"));

function verifyPlainObject(value, displayName, methodName) {
  if (!(0, _isPlainObject["default"])(value)) {
    (0, _warning["default"])(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
  }
}
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\verifyPlainObject.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\verifySubselectors.js", {"../utils/warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\warning.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\connect\verifySubselectors.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = verifySubselectors;

var _warning = _interopRequireDefault(require("../utils/warning"));

function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
    if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) {
      (0, _warning["default"])("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    }
  }
}

function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, 'mapStateToProps', displayName);
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
  verify(mergeProps, 'mergeProps', displayName);
}
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\connect\\verifySubselectors.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\cjs\\react-router.js", {"history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\node_modules\\history\\index.js","hoist-non-react-statics":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\hoist-non-react-statics\\dist\\hoist-non-react-statics.cjs.js","mini-create-react-context":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\mini-create-react-context\\dist\\cjs\\index.js","path-to-regexp":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\path-to-regexp\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-is":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\index.js","tiny-invariant":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-invariant\\dist\\tiny-invariant.cjs.js","tiny-warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router\cjs\react-router.js
      return function (require, module, exports) {
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var history = require('history');
var warning = _interopDefault(require('tiny-warning'));
var createContext = _interopDefault(require('mini-create-react-context'));
var invariant = _interopDefault(require('tiny-invariant'));
var pathToRegexp = _interopDefault(require('path-to-regexp'));
var reactIs = require('react-is');
var hoistStatics = _interopDefault(require('hoist-non-react-statics'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

// TODO: Replace with React.createContext once we can assume React 16+

var createNamedContext = function createNamedContext(name) {
  var context = createContext();
  context.displayName = name;
  return context;
};

var context =
/*#__PURE__*/
createNamedContext("Router");

/**
 * The public API for putting history on context.
 */

var Router =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Router, _React$Component);

  Router.computeRootMatch = function computeRootMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };

  function Router(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      location: props.history.location
    }; // This is a bit of a hack. We have to start listening for location
    // changes here in the constructor in case there are any <Redirect>s
    // on the initial render. If there are, they will replace/push when
    // they mount and since cDM fires in children before parents, we may
    // get a new location before the <Router> is mounted.

    _this._isMounted = false;
    _this._pendingLocation = null;

    if (!props.staticContext) {
      _this.unlisten = props.history.listen(function (location) {
        if (_this._isMounted) {
          _this.setState({
            location: location
          });
        } else {
          _this._pendingLocation = location;
        }
      });
    }

    return _this;
  }

  var _proto = Router.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this._isMounted = true;

    if (this._pendingLocation) {
      this.setState({
        location: this._pendingLocation
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.unlisten) this.unlisten();
  };

  _proto.render = function render() {
    return React.createElement(context.Provider, {
      children: this.props.children || null,
      value: {
        history: this.props.history,
        location: this.state.location,
        match: Router.computeRootMatch(this.state.location.pathname),
        staticContext: this.props.staticContext
      }
    });
  };

  return Router;
}(React.Component);

{
  Router.propTypes = {
    children: PropTypes.node,
    history: PropTypes.object.isRequired,
    staticContext: PropTypes.object
  };

  Router.prototype.componentDidUpdate = function (prevProps) {
     warning(prevProps.history === this.props.history, "You cannot change <Router history>") ;
  };
}

/**
 * The public API for a <Router> that stores location in memory.
 */

var MemoryRouter =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(MemoryRouter, _React$Component);

  function MemoryRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = history.createMemoryHistory(_this.props);
    return _this;
  }

  var _proto = MemoryRouter.prototype;

  _proto.render = function render() {
    return React.createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return MemoryRouter;
}(React.Component);

{
  MemoryRouter.propTypes = {
    initialEntries: PropTypes.array,
    initialIndex: PropTypes.number,
    getUserConfirmation: PropTypes.func,
    keyLength: PropTypes.number,
    children: PropTypes.node
  };

  MemoryRouter.prototype.componentDidMount = function () {
     warning(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.") ;
  };
}

var Lifecycle =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Lifecycle, _React$Component);

  function Lifecycle() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Lifecycle.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.onMount) this.props.onMount.call(this, this);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.props.onUnmount) this.props.onUnmount.call(this, this);
  };

  _proto.render = function render() {
    return null;
  };

  return Lifecycle;
}(React.Component);

/**
 * The public API for prompting the user before navigating away from a screen.
 */

function Prompt(_ref) {
  var message = _ref.message,
      _ref$when = _ref.when,
      when = _ref$when === void 0 ? true : _ref$when;
  return React.createElement(context.Consumer, null, function (context) {
    !context ?  invariant(false, "You should not use <Prompt> outside a <Router>")  : void 0;
    if (!when || context.staticContext) return null;
    var method = context.history.block;
    return React.createElement(Lifecycle, {
      onMount: function onMount(self) {
        self.release = method(message);
      },
      onUpdate: function onUpdate(self, prevProps) {
        if (prevProps.message !== message) {
          self.release();
          self.release = method(message);
        }
      },
      onUnmount: function onUnmount(self) {
        self.release();
      },
      message: message
    });
  });
}

{
  var messageType = PropTypes.oneOfType([PropTypes.func, PropTypes.string]);
  Prompt.propTypes = {
    when: PropTypes.bool,
    message: messageType.isRequired
  };
}

var cache = {};
var cacheLimit = 10000;
var cacheCount = 0;

function compilePath(path) {
  if (cache[path]) return cache[path];
  var generator = pathToRegexp.compile(path);

  if (cacheCount < cacheLimit) {
    cache[path] = generator;
    cacheCount++;
  }

  return generator;
}
/**
 * Public API for generating a URL pathname from a path and parameters.
 */


function generatePath(path, params) {
  if (path === void 0) {
    path = "/";
  }

  if (params === void 0) {
    params = {};
  }

  return path === "/" ? path : compilePath(path)(params, {
    pretty: true
  });
}

/**
 * The public API for navigating programmatically with a component.
 */

function Redirect(_ref) {
  var computedMatch = _ref.computedMatch,
      to = _ref.to,
      _ref$push = _ref.push,
      push = _ref$push === void 0 ? false : _ref$push;
  return React.createElement(context.Consumer, null, function (context) {
    !context ?  invariant(false, "You should not use <Redirect> outside a <Router>")  : void 0;
    var history$1 = context.history,
        staticContext = context.staticContext;
    var method = push ? history$1.push : history$1.replace;
    var location = history.createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({}, to, {
      pathname: generatePath(to.pathname, computedMatch.params)
    }) : to); // When rendering in a static context,
    // set the new location immediately.

    if (staticContext) {
      method(location);
      return null;
    }

    return React.createElement(Lifecycle, {
      onMount: function onMount() {
        method(location);
      },
      onUpdate: function onUpdate(self, prevProps) {
        var prevLocation = history.createLocation(prevProps.to);

        if (!history.locationsAreEqual(prevLocation, _extends({}, location, {
          key: prevLocation.key
        }))) {
          method(location);
        }
      },
      to: to
    });
  });
}

{
  Redirect.propTypes = {
    push: PropTypes.bool,
    from: PropTypes.string,
    to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired
  };
}

var cache$1 = {};
var cacheLimit$1 = 10000;
var cacheCount$1 = 0;

function compilePath$1(path, options) {
  var cacheKey = "" + options.end + options.strict + options.sensitive;
  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
  if (pathCache[path]) return pathCache[path];
  var keys = [];
  var regexp = pathToRegexp(path, keys, options);
  var result = {
    regexp: regexp,
    keys: keys
  };

  if (cacheCount$1 < cacheLimit$1) {
    pathCache[path] = result;
    cacheCount$1++;
  }

  return result;
}
/**
 * Public API for matching a URL pathname to a path.
 */


function matchPath(pathname, options) {
  if (options === void 0) {
    options = {};
  }

  if (typeof options === "string" || Array.isArray(options)) {
    options = {
      path: options
    };
  }

  var _options = options,
      path = _options.path,
      _options$exact = _options.exact,
      exact = _options$exact === void 0 ? false : _options$exact,
      _options$strict = _options.strict,
      strict = _options$strict === void 0 ? false : _options$strict,
      _options$sensitive = _options.sensitive,
      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
  var paths = [].concat(path);
  return paths.reduce(function (matched, path) {
    if (!path && path !== "") return null;
    if (matched) return matched;

    var _compilePath = compilePath$1(path, {
      end: exact,
      strict: strict,
      sensitive: sensitive
    }),
        regexp = _compilePath.regexp,
        keys = _compilePath.keys;

    var match = regexp.exec(pathname);
    if (!match) return null;
    var url = match[0],
        values = match.slice(1);
    var isExact = pathname === url;
    if (exact && !isExact) return null;
    return {
      path: path,
      // the path used to match
      url: path === "/" && url === "" ? "/" : url,
      // the matched portion of the URL
      isExact: isExact,
      // whether or not we matched exactly
      params: keys.reduce(function (memo, key, index) {
        memo[key.name] = values[index];
        return memo;
      }, {})
    };
  }, null);
}

function isEmptyChildren(children) {
  return React.Children.count(children) === 0;
}

function evalChildrenDev(children, props, path) {
  var value = children(props);
   warning(value !== undefined, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`") ;
  return value || null;
}
/**
 * The public API for matching a single path and rendering.
 */


var Route =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Route, _React$Component);

  function Route() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Route.prototype;

  _proto.render = function render() {
    var _this = this;

    return React.createElement(context.Consumer, null, function (context$1) {
      !context$1 ?  invariant(false, "You should not use <Route> outside a <Router>")  : void 0;
      var location = _this.props.location || context$1.location;
      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;

      var props = _extends({}, context$1, {
        location: location,
        match: match
      });

      var _this$props = _this.props,
          children = _this$props.children,
          component = _this$props.component,
          render = _this$props.render; // Preact uses an empty array as children by
      // default, so use null if that's the case.

      if (Array.isArray(children) && children.length === 0) {
        children = null;
      }

      return React.createElement(context.Provider, {
        value: props
      }, props.match ? children ? typeof children === "function" ?  evalChildrenDev(children, props, _this.props.path)  : children : component ? React.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  evalChildrenDev(children, props, _this.props.path)  : null);
    });
  };

  return Route;
}(React.Component);

{
  Route.propTypes = {
    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
    component: function component(props, propName) {
      if (props[propName] && !reactIs.isValidElementType(props[propName])) {
        return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
      }
    },
    exact: PropTypes.bool,
    location: PropTypes.object,
    path: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),
    render: PropTypes.func,
    sensitive: PropTypes.bool,
    strict: PropTypes.bool
  };

  Route.prototype.componentDidMount = function () {
     warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") ;
     warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") ;
     warning(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") ;
  };

  Route.prototype.componentDidUpdate = function (prevProps) {
     warning(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') ;
     warning(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') ;
  };
}

function addLeadingSlash(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
}

function addBasename(basename, location) {
  if (!basename) return location;
  return _extends({}, location, {
    pathname: addLeadingSlash(basename) + location.pathname
  });
}

function stripBasename(basename, location) {
  if (!basename) return location;
  var base = addLeadingSlash(basename);
  if (location.pathname.indexOf(base) !== 0) return location;
  return _extends({}, location, {
    pathname: location.pathname.substr(base.length)
  });
}

function createURL(location) {
  return typeof location === "string" ? location : history.createPath(location);
}

function staticHandler(methodName) {
  return function () {
      invariant(false, "You cannot %s with <StaticRouter>", methodName)  ;
  };
}

function noop() {}
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */


var StaticRouter =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(StaticRouter, _React$Component);

  function StaticRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.handlePush = function (location) {
      return _this.navigateTo(location, "PUSH");
    };

    _this.handleReplace = function (location) {
      return _this.navigateTo(location, "REPLACE");
    };

    _this.handleListen = function () {
      return noop;
    };

    _this.handleBlock = function () {
      return noop;
    };

    return _this;
  }

  var _proto = StaticRouter.prototype;

  _proto.navigateTo = function navigateTo(location, action) {
    var _this$props = this.props,
        _this$props$basename = _this$props.basename,
        basename = _this$props$basename === void 0 ? "" : _this$props$basename,
        _this$props$context = _this$props.context,
        context = _this$props$context === void 0 ? {} : _this$props$context;
    context.action = action;
    context.location = addBasename(basename, history.createLocation(location));
    context.url = createURL(context.location);
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        _this$props2$basename = _this$props2.basename,
        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,
        _this$props2$context = _this$props2.context,
        context = _this$props2$context === void 0 ? {} : _this$props2$context,
        _this$props2$location = _this$props2.location,
        location = _this$props2$location === void 0 ? "/" : _this$props2$location,
        rest = _objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);

    var history$1 = {
      createHref: function createHref(path) {
        return addLeadingSlash(basename + createURL(path));
      },
      action: "POP",
      location: stripBasename(basename, history.createLocation(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler("go"),
      goBack: staticHandler("goBack"),
      goForward: staticHandler("goForward"),
      listen: this.handleListen,
      block: this.handleBlock
    };
    return React.createElement(Router, _extends({}, rest, {
      history: history$1,
      staticContext: context
    }));
  };

  return StaticRouter;
}(React.Component);

{
  StaticRouter.propTypes = {
    basename: PropTypes.string,
    context: PropTypes.object,
    location: PropTypes.oneOfType([PropTypes.string, PropTypes.object])
  };

  StaticRouter.prototype.componentDidMount = function () {
     warning(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.") ;
  };
}

/**
 * The public API for rendering the first <Route> that matches.
 */

var Switch =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Switch, _React$Component);

  function Switch() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Switch.prototype;

  _proto.render = function render() {
    var _this = this;

    return React.createElement(context.Consumer, null, function (context) {
      !context ?  invariant(false, "You should not use <Switch> outside a <Router>")  : void 0;
      var location = _this.props.location || context.location;
      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
      // here because toArray adds keys to all child elements and we do not want
      // to trigger an unmount/remount for two <Route>s that render the same
      // component at different URLs.

      React.Children.forEach(_this.props.children, function (child) {
        if (match == null && React.isValidElement(child)) {
          element = child;
          var path = child.props.path || child.props.from;
          match = path ? matchPath(location.pathname, _extends({}, child.props, {
            path: path
          })) : context.match;
        }
      });
      return match ? React.cloneElement(element, {
        location: location,
        computedMatch: match
      }) : null;
    });
  };

  return Switch;
}(React.Component);

{
  Switch.propTypes = {
    children: PropTypes.node,
    location: PropTypes.object
  };

  Switch.prototype.componentDidUpdate = function (prevProps) {
     warning(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') ;
     warning(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') ;
  };
}

/**
 * A public higher-order component to access the imperative API
 */

function withRouter(Component) {
  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";

  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = _objectWithoutPropertiesLoose(props, ["wrappedComponentRef"]);

    return React.createElement(context.Consumer, null, function (context) {
      !context ?  invariant(false, "You should not use <" + displayName + " /> outside a <Router>")  : void 0;
      return React.createElement(Component, _extends({}, remainingProps, context, {
        ref: wrappedComponentRef
      }));
    });
  };

  C.displayName = displayName;
  C.WrappedComponent = Component;

  {
    C.propTypes = {
      wrappedComponentRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object])
    };
  }

  return hoistStatics(C, Component);
}

var useContext = React.useContext;
function useHistory() {
  {
    !(typeof useContext === "function") ?  invariant(false, "You must use React >= 16.8 in order to use useHistory()")  : void 0;
  }

  return useContext(context).history;
}
function useLocation() {
  {
    !(typeof useContext === "function") ?  invariant(false, "You must use React >= 16.8 in order to use useLocation()")  : void 0;
  }

  return useContext(context).location;
}
function useParams() {
  {
    !(typeof useContext === "function") ?  invariant(false, "You must use React >= 16.8 in order to use useParams()")  : void 0;
  }

  var match = useContext(context).match;
  return match ? match.params : {};
}
function useRouteMatch(path) {
  {
    !(typeof useContext === "function") ?  invariant(false, "You must use React >= 16.8 in order to use useRouteMatch()")  : void 0;
  }

  return path ? matchPath(useLocation().pathname, path) : useContext(context).match;
}

{
  if (typeof window !== "undefined") {
    var global = window;
    var key = "__react_router_build__";
    var buildNames = {
      cjs: "CommonJS",
      esm: "ES modules",
      umd: "UMD"
    };

    if (global[key] && global[key] !== "cjs") {
      var initialBuildName = buildNames[global[key]];
      var secondaryBuildName = buildNames["cjs"]; // TODO: Add link to article that explains in detail how to avoid
      // loading 2 different builds.

      throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
    }

    global[key] = "cjs";
  }
}

exports.MemoryRouter = MemoryRouter;
exports.Prompt = Prompt;
exports.Redirect = Redirect;
exports.Route = Route;
exports.Router = Router;
exports.StaticRouter = StaticRouter;
exports.Switch = Switch;
exports.__RouterContext = context;
exports.generatePath = generatePath;
exports.matchPath = matchPath;
exports.useHistory = useHistory;
exports.useLocation = useLocation;
exports.useParams = useParams;
exports.useRouteMatch = useRouteMatch;
exports.withRouter = withRouter;
//# sourceMappingURL=react-router.js.map

      };
    };
  }
}, {package:"react-router",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\cjs\\react-router.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\cjs\\react-router.min.js", {"history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\node_modules\\history\\index.js","hoist-non-react-statics":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\hoist-non-react-statics\\dist\\hoist-non-react-statics.cjs.js","mini-create-react-context":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\mini-create-react-context\\dist\\cjs\\index.js","path-to-regexp":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\path-to-regexp\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-is":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-is\\index.js","tiny-invariant":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-invariant\\dist\\tiny-invariant.cjs.js","tiny-warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router\cjs\react-router.min.js
      return function (require, module, exports) {
"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}Object.defineProperty(exports,"__esModule",{value:!0});var React=_interopDefault(require("react"));require("prop-types");var history=require("history");require("tiny-warning");var createContext=_interopDefault(require("mini-create-react-context")),invariant=_interopDefault(require("tiny-invariant")),pathToRegexp=_interopDefault(require("path-to-regexp"));require("react-is");var hoistStatics=_interopDefault(require("hoist-non-react-statics"));function _extends(){return(_extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t}).apply(this,arguments)}function _inheritsLoose(t,e){t.prototype=Object.create(e.prototype),(t.prototype.constructor=t).__proto__=e}function _objectWithoutPropertiesLoose(t,e){if(null==t)return{};var n,o,r={},a=Object.keys(t);for(o=0;o<a.length;o++)n=a[o],0<=e.indexOf(n)||(r[n]=t[n]);return r}var createNamedContext=function(t){var e=createContext();return e.displayName=t,e},context=createNamedContext("Router"),Router=function(n){function t(t){var e;return(e=n.call(this,t)||this).state={location:t.history.location},e._isMounted=!1,e._pendingLocation=null,t.staticContext||(e.unlisten=t.history.listen(function(t){e._isMounted?e.setState({location:t}):e._pendingLocation=t})),e}_inheritsLoose(t,n),t.computeRootMatch=function(t){return{path:"/",url:"/",params:{},isExact:"/"===t}};var e=t.prototype;return e.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},e.componentWillUnmount=function(){this.unlisten&&this.unlisten()},e.render=function(){return React.createElement(context.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(React.Component),MemoryRouter=function(r){function t(){for(var t,e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return(t=r.call.apply(r,[this].concat(n))||this).history=history.createMemoryHistory(t.props),t}return _inheritsLoose(t,r),t.prototype.render=function(){return React.createElement(Router,{history:this.history,children:this.props.children})},t}(React.Component),Lifecycle=function(t){function e(){return t.apply(this,arguments)||this}_inheritsLoose(e,t);var n=e.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(t){this.props.onUpdate&&this.props.onUpdate.call(this,this,t)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},e}(React.Component);function Prompt(t){var o=t.message,e=t.when,r=void 0===e||e;return React.createElement(context.Consumer,null,function(t){if(t||invariant(!1),!r||t.staticContext)return null;var n=t.history.block;return React.createElement(Lifecycle,{onMount:function(t){t.release=n(o)},onUpdate:function(t,e){e.message!==o&&(t.release(),t.release=n(o))},onUnmount:function(t){t.release()},message:o})})}var cache={},cacheLimit=1e4,cacheCount=0;function compilePath(t){if(cache[t])return cache[t];var e=pathToRegexp.compile(t);return cacheCount<cacheLimit&&(cache[t]=e,cacheCount++),e}function generatePath(t,e){return void 0===t&&(t="/"),void 0===e&&(e={}),"/"===t?t:compilePath(t)(e,{pretty:!0})}function Redirect(t){var a=t.computedMatch,i=t.to,e=t.push,c=void 0!==e&&e;return React.createElement(context.Consumer,null,function(t){t||invariant(!1);var e=t.history,n=t.staticContext,o=c?e.push:e.replace,r=history.createLocation(a?"string"==typeof i?generatePath(i,a.params):_extends({},i,{pathname:generatePath(i.pathname,a.params)}):i);return n?(o(r),null):React.createElement(Lifecycle,{onMount:function(){o(r)},onUpdate:function(t,e){var n=history.createLocation(e.to);history.locationsAreEqual(n,_extends({},r,{key:n.key}))||o(r)},to:i})})}var cache$1={},cacheLimit$1=1e4,cacheCount$1=0;function compilePath$1(t,e){var n=""+e.end+e.strict+e.sensitive,o=cache$1[n]||(cache$1[n]={});if(o[t])return o[t];var r=[],a={regexp:pathToRegexp(t,r,e),keys:r};return cacheCount$1<cacheLimit$1&&(o[t]=a,cacheCount$1++),a}function matchPath(u,t){void 0===t&&(t={}),"string"!=typeof t&&!Array.isArray(t)||(t={path:t});var e=t,n=e.path,o=e.exact,p=void 0!==o&&o,r=e.strict,h=void 0!==r&&r,a=e.sensitive,l=void 0!==a&&a;return[].concat(n).reduce(function(t,e){if(!e&&""!==e)return null;if(t)return t;var n=compilePath$1(e,{end:p,strict:h,sensitive:l}),o=n.regexp,r=n.keys,a=o.exec(u);if(!a)return null;var i=a[0],c=a.slice(1),s=u===i;return p&&!s?null:{path:e,url:"/"===e&&""===i?"/":i,isExact:s,params:r.reduce(function(t,e,n){return t[e.name]=c[n],t},{})}},null)}var Route=function(t){function e(){return t.apply(this,arguments)||this}return _inheritsLoose(e,t),e.prototype.render=function(){var c=this;return React.createElement(context.Consumer,null,function(t){t||invariant(!1);var e=c.props.location||t.location,n=_extends({},t,{location:e,match:c.props.computedMatch?c.props.computedMatch:c.props.path?matchPath(e.pathname,c.props):t.match}),o=c.props,r=o.children,a=o.component,i=o.render;return Array.isArray(r)&&0===r.length&&(r=null),React.createElement(context.Provider,{value:n},n.match?r?"function"==typeof r?r(n):r:a?React.createElement(a,n):i?i(n):null:"function"==typeof r?r(n):null)})},e}(React.Component);function addLeadingSlash(t){return"/"===t.charAt(0)?t:"/"+t}function addBasename(t,e){return t?_extends({},e,{pathname:addLeadingSlash(t)+e.pathname}):e}function stripBasename(t,e){if(!t)return e;var n=addLeadingSlash(t);return 0!==e.pathname.indexOf(n)?e:_extends({},e,{pathname:e.pathname.substr(n.length)})}function createURL(t){return"string"==typeof t?t:history.createPath(t)}function staticHandler(t){return function(){invariant(!1)}}function noop(){}var StaticRouter=function(r){function t(){for(var e,t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];return(e=r.call.apply(r,[this].concat(n))||this).handlePush=function(t){return e.navigateTo(t,"PUSH")},e.handleReplace=function(t){return e.navigateTo(t,"REPLACE")},e.handleListen=function(){return noop},e.handleBlock=function(){return noop},e}_inheritsLoose(t,r);var e=t.prototype;return e.navigateTo=function(t,e){var n=this.props,o=n.basename,r=void 0===o?"":o,a=n.context,i=void 0===a?{}:a;i.action=e,i.location=addBasename(r,history.createLocation(t)),i.url=createURL(i.location)},e.render=function(){var t=this.props,e=t.basename,n=void 0===e?"":e,o=t.context,r=void 0===o?{}:o,a=t.location,i=void 0===a?"/":a,c=_objectWithoutPropertiesLoose(t,["basename","context","location"]),s={createHref:function(t){return addLeadingSlash(n+createURL(t))},action:"POP",location:stripBasename(n,history.createLocation(i)),push:this.handlePush,replace:this.handleReplace,go:staticHandler(),goBack:staticHandler(),goForward:staticHandler(),listen:this.handleListen,block:this.handleBlock};return React.createElement(Router,_extends({},c,{history:s,staticContext:r}))},t}(React.Component),Switch=function(t){function e(){return t.apply(this,arguments)||this}return _inheritsLoose(e,t),e.prototype.render=function(){var t=this;return React.createElement(context.Consumer,null,function(n){n||invariant(!1);var o,r,a=t.props.location||n.location;return React.Children.forEach(t.props.children,function(t){if(null==r&&React.isValidElement(t)){var e=(o=t).props.path||t.props.from;r=e?matchPath(a.pathname,_extends({},t.props,{path:e})):n.match}}),r?React.cloneElement(o,{location:a,computedMatch:r}):null})},e}(React.Component);function withRouter(o){function t(t){var e=t.wrappedComponentRef,n=_objectWithoutPropertiesLoose(t,["wrappedComponentRef"]);return React.createElement(context.Consumer,null,function(t){return t||invariant(!1),React.createElement(o,_extends({},n,t,{ref:e}))})}var e="withRouter("+(o.displayName||o.name)+")";return t.displayName=e,t.WrappedComponent=o,hoistStatics(t,o)}var useContext=React.useContext;function useHistory(){return useContext(context).history}function useLocation(){return useContext(context).location}function useParams(){var t=useContext(context).match;return t?t.params:{}}function useRouteMatch(t){return t?matchPath(useLocation().pathname,t):useContext(context).match}exports.MemoryRouter=MemoryRouter,exports.Prompt=Prompt,exports.Redirect=Redirect,exports.Route=Route,exports.Router=Router,exports.StaticRouter=StaticRouter,exports.Switch=Switch,exports.__RouterContext=context,exports.generatePath=generatePath,exports.matchPath=matchPath,exports.useHistory=useHistory,exports.useLocation=useLocation,exports.useParams=useParams,exports.useRouteMatch=useRouteMatch,exports.withRouter=withRouter;
//# sourceMappingURL=react-router.min.js.map

      };
    };
  }
}, {package:"react-router",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\cjs\\react-router.min.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\node_modules\\history\\cjs\\history.min.js", {"resolve-pathname":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\index.js","tiny-invariant":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-invariant\\dist\\tiny-invariant.cjs.js","tiny-warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js","value-equal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router-dom\node_modules\history\cjs\history.min.js
      return function (require, module, exports) {
"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}Object.defineProperty(exports,"__esModule",{value:!0});var resolvePathname=_interopDefault(require("resolve-pathname")),valueEqual=_interopDefault(require("value-equal"));require("tiny-warning");var invariant=_interopDefault(require("tiny-invariant"));function _extends(){return(_extends=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a])}return t}).apply(this,arguments)}function addLeadingSlash(t){return"/"===t.charAt(0)?t:"/"+t}function stripLeadingSlash(t){return"/"===t.charAt(0)?t.substr(1):t}function hasBasename(t,n){return 0===t.toLowerCase().indexOf(n.toLowerCase())&&-1!=="/?#".indexOf(t.charAt(n.length))}function stripBasename(t,n){return hasBasename(t,n)?t.substr(n.length):t}function stripTrailingSlash(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t}function parsePath(t){var n=t||"/",e="",a="",r=n.indexOf("#");-1!==r&&(a=n.substr(r),n=n.substr(0,r));var o=n.indexOf("?");return-1!==o&&(e=n.substr(o),n=n.substr(0,o)),{pathname:n,search:"?"===e?"":e,hash:"#"===a?"":a}}function createPath(t){var n=t.pathname,e=t.search,a=t.hash,r=n||"/";return e&&"?"!==e&&(r+="?"===e.charAt(0)?e:"?"+e),a&&"#"!==a&&(r+="#"===a.charAt(0)?a:"#"+a),r}function createLocation(t,n,e,a){var r;"string"==typeof t?(r=parsePath(t)).state=n:(void 0===(r=_extends({},t)).pathname&&(r.pathname=""),r.search?"?"!==r.search.charAt(0)&&(r.search="?"+r.search):r.search="",r.hash?"#"!==r.hash.charAt(0)&&(r.hash="#"+r.hash):r.hash="",void 0!==n&&void 0===r.state&&(r.state=n));try{r.pathname=decodeURI(r.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+r.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return e&&(r.key=e),a?r.pathname?"/"!==r.pathname.charAt(0)&&(r.pathname=resolvePathname(r.pathname,a.pathname)):r.pathname=a.pathname:r.pathname||(r.pathname="/"),r}function locationsAreEqual(t,n){return t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash&&t.key===n.key&&valueEqual(t.state,n.state)}function createTransitionManager(){var o=null;var a=[];return{setPrompt:function(t){return o=t,function(){o===t&&(o=null)}},confirmTransitionTo:function(t,n,e,a){if(null!=o){var r="function"==typeof o?o(t,n):o;"string"==typeof r?"function"==typeof e?e(r,a):a(!0):a(!1!==r)}else a(!0)},appendListener:function(t){var n=!0;function e(){n&&t.apply(void 0,arguments)}return a.push(e),function(){n=!1,a=a.filter(function(t){return t!==e})}},notifyListeners:function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];a.forEach(function(t){return t.apply(void 0,n)})}}}var canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement);function getConfirmation(t,n){n(window.confirm(t))}function supportsHistory(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)}function supportsPopStateOnHashChange(){return-1===window.navigator.userAgent.indexOf("Trident")}function supportsGoWithoutReloadUsingHash(){return-1===window.navigator.userAgent.indexOf("Firefox")}function isExtraneousPopstateEvent(t){return void 0===t.state&&-1===navigator.userAgent.indexOf("CriOS")}var PopStateEvent="popstate",HashChangeEvent="hashchange";function getHistoryState(){try{return window.history.state||{}}catch(t){return{}}}function createBrowserHistory(t){void 0===t&&(t={}),canUseDOM||invariant(!1);var s=window.history,c=supportsHistory(),n=!supportsPopStateOnHashChange(),e=t,a=e.forceRefresh,h=void 0!==a&&a,r=e.getUserConfirmation,u=void 0===r?getConfirmation:r,o=e.keyLength,i=void 0===o?6:o,f=t.basename?stripTrailingSlash(addLeadingSlash(t.basename)):"";function l(t){var n=t||{},e=n.key,a=n.state,r=window.location,o=r.pathname+r.search+r.hash;return f&&(o=stripBasename(o,f)),createLocation(o,a,e)}function d(){return Math.random().toString(36).substr(2,i)}var v=createTransitionManager();function p(t){_extends(T,t),T.length=s.length,v.notifyListeners(T.location,T.action)}function g(t){isExtraneousPopstateEvent(t)||w(l(t.state))}function P(){w(l(getHistoryState()))}var m=!1;function w(n){if(m)m=!1,p();else{v.confirmTransitionTo(n,"POP",u,function(t){t?p({action:"POP",location:n}):function(t){var n=T.location,e=H.indexOf(n.key);-1===e&&(e=0);var a=H.indexOf(t.key);-1===a&&(a=0);var r=e-a;r&&(m=!0,L(r))}(n)})}}var y=l(getHistoryState()),H=[y.key];function x(t){return f+createPath(t)}function L(t){s.go(t)}var O=0;function E(t){1===(O+=t)&&1===t?(window.addEventListener(PopStateEvent,g),n&&window.addEventListener(HashChangeEvent,P)):0===O&&(window.removeEventListener(PopStateEvent,g),n&&window.removeEventListener(HashChangeEvent,P))}var S=!1;var T={length:s.length,action:"POP",location:y,createHref:x,push:function(t,n){var i=createLocation(t,n,d(),T.location);v.confirmTransitionTo(i,"PUSH",u,function(t){if(t){var n=x(i),e=i.key,a=i.state;if(c)if(s.pushState({key:e,state:a},null,n),h)window.location.href=n;else{var r=H.indexOf(T.location.key),o=H.slice(0,r+1);o.push(i.key),H=o,p({action:"PUSH",location:i})}else window.location.href=n}})},replace:function(t,n){var o="REPLACE",i=createLocation(t,n,d(),T.location);v.confirmTransitionTo(i,o,u,function(t){if(t){var n=x(i),e=i.key,a=i.state;if(c)if(s.replaceState({key:e,state:a},null,n),h)window.location.replace(n);else{var r=H.indexOf(T.location.key);-1!==r&&(H[r]=i.key),p({action:o,location:i})}else window.location.replace(n)}})},go:L,goBack:function(){L(-1)},goForward:function(){L(1)},block:function(t){void 0===t&&(t=!1);var n=v.setPrompt(t);return S||(E(1),S=!0),function(){return S&&(S=!1,E(-1)),n()}},listen:function(t){var n=v.appendListener(t);return E(1),function(){E(-1),n()}}};return T}var HashChangeEvent$1="hashchange",HashPathCoders={hashbang:{encodePath:function(t){return"!"===t.charAt(0)?t:"!/"+stripLeadingSlash(t)},decodePath:function(t){return"!"===t.charAt(0)?t.substr(1):t}},noslash:{encodePath:stripLeadingSlash,decodePath:addLeadingSlash},slash:{encodePath:addLeadingSlash,decodePath:addLeadingSlash}};function stripHash(t){var n=t.indexOf("#");return-1===n?t:t.slice(0,n)}function getHashPath(){var t=window.location.href,n=t.indexOf("#");return-1===n?"":t.substring(n+1)}function pushHashPath(t){window.location.hash=t}function replaceHashPath(t){window.location.replace(stripHash(window.location.href)+"#"+t)}function createHashHistory(t){void 0===t&&(t={}),canUseDOM||invariant(!1);var n=window.history,e=(supportsGoWithoutReloadUsingHash(),t),a=e.getUserConfirmation,i=void 0===a?getConfirmation:a,r=e.hashType,o=void 0===r?"slash":r,s=t.basename?stripTrailingSlash(addLeadingSlash(t.basename)):"",c=HashPathCoders[o],h=c.encodePath,u=c.decodePath;function f(){var t=u(getHashPath());return s&&(t=stripBasename(t,s)),createLocation(t)}var l=createTransitionManager();function d(t){_extends(E,t),E.length=n.length,l.notifyListeners(E.location,E.action)}var v=!1,p=null;function g(){var t=getHashPath(),n=h(t);if(t!==n)replaceHashPath(n);else{var e=f(),a=E.location;if(!v&&function(t,n){return t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash}(a,e))return;if(p===createPath(e))return;p=null,function(n){if(v)v=!1,d();else{l.confirmTransitionTo(n,"POP",i,function(t){t?d({action:"POP",location:n}):function(t){var n=E.location,e=y.lastIndexOf(createPath(n));-1===e&&(e=0);var a=y.lastIndexOf(createPath(t));-1===a&&(a=0);var r=e-a;r&&(v=!0,H(r))}(n)})}}(e)}}var P=getHashPath(),m=h(P);P!==m&&replaceHashPath(m);var w=f(),y=[createPath(w)];function H(t){n.go(t)}var x=0;function L(t){1===(x+=t)&&1===t?window.addEventListener(HashChangeEvent$1,g):0===x&&window.removeEventListener(HashChangeEvent$1,g)}var O=!1;var E={length:n.length,action:"POP",location:w,createHref:function(t){var n=document.querySelector("base"),e="";return n&&n.getAttribute("href")&&(e=stripHash(window.location.href)),e+"#"+h(s+createPath(t))},push:function(t,n){var o=createLocation(t,void 0,void 0,E.location);l.confirmTransitionTo(o,"PUSH",i,function(t){if(t){var n=createPath(o),e=h(s+n);if(getHashPath()!==e){p=n,pushHashPath(e);var a=y.lastIndexOf(createPath(E.location)),r=y.slice(0,a+1);r.push(n),y=r,d({action:"PUSH",location:o})}else d()}})},replace:function(t,n){var r="REPLACE",o=createLocation(t,void 0,void 0,E.location);l.confirmTransitionTo(o,r,i,function(t){if(t){var n=createPath(o),e=h(s+n);getHashPath()!==e&&(p=n,replaceHashPath(e));var a=y.indexOf(createPath(E.location));-1!==a&&(y[a]=n),d({action:r,location:o})}})},go:H,goBack:function(){H(-1)},goForward:function(){H(1)},block:function(t){void 0===t&&(t=!1);var n=l.setPrompt(t);return O||(L(1),O=!0),function(){return O&&(O=!1,L(-1)),n()}},listen:function(t){var n=l.appendListener(t);return L(1),function(){L(-1),n()}}};return E}function clamp(t,n,e){return Math.min(Math.max(t,n),e)}function createMemoryHistory(t){void 0===t&&(t={});var n=t,r=n.getUserConfirmation,e=n.initialEntries,a=void 0===e?["/"]:e,o=n.initialIndex,i=void 0===o?0:o,s=n.keyLength,c=void 0===s?6:s,h=createTransitionManager();function u(t){_extends(g,t),g.length=g.entries.length,h.notifyListeners(g.location,g.action)}function f(){return Math.random().toString(36).substr(2,c)}var l=clamp(i,0,a.length-1),d=a.map(function(t){return createLocation(t,void 0,"string"==typeof t?f():t.key||f())}),v=createPath;function p(t){var n=clamp(g.index+t,0,g.entries.length-1),e=g.entries[n];h.confirmTransitionTo(e,"POP",r,function(t){t?u({action:"POP",location:e,index:n}):u()})}var g={length:d.length,action:"POP",location:d[l],index:l,entries:d,createHref:v,push:function(t,n){var a=createLocation(t,n,f(),g.location);h.confirmTransitionTo(a,"PUSH",r,function(t){if(t){var n=g.index+1,e=g.entries.slice(0);e.length>n?e.splice(n,e.length-n,a):e.push(a),u({action:"PUSH",location:a,index:n,entries:e})}})},replace:function(t,n){var e="REPLACE",a=createLocation(t,n,f(),g.location);h.confirmTransitionTo(a,e,r,function(t){t&&(g.entries[g.index]=a,u({action:e,location:a}))})},go:p,goBack:function(){p(-1)},goForward:function(){p(1)},canGo:function(t){var n=g.index+t;return 0<=n&&n<g.entries.length},block:function(t){return void 0===t&&(t=!1),h.setPrompt(t)},listen:function(t){return h.appendListener(t)}};return g}exports.createBrowserHistory=createBrowserHistory,exports.createHashHistory=createHashHistory,exports.createMemoryHistory=createMemoryHistory,exports.createLocation=createLocation,exports.locationsAreEqual=locationsAreEqual,exports.parsePath=parsePath,exports.createPath=createPath;

      };
    };
  }
}, {package:"history",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\node_modules\\history\\cjs\\history.min.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\node_modules\\history\\cjs\\history.js", {"resolve-pathname":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\index.js","tiny-invariant":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-invariant\\dist\\tiny-invariant.cjs.js","tiny-warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js","value-equal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router-dom\node_modules\history\cjs\history.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var resolvePathname = _interopDefault(require('resolve-pathname'));
var valueEqual = _interopDefault(require('value-equal'));
var warning = _interopDefault(require('tiny-warning'));
var invariant = _interopDefault(require('tiny-invariant'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
}
function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
}
function hasBasename(path, prefix) {
  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
}
function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}
function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}
function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';
  var hashIndex = pathname.indexOf('#');

  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');

  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
}
function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;
  var path = pathname || '/';
  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
  return path;
}

function createLocation(path, state, key, currentLocation) {
  var location;

  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = parsePath(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = _extends({}, path);
    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
}
function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);
}

function createTransitionManager() {
  var prompt = null;

  function setPrompt(nextPrompt) {
    warning(prompt == null, 'A history supports only one prompt at a time');
    prompt = nextPrompt;
    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  }

  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  }

  var listeners = [];

  function appendListener(fn) {
    var isActive = true;

    function listener() {
      if (isActive) fn.apply(void 0, arguments);
    }

    listeners.push(listener);
    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  }

  function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(void 0, args);
    });
  }

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
function getConfirmation(message, callback) {
  callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
  return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */

function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */

function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */


function createBrowserHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ? invariant(false, 'Browser history needs a DOM') : void 0;
  var globalHistory = window.history;
  var canUseHistory = supportsHistory();
  var needsHashChangeListener = !supportsPopStateOnHashChange();
  var _props = props,
      _props$forceRefresh = _props.forceRefresh,
      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

  function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;
    var path = pathname + search + hash;
    warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
    if (basename) path = stripBasename(path, basename);
    return createLocation(path, state, key);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if (isExtraneousPopstateEvent(event)) return;
    handlePop(getDOMLocation(event.state));
  }

  function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  }

  var forceNextPop = false;

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key]; // Public interface

  function createHref(location) {
    return basename + createPath(location);
  }

  function push(path, state) {
    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex + 1);
          nextKeys.push(location.key);
          allKeys = nextKeys;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        warning(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
        window.location.href = href;
      }
    });
  }

  function replace(path, state) {
    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        warning(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
        window.location.replace(href);
      }
    });
  }

  function go(n) {
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: stripLeadingSlash,
    decodePath: addLeadingSlash
  },
  slash: {
    encodePath: addLeadingSlash,
    decodePath: addLeadingSlash
  }
};

function stripHash(url) {
  var hashIndex = url.indexOf('#');
  return hashIndex === -1 ? url : url.slice(0, hashIndex);
}

function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}

function pushHashPath(path) {
  window.location.hash = path;
}

function replaceHashPath(path) {
  window.location.replace(stripHash(window.location.href) + '#' + path);
}

function createHashHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ? invariant(false, 'Hash history needs a DOM') : void 0;
  var globalHistory = window.history;
  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
  var _props = props,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$hashType = _props.hashType,
      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;

  function getDOMLocation() {
    var path = decodePath(getHashPath());
    warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
    if (basename) path = stripBasename(path, basename);
    return createLocation(path);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  var forceNextPop = false;
  var ignorePath = null;

  function locationsAreEqual$$1(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
  }

  function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;
      handlePop(location);
    }
  }

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  } // Ensure the hash is encoded properly before doing anything else.


  var path = getHashPath();
  var encodedPath = encodePath(path);
  if (path !== encodedPath) replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [createPath(initialLocation)]; // Public interface

  function createHref(location) {
    var baseTag = document.querySelector('base');
    var href = '';

    if (baseTag && baseTag.getAttribute('href')) {
      href = stripHash(window.location.href);
    }

    return href + '#' + encodePath(basename + createPath(location));
  }

  function push(path, state) {
    warning(state === undefined, 'Hash history cannot push state; it is ignored');
    var action = 'PUSH';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);
        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
        var nextPaths = allPaths.slice(0, prevIndex + 1);
        nextPaths.push(path);
        allPaths = nextPaths;
        setState({
          action: action,
          location: location
        });
      } else {
        warning(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
        setState();
      }
    });
  }

  function replace(path, state) {
    warning(state === undefined, 'Hash history cannot replace state; it is ignored');
    var action = 'REPLACE';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf(createPath(history.location));
      if (prevIndex !== -1) allPaths[prevIndex] = path;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    warning(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(HashChangeEvent$1, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */


function createMemoryHistory(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      getUserConfirmation = _props.getUserConfirmation,
      _props$initialEntries = _props.initialEntries,
      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
      _props$initialIndex = _props.initialIndex,
      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var transitionManager = createTransitionManager();

  function setState(nextState) {
    _extends(history, nextState);

    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
  }); // Public interface

  var createHref = createPath;

  function push(path, state) {
    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);

      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  }

  function replace(path, state) {
    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      history.entries[history.index] = location;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
    var action = 'POP';
    var location = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  }

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    return transitionManager.setPrompt(prompt);
  }

  function listen(listener) {
    return transitionManager.appendListener(listener);
  }

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };
  return history;
}

exports.createBrowserHistory = createBrowserHistory;
exports.createHashHistory = createHashHistory;
exports.createMemoryHistory = createMemoryHistory;
exports.createLocation = createLocation;
exports.locationsAreEqual = locationsAreEqual;
exports.parsePath = parsePath;
exports.createPath = createPath;

      };
    };
  }
}, {package:"history",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\node_modules\\history\\cjs\\history.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\classnames\index.js
      return function (require, module, exports) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
		// register as 'classnames', consistent with npm package name
		define('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());

      };
    };
  }
}, {package:"classnames",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-idle-timer\\dist\\index.min.js", {"prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-idle-timer\dist\index.min.js
      return function (require, module, exports) {
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var react=require("react"),PropTypes=_interopDefault(require("prop-types")),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),inherits=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},possibleConstructorReturn=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},IS_BROWSER="object"===("undefined"==typeof window?"undefined":"undefined"==typeof window?"undefined":_typeof(window)),DEFAULT_ELEMENT=IS_BROWSER?document:{},DEFAULT_EVENTS=["mousemove","keydown","wheel","DOMMouseScroll","mouseWheel","mousedown","touchstart","touchmove","MSPointerDown","MSPointerMove"],IdleTimer=function(e){function t(e){classCallCheck(this,t);var n=possibleConstructorReturn(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));if(n.state={idle:!1,oldDate:+new Date,lastActive:+new Date,remaining:null,pageX:null,pageY:null},n.tId=null,n._handleEvent=function(e){var t=n.state,o=t.remaining,i=t.pageX,r=t.pageY,s=t.idle,u=n.props,a=u.timeout,l=u.onAction,p=u.debounce,c=u.throttle,d=u.stopOnIdle;if(p>0?n.debouncedAction(e):c>0?n.throttledAction(e):l(e),!o){if("mousemove"===e.type){if(e.pageX===i&&e.pageY===r)return;if(void 0===e.pageX&&void 0===e.pageY)return;if(n.getElapsedTime()<200)return}clearTimeout(n.tId),n.tId=null,s&&!d&&n.toggleIdleState(e),n.setState({lastActive:+new Date,pageX:e.pageX,pageY:e.pageY}),s&&d||(n.tId=setTimeout(n.toggleIdleState,a))}},e.debounce>0&&e.throttle>0)throw new Error("onAction can either be throttled or debounced (not both)");return e.debounce>0&&(n.debouncedAction=debounced(e.onAction,e.debounce)),e.throttle>0&&(n.throttledAction=throttled(e.onAction,e.throttle)),e.startOnMount||(n.state.idle=!0),n.toggleIdleState=n._toggleIdleState.bind(n),n.reset=n._reset.bind(n),n.pause=n._pause.bind(n),n.resume=n._resume.bind(n),n.getRemainingTime=n._getRemainingTime.bind(n),n.getElapsedTime=n._getElapsedTime.bind(n),n.getLastActiveTime=n._getLastActiveTime.bind(n),n.isIdle=n._isIdle.bind(n),n}return inherits(t,e),createClass(t,[{key:"componentWillMount",value:function(){this._bindEvents()}},{key:"componentDidMount",value:function(){this.props.startOnMount&&this.reset()}},{key:"componentDidUpdate",value:function(e){e.debounce!==this.props.debounce&&(this.debouncedAction=debounced(this.props.onAction,this.props.debounce)),e.throttle!==this.props.throttle&&(this.throttledAction=throttled(this.props.onAction,this.props.throttle))}},{key:"componentWillUnmount",value:function(){clearTimeout(this.tId),this._unbindEvents()}},{key:"render",value:function(){return this.props.children||null}},{key:"_bindEvents",value:function(){var e=this;if(IS_BROWSER){var t=this.state.eventsBound,n=this.props,o=n.element,i=n.events,r=n.passive,s=n.capture;t||(i.forEach(function(t){o.addEventListener(t,e._handleEvent,{capture:s,passive:r})}),this.setState({eventsBound:!0}))}}},{key:"_unbindEvents",value:function(){var e=this;if(IS_BROWSER){var t=this.props,n=t.element,o=t.events,i=t.passive,r=t.capture;this.state.eventsBound&&(o.forEach(function(t){n.removeEventListener(t,e._handleEvent,{capture:r,passive:i})}),this.setState({eventsBound:!1}))}}},{key:"_toggleIdleState",value:function(e){var t=this,n=this.state.idle,o=this.props,i=o.onActive,r=o.onIdle,s=o.stopOnIdle;this.setState({idle:!n},function(){n?s||(t._bindEvents(),i(e)):(s&&(clearTimeout(t.tId),t.tId=null,t._unbindEvents()),r(e))})}},{key:"_reset",value:function(){clearTimeout(this.tId),this.tId=null,this._bindEvents(),this.setState({idle:!1,oldDate:+new Date,lastActive:this.state.oldDate,remaining:null});var e=this.props.timeout;this.tId=setTimeout(this.toggleIdleState,e)}},{key:"_pause",value:function(){null===this.state.remaining&&(this._unbindEvents(),clearTimeout(this.tId),this.tId=null,this.setState({remaining:this.getRemainingTime()}))}},{key:"_resume",value:function(){var e=this.state,t=e.remaining,n=e.idle;null!==t&&(this._bindEvents(),n||(this.setState({remaining:null}),this.tId=setTimeout(this.toggleIdleState,t)))}},{key:"_getRemainingTime",value:function(){var e=this.state,t=e.remaining,n=e.idle,o=e.lastActive;if(n)return 0;if(null!==t)return t;var i=this.props.timeout-(+new Date-o);return i<0&&(i=0),i}},{key:"_getElapsedTime",value:function(){var e=this.state.oldDate;return+new Date-e}},{key:"_getLastActiveTime",value:function(){return this.state.lastActive}},{key:"_isIdle",value:function(){return this.state.idle}}]),t}(react.Component);function debounced(e,t){var n=void 0;return function(){for(var o=arguments.length,i=Array(o),r=0;r<o;r++)i[r]=arguments[r];n&&clearTimeout(n),n=setTimeout(function(){e.apply(void 0,i),n=null},t)}}function throttled(e,t){var n=0;return function(){var o=(new Date).getTime();if(!(o-n<t))return n=o,e.apply(void 0,arguments)}}IdleTimer.propTypes={timeout:PropTypes.number,events:PropTypes.arrayOf(PropTypes.string),onIdle:PropTypes.func,onActive:PropTypes.func,onAction:PropTypes.func,debounce:PropTypes.number,throttle:PropTypes.number,element:PropTypes.oneOfType([PropTypes.object,PropTypes.element]),startOnMount:PropTypes.bool,stopOnIdle:PropTypes.bool,passive:PropTypes.bool,capture:PropTypes.bool},IdleTimer.defaultProps={timeout:12e5,element:DEFAULT_ELEMENT,events:DEFAULT_EVENTS,onIdle:function(){},onActive:function(){},onAction:function(){},debounce:0,throttle:0,startOnMount:!0,stopOnIdle:!1,capture:!0,passive:!0},module.exports=IdleTimer;
//# sourceMappingURL=index.min.js.map

      };
    };
  }
}, {package:"react-idle-timer",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-idle-timer\\dist\\index.min.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\alert\\index.js", {"../../../../shared/constants/time":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\time.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\alert\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _time = require("../../../../shared/constants/time");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class Alert extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      visible: false,
      msg: false,
      className: ''
    });
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if (!this.props.visible && nextProps.visible) {
      this.animateIn(nextProps.msg);
    } else if (this.props.visible && !nextProps.visible) {
      this.animateOut();
    }
  }

  animateIn(msg) {
    this.setState({
      msg,
      visible: true,
      className: 'visible'
    });
  }

  animateOut() {
    this.setState({
      msg: null,
      className: 'hidden'
    });
    setTimeout(_ => {
      this.setState({
        visible: false
      });
    }, _time.MILLISECOND * 500);
  }

  render() {
    if (this.state.visible) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)('global-alert', this.state.className)
      }, /*#__PURE__*/_react.default.createElement("a", {
        className: "msg"
      }, this.state.msg));
    }

    return null;
  }

}

Alert.propTypes = {
  visible: _propTypes.default.bool.isRequired,
  msg: _propTypes.default.string
  /* eslint-disable-line react/no-unused-prop-types */

};
var _default = Alert;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\alert\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\mobile-sync\\index.js", {"./mobile-sync.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\mobile-sync\\mobile-sync.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\mobile-sync\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _mobileSync.default;
  }
});

var _mobileSync = _interopRequireDefault(require("./mobile-sync.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\mobile-sync\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\lock\\index.js", {"./lock.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\lock\\lock.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\lock\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _lock.default;
  }
});

var _lock = _interopRequireDefault(require("./lock.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\lock\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-add-suggested-token\\index.js", {"./confirm-add-suggested-token.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\confirm-add-suggested-token\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _confirmAddSuggestedToken = _interopRequireDefault(require("./confirm-add-suggested-token.container"));

var _default = _confirmAddSuggestedToken.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-add-suggested-token\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\unlock-page\\index.js", {"./unlock-page.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\unlock-page\\unlock-page.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\unlock-page\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _unlockPage = _interopRequireDefault(require("./unlock-page.container"));

var _default = _unlockPage.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\unlock-page\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\keychains\\reveal-seed.js", {"../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../components/ui/export-text-container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\export-text-container\\index.js","../../ducks/history/history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\history\\history.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\keychains\reveal-seed.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _actions = require("../../store/actions");

var _exportTextContainer = _interopRequireDefault(require("../../components/ui/export-text-container"));

var _history = require("../../ducks/history/history");

var _button = _interopRequireDefault(require("../../components/ui/button"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const PASSWORD_PROMPT_SCREEN = 'PASSWORD_PROMPT_SCREEN';
const REVEAL_SEED_SCREEN = 'REVEAL_SEED_SCREEN';

class RevealSeedPage extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      screen: PASSWORD_PROMPT_SCREEN,
      password: '',
      seedWords: null,
      error: null
    });
  }

  componentDidMount() {
    const passwordBox = document.getElementById('password-box');

    if (passwordBox) {
      passwordBox.focus();
    }
  }

  handleSubmit(event) {
    event.preventDefault();
    this.setState({
      seedWords: null,
      error: null
    });
    this.props.requestRevealSeedWords(this.state.password).then(seedWords => this.setState({
      seedWords,
      screen: REVEAL_SEED_SCREEN
    })).catch(error => this.setState({
      error: error.message
    }));
  }

  renderWarning() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__warning-container"
    }, /*#__PURE__*/_react.default.createElement("img", {
      className: "page-container__warning-icon",
      src: "images/warning.svg",
      alt: ""
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__warning-message"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__warning-title"
    }, this.context.t('revealSeedWordsWarningTitle')), /*#__PURE__*/_react.default.createElement("div", null, this.context.t('revealSeedWordsWarning'))));
  }

  renderContent() {
    return this.state.screen === PASSWORD_PROMPT_SCREEN ? this.renderPasswordPromptContent() : this.renderRevealSeedContent();
  }

  renderPasswordPromptContent() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: event => this.handleSubmit(event)
    }, /*#__PURE__*/_react.default.createElement("label", {
      className: "input-label",
      htmlFor: "password-box"
    }, t('enterPasswordContinue')), /*#__PURE__*/_react.default.createElement("div", {
      className: "input-group"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "password",
      placeholder: t('password'),
      id: "password-box",
      value: this.state.password,
      onChange: event => this.setState({
        password: event.target.value
      }),
      className: (0, _classnames.default)('form-control', {
        'form-control--error': this.state.error
      })
    })), this.state.error && /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed__error"
    }, this.state.error));
  }

  renderRevealSeedContent() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", {
      className: "reveal-seed__label"
    }, t('yourPrivateSeedPhrase')), /*#__PURE__*/_react.default.createElement(_exportTextContainer.default, {
      text: this.state.seedWords
    }));
  }

  renderFooter() {
    return this.state.screen === PASSWORD_PROMPT_SCREEN ? this.renderPasswordPromptFooter() : this.renderRevealSeedFooter();
  }

  renderPasswordPromptFooter() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__footer"
    }, /*#__PURE__*/_react.default.createElement("footer", null, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "page-container__footer-button",
      onClick: () => this.props.history.push(this.props.mostRecentOverviewPage)
    }, this.context.t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      large: true,
      className: "page-container__footer-button",
      onClick: event => this.handleSubmit(event),
      disabled: this.state.password === ''
    }, this.context.t('next'))));
  }

  renderRevealSeedFooter() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__footer"
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "page-container__footer-single-button",
      onClick: () => this.props.history.push(this.props.mostRecentOverviewPage)
    }, this.context.t('close')));
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__title"
    }, this.context.t('secretRecoveryPhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__subtitle"
    }, this.context.t('revealSeedWordsDescription'))), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__content"
    }, this.renderWarning(), /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed__content"
    }, this.renderContent())), this.renderFooter());
  }

}

RevealSeedPage.propTypes = {
  requestRevealSeedWords: _propTypes.default.func,
  history: _propTypes.default.object,
  mostRecentOverviewPage: _propTypes.default.string.isRequired
};
RevealSeedPage.contextTypes = {
  t: _propTypes.default.func
};

const mapStateToProps = state => {
  return {
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    requestRevealSeedWords: password => dispatch((0, _actions.requestRevealSeedWords)(password))
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(RevealSeedPage);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\keychains\\reveal-seed.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\keychains\\restore-vault.js", {"../../components/app/create-new-vault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\create-new-vault\\index.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\keychains\restore-vault.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _actions = require("../../store/actions");

var _routes = require("../../helpers/constants/routes");

var _createNewVault = _interopRequireDefault(require("../../components/app/create-new-vault"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class RestoreVaultPage extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "handleImport", async (password, seedPhrase) => {
      const {
        // eslint-disable-next-line no-shadow
        createNewVaultAndRestore,
        leaveImportSeedScreenState,
        history,
        // eslint-disable-next-line no-shadow
        initializeThreeBox
      } = this.props;
      leaveImportSeedScreenState();
      await createNewVaultAndRestore(password, seedPhrase);
      this.context.metricsEvent({
        eventOpts: {
          category: 'Retention',
          action: 'userEntersSeedPhrase',
          name: 'onboardingRestoredVault'
        }
      });
      initializeThreeBox();
      history.push(_routes.DEFAULT_ROUTE);
    });
  }

  render() {
    const {
      t
    } = this.context;
    const {
      isLoading
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "first-view-main-wrapper"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "first-view-main"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "import-account"
    }, /*#__PURE__*/_react.default.createElement("a", {
      className: "import-account__back-button",
      onClick: e => {
        e.preventDefault();
        this.props.leaveImportSeedScreenState();
        this.props.history.goBack();
      },
      href: "#"
    }, `< ${t('back')}`), /*#__PURE__*/_react.default.createElement("div", {
      className: "import-account__title"
    }, this.context.t('restoreAccountWithSeed')), /*#__PURE__*/_react.default.createElement("div", {
      className: "import-account__selector-label"
    }, this.context.t('secretPhrase')), /*#__PURE__*/_react.default.createElement("div", {
      className: "import-account__selector-typography"
    }, this.context.t('secretPhraseWarning')), /*#__PURE__*/_react.default.createElement(_createNewVault.default, {
      disabled: isLoading,
      onSubmit: this.handleImport,
      submitText: t('restore')
    }))));
  }

}

(0, _defineProperty2.default)(RestoreVaultPage, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(RestoreVaultPage, "propTypes", {
  createNewVaultAndRestore: _propTypes.default.func.isRequired,
  leaveImportSeedScreenState: _propTypes.default.func,
  history: _propTypes.default.object,
  isLoading: _propTypes.default.bool,
  initializeThreeBox: _propTypes.default.func
});

var _default = (0, _reactRedux.connect)(({
  appState: {
    isLoading
  }
}) => ({
  isLoading
}), dispatch => ({
  leaveImportSeedScreenState: () => {
    dispatch((0, _actions.unMarkPasswordForgotten)());
  },
  createNewVaultAndRestore: (pw, seed) => dispatch((0, _actions.createNewVaultAndRestore)(pw, seed)),
  initializeThreeBox: () => dispatch((0, _actions.initializeThreeBox)())
}))(RestoreVaultPage);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\keychains\\restore-vault.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\initialized\\index.js", {"./initialized.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\initialized\\initialized.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\helpers\higher-order-components\initialized\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _initialized.default;
  }
});

var _initialized = _interopRequireDefault(require("./initialized.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\initialized\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\loading-network-screen\\index.js", {"./loading-network-screen.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\loading-network-screen\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _loadingNetworkScreen.default;
  }
});

var _loadingNetworkScreen = _interopRequireDefault(require("./loading-network-screen.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\loading-network-screen\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\authenticated\\index.js", {"./authenticated.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\helpers\higher-order-components\authenticated\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _authenticated.default;
  }
});

var _authenticated = _interopRequireDefault(require("./authenticated.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\authenticated\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\onboarding-app-header\\onboarding-app-header.js", {"../../../../app/_locales/index.json":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\app\\_locales\\index.json","../../../components/ui/dropdown":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\dropdown\\index.js","../../../components/ui/metafox-logo":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\metafox-logo\\index.js","../../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\onboarding-app-header\onboarding-app-header.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnboardingAppHeader;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _metafoxLogo = _interopRequireDefault(require("../../../components/ui/metafox-logo"));

var _dropdown = _interopRequireDefault(require("../../../components/ui/dropdown"));

var _metamask = require("../../../ducks/metamask/metamask");

var _actions = require("../../../store/actions");

var _index = _interopRequireDefault(require("../../../../app/_locales/index.json"));

function OnboardingAppHeader() {
  const dispatch = (0, _reactRedux.useDispatch)();
  const currentLocale = (0, _reactRedux.useSelector)(_metamask.getCurrentLocale);

  const localeOptions = _index.default.map(locale => {
    return {
      name: locale.name,
      value: locale.code
    };
  });

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-app-header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-app-header__contents"
  }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, {
    unsetIconHeight: true,
    isOnboarding: true
  }), /*#__PURE__*/_react.default.createElement(_dropdown.default, {
    id: "select-locale",
    options: localeOptions,
    selectedOption: currentLocale,
    onChange: async newLocale => dispatch((0, _actions.updateCurrentLocale)(newLocale))
  })));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\onboarding-app-header\\onboarding-app-header.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\index.js", {"./create-account.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\create-account.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\create-account\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _createAccount.default;
  }
});

var _createAccount = _interopRequireDefault(require("./create-account.component"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\app-header\\index.js", {"./app-header.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\app-header\\app-header.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\app-header\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _appHeader.default;
  }
});

var _appHeader = _interopRequireDefault(require("./app-header.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\app-header\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\loading-screen\\index.js", {"./loading-screen.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\loading-screen\\loading-screen.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\loading-screen\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _loadingScreen = _interopRequireDefault(require("./loading-screen.component"));

var _default = _loadingScreen.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\loading-screen\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\onboarding-flow.js", {"../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","../unlock-page":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\unlock-page\\index.js","./create-password/create-password":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\create-password\\create-password.js","./creation-successful/creation-successful":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\creation-successful\\creation-successful.js","./import-srp/import-srp":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\import-srp\\import-srp.js","./metametrics/metametrics":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\metametrics\\metametrics.js","./onboarding-flow-switch/onboarding-flow-switch":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\onboarding-flow-switch\\onboarding-flow-switch.js","./pin-extension/pin-extension":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\pin-extension\\pin-extension.js","./privacy-settings/privacy-settings":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\privacy-settings\\privacy-settings.js","./recovery-phrase/confirm-recovery-phrase":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\recovery-phrase\\confirm-recovery-phrase.js","./recovery-phrase/review-recovery-phrase":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\recovery-phrase\\review-recovery-phrase.js","./secure-your-wallet/secure-your-wallet":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\secure-your-wallet\\secure-your-wallet.js","./welcome/welcome":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\welcome\\welcome.js","@babel/runtime/helpers/extends":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\extends.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\onboarding-flow.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnboardingFlow;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _unlockPage = _interopRequireDefault(require("../unlock-page"));

var _routes = require("../../helpers/constants/routes");

var _metamask = require("../../ducks/metamask/metamask");

var _actions = require("../../store/actions");

var _selectors = require("../../selectors");

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _useI18nContext = require("../../hooks/useI18nContext");

var _onboardingFlowSwitch = _interopRequireDefault(require("./onboarding-flow-switch/onboarding-flow-switch"));

var _createPassword = _interopRequireDefault(require("./create-password/create-password"));

var _reviewRecoveryPhrase = _interopRequireDefault(require("./recovery-phrase/review-recovery-phrase"));

var _secureYourWallet = _interopRequireDefault(require("./secure-your-wallet/secure-your-wallet"));

var _confirmRecoveryPhrase = _interopRequireDefault(require("./recovery-phrase/confirm-recovery-phrase"));

var _privacySettings = _interopRequireDefault(require("./privacy-settings/privacy-settings"));

var _creationSuccessful = _interopRequireDefault(require("./creation-successful/creation-successful"));

var _welcome = _interopRequireDefault(require("./welcome/welcome"));

var _importSrp = _interopRequireDefault(require("./import-srp/import-srp"));

var _pinExtension = _interopRequireDefault(require("./pin-extension/pin-extension"));

var _metametrics = _interopRequireDefault(require("./metametrics/metametrics"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function OnboardingFlow() {
  const [secretRecoveryPhrase, setSecretRecoveryPhrase] = (0, _react.useState)('');
  const dispatch = (0, _reactRedux.useDispatch)();
  const currentLocation = (0, _reactRouterDom.useLocation)();
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const isInitialized = (0, _reactRedux.useSelector)(_metamask.getIsInitialized);
  const isUnlocked = (0, _reactRedux.useSelector)(_metamask.getIsUnlocked);
  const completedOnboarding = (0, _reactRedux.useSelector)(_metamask.getCompletedOnboarding);
  const seedPhraseBackedUp = (0, _reactRedux.useSelector)(_metamask.getSeedPhraseBackedUp);
  const nextRoute = (0, _reactRedux.useSelector)(_selectors.getFirstTimeFlowTypeRoute);
  (0, _react.useEffect)(() => {
    if (completedOnboarding && seedPhraseBackedUp) {
      history.push(_routes.DEFAULT_ROUTE);
      return;
    }

    if (isInitialized && !isUnlocked) {
      history.push(_routes.ONBOARDING_UNLOCK_ROUTE);
    }
  }, [history, completedOnboarding, isInitialized, isUnlocked, seedPhraseBackedUp]);

  const handleCreateNewAccount = async password => {
    const newSecretRecoveryPhrase = await dispatch((0, _actions.createNewVaultAndGetSeedPhrase)(password));
    setSecretRecoveryPhrase(newSecretRecoveryPhrase);
  };

  const handleUnlock = async password => {
    const retrievedSecretRecoveryPhrase = await dispatch((0, _actions.unlockAndGetSeedPhrase)(password));
    setSecretRecoveryPhrase(retrievedSecretRecoveryPhrase);
    history.push(nextRoute);
  };

  const handleImportWithRecoveryPhrase = async (password, srp) => {
    return await dispatch((0, _actions.createNewVaultAndRestore)(password, srp));
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-flow"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-flow__wrapper"
  }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_CREATE_PASSWORD_ROUTE,
    render: routeProps => /*#__PURE__*/_react.default.createElement(_createPassword.default, (0, _extends2.default)({}, routeProps, {
      createNewAccount: handleCreateNewAccount,
      importWithRecoveryPhrase: handleImportWithRecoveryPhrase,
      secretRecoveryPhrase: secretRecoveryPhrase
    }))
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    exact: true,
    path: _routes.ONBOARDING_SECURE_YOUR_WALLET_ROUTE,
    component: _secureYourWallet.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_REVIEW_SRP_ROUTE,
    render: () => /*#__PURE__*/_react.default.createElement(_reviewRecoveryPhrase.default, {
      secretRecoveryPhrase: secretRecoveryPhrase
    })
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_CONFIRM_SRP_ROUTE,
    render: () => /*#__PURE__*/_react.default.createElement(_confirmRecoveryPhrase.default, {
      secretRecoveryPhrase: secretRecoveryPhrase
    })
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_IMPORT_WITH_SRP_ROUTE,
    render: routeProps => /*#__PURE__*/_react.default.createElement(_importSrp.default, (0, _extends2.default)({}, routeProps, {
      submitSecretRecoveryPhrase: setSecretRecoveryPhrase
    }))
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_UNLOCK_ROUTE,
    render: routeProps => /*#__PURE__*/_react.default.createElement(_unlockPage.default, (0, _extends2.default)({}, routeProps, {
      onSubmit: handleUnlock
    }))
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_PRIVACY_SETTINGS_ROUTE,
    component: _privacySettings.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_COMPLETION_ROUTE,
    component: _creationSuccessful.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_WELCOME_ROUTE,
    component: _welcome.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_PIN_EXTENSION_ROUTE,
    component: _pinExtension.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.ONBOARDING_METAMETRICS,
    component: _metametrics.default
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    exact: true,
    path: "*",
    component: _onboardingFlowSwitch.default
  }))), (currentLocation === null || currentLocation === void 0 ? void 0 : currentLocation.pathname) === _routes.ONBOARDING_COMPLETION_ROUTE && /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "onboarding-flow__twitter-button",
    type: "link",
    href: "https://twitter.com/MetaMask",
    target: "_blank"
  }, /*#__PURE__*/_react.default.createElement("span", null, t('followUsOnTwitter')), /*#__PURE__*/_react.default.createElement("img", {
    src: "images/twitter-icon.png"
  })));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\onboarding-flow.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\dropdowns\\network-dropdown.js", {"../../../../app/scripts/lib/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\app\\scripts\\lib\\util.js","../../../../shared/constants/app":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\app.js","../../../../shared/constants/network":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\network.js","../../../../shared/modules/network.utils":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\modules\\network.utils.js","../../../ducks/alerts/invalid-custom-network":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\alerts\\invalid-custom-network.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","../../ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../ui/color-indicator":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\color-indicator\\index.js","./dropdown":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\dropdowns\\dropdown.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\dropdowns\network-dropdown.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _button = _interopRequireDefault(require("../../ui/button"));

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _invalidCustomNetwork = require("../../../ducks/alerts/invalid-custom-network");

var _network = require("../../../../shared/constants/network");

var _network2 = require("../../../../shared/modules/network.utils");

var _colorIndicator = _interopRequireDefault(require("../../ui/color-indicator"));

var _designSystem = require("../../../helpers/constants/design-system");

var _selectors = require("../../../selectors");

var _util = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _routes = require("../../../helpers/constants/routes");

var _dropdown = require("./dropdown");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// classes from nodes of the toggle element.
const notToggleElementClassnames = ['menu-icon', 'network-name', 'network-indicator', 'network-caret', 'network-component', 'modal-container__footer-button'];
const DROP_DOWN_MENU_ITEM_STYLE = {
  fontSize: '16px',
  lineHeight: '20px',
  padding: '12px 0'
};

function mapStateToProps(state) {
  return {
    provider: state.metamask.provider,
    shouldShowTestNetworks: (0, _selectors.getShowTestNetworks)(state),
    frequentRpcListDetail: state.metamask.frequentRpcListDetail || [],
    networkDropdownOpen: state.appState.networkDropdownOpen,
    showTestnetMessageInDropdown: state.metamask.showTestnetMessageInDropdown
  };
}

function mapDispatchToProps(dispatch) {
  return {
    setProviderType: type => {
      dispatch(actions.setProviderType(type));
    },
    setRpcTarget: (target, chainId, ticker, nickname) => {
      dispatch(actions.setRpcTarget(target, chainId, ticker, nickname));
    },
    hideNetworkDropdown: () => dispatch(actions.hideNetworkDropdown()),
    displayInvalidCustomNetworkAlert: networkName => {
      dispatch((0, _invalidCustomNetwork.openAlert)(networkName));
    },
    showConfirmDeleteNetworkModal: ({
      target,
      onConfirm
    }) => {
      return dispatch(actions.showModal({
        name: 'CONFIRM_DELETE_NETWORK',
        target,
        onConfirm
      }));
    },
    hideTestNetMessage: () => actions.hideTestNetMessage()
  };
}

class NetworkDropdown extends _react.Component {
  handleClick(newProviderType) {
    const {
      provider: {
        type: providerType
      },
      setProviderType
    } = this.props;
    const {
      metricsEvent
    } = this.context;
    metricsEvent({
      eventOpts: {
        category: 'Navigation',
        action: 'Home',
        name: 'Switched Networks'
      },
      customVariables: {
        fromNetwork: providerType,
        toNetwork: newProviderType
      }
    });
    setProviderType(newProviderType);
  }

  renderAddCustomButton() {
    const style = {
      width: '100%',
      left: '40px',
      color: 'white',
      background: 'rgba(0, 0, 0, 0.75)',
      borderRadius: '20px',
      textTransform: 'none'
    };
    return /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "submit",
      style: style,
      variant: "contained",
      size: "large",
      onClick: () => {
        if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP) {
          global.platform.openExtensionInBrowser(_routes.ADD_NETWORK_ROUTE);
        } else {
          this.props.history.push(_routes.ADD_NETWORK_ROUTE);
        }

        this.props.hideNetworkDropdown();
      }
    }, this.context.t('addNetwork'));
  }

  renderCustomRpcList(rpcListDetail, provider, opts = {}) {
    const reversedRpcListDetail = rpcListDetail.slice().reverse();
    return reversedRpcListDetail.map(entry => {
      const {
        rpcUrl,
        chainId,
        ticker = 'ETH',
        nickname = ''
      } = entry;
      const isCurrentRpcTarget = provider.type === _network.NETWORK_TYPE_RPC && rpcUrl === provider.rpcUrl;
      let borderColor = _designSystem.COLORS.UI2;

      if (isCurrentRpcTarget) {
        borderColor = _designSystem.COLORS.WHITE;
      }

      if (opts.isLocalHost) {
        borderColor = 'localhost';
      }

      return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownMenuItem, {
        key: `common${rpcUrl}`,
        closeMenu: () => this.props.hideNetworkDropdown(),
        onClick: () => {
          if ((0, _network2.isPrefixedFormattedHexString)(chainId)) {
            this.props.setRpcTarget(rpcUrl, chainId, ticker, nickname);
          } else {
            this.props.displayInvalidCustomNetworkAlert(nickname || rpcUrl);
          }
        },
        style: {
          fontSize: '16px',
          lineHeight: '20px',
          padding: '12px 0'
        }
      }, isCurrentRpcTarget ? /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-check"
      }) : /*#__PURE__*/_react.default.createElement("div", {
        className: "network-check__transparent"
      }, "\u2713"), /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
        color: opts.isLocalHost ? 'localhost' : _designSystem.COLORS.UI2,
        size: _designSystem.SIZES.LG,
        type: _colorIndicator.default.TYPES.FILLED,
        borderColor: borderColor
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: "network-name-item",
        style: {
          color: isCurrentRpcTarget ? '#ffffff' : '#9b9b9b'
        }
      }, nickname || rpcUrl), isCurrentRpcTarget ? null : /*#__PURE__*/_react.default.createElement("i", {
        className: "fa fa-times delete",
        onClick: e => {
          e.stopPropagation();
          this.props.showConfirmDeleteNetworkModal({
            target: rpcUrl,
            onConfirm: () => undefined
          });
        }
      }));
    });
  }

  getNetworkName() {
    const {
      provider
    } = this.props;
    const providerName = provider.type;
    let name;

    if (providerName === 'mainnet') {
      name = this.context.t('mainnet');
    } else if (providerName === 'ropsten') {
      name = this.context.t('ropsten');
    } else if (providerName === 'kovan') {
      name = this.context.t('kovan');
    } else if (providerName === 'rinkeby') {
      name = this.context.t('rinkeby');
    } else if (providerName === 'goerli') {
      name = this.context.t('goerli');
    } else if (providerName === 'localhost') {
      name = this.context.t('localhost');
    } else {
      name = provider.nickname || this.context.t('unknownNetwork');
    }

    return name;
  }

  renderNetworkEntry(network) {
    const {
      provider: {
        type: providerType
      }
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_dropdown.DropdownMenuItem, {
      key: network,
      closeMenu: this.props.hideNetworkDropdown,
      onClick: () => this.handleClick(network),
      style: DROP_DOWN_MENU_ITEM_STYLE
    }, providerType === network ? /*#__PURE__*/_react.default.createElement("i", {
      className: "fa fa-check"
    }) : /*#__PURE__*/_react.default.createElement("div", {
      className: "network-check__transparent"
    }, "\u2713"), /*#__PURE__*/_react.default.createElement(_colorIndicator.default, {
      color: network,
      size: _designSystem.SIZES.LG,
      type: _colorIndicator.default.TYPES.FILLED,
      borderColor: providerType === network ? _designSystem.COLORS.WHITE : network
    }), /*#__PURE__*/_react.default.createElement("span", {
      className: "network-name-item",
      style: {
        color: providerType === network ? '#ffffff' : '#9b9b9b'
      }
    }, this.context.t(network)));
  }

  render() {
    const {
      history,
      hideNetworkDropdown,
      shouldShowTestNetworks,
      showTestnetMessageInDropdown,
      hideTestNetMessage
    } = this.props;
    const rpcListDetail = this.props.frequentRpcListDetail;
    const rpcListDetailWithoutLocalHost = rpcListDetail.filter(rpc => rpc.rpcUrl !== _network.LOCALHOST_RPC_URL);
    const rpcListDetailForLocalHost = rpcListDetail.filter(rpc => rpc.rpcUrl === _network.LOCALHOST_RPC_URL);
    const isOpen = this.props.networkDropdownOpen;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_dropdown.Dropdown, {
      isOpen: isOpen,
      onClickOutside: event => {
        const {
          classList
        } = event.target;

        const isInClassList = className => classList.contains(className);

        const notToggleElementIndex = notToggleElementClassnames.findIndex(isInClassList);

        if (notToggleElementIndex === -1) {
          event.stopPropagation();
          hideNetworkDropdown();
        }
      },
      containerClassName: "network-droppo",
      zIndex: 55,
      style: {
        position: 'absolute',
        top: '58px',
        width: '309px',
        zIndex: '55px'
      },
      innerStyle: {
        padding: '18px 8px'
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-title"
    }, t('networks')), /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-divider"
    }), showTestnetMessageInDropdown ? /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-content"
    }, t('toggleTestNetworks', [/*#__PURE__*/_react.default.createElement("a", {
      href: "#",
      key: "advancedSettingsLink",
      className: "network-dropdown-content--link",
      onClick: e => {
        e.preventDefault();
        hideNetworkDropdown();
        history.push(`${_routes.ADVANCED_ROUTE}#show-testnets`);
      }
    }, t('showHide'))]), /*#__PURE__*/_react.default.createElement("button", {
      onClick: hideTestNetMessage,
      className: "network-dropdown-content--dismiss"
    }, t('dismiss'))) : null), /*#__PURE__*/_react.default.createElement("div", {
      className: "network-dropdown-list"
    }, this.renderNetworkEntry('mainnet'), this.renderCustomRpcList(rpcListDetailWithoutLocalHost, this.props.provider), shouldShowTestNetworks && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.renderNetworkEntry('ropsten'), this.renderNetworkEntry('kovan'), this.renderNetworkEntry('rinkeby'), this.renderNetworkEntry('goerli'), this.renderCustomRpcList(rpcListDetailForLocalHost, this.props.provider, {
      isLocalHost: true
    }))), this.renderAddCustomButton());
  }

}

(0, _defineProperty2.default)(NetworkDropdown, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});
(0, _defineProperty2.default)(NetworkDropdown, "propTypes", {
  provider: _propTypes.default.shape({
    nickname: _propTypes.default.string,
    rpcUrl: _propTypes.default.string,
    type: _propTypes.default.string,
    ticker: _propTypes.default.string
  }).isRequired,
  setProviderType: _propTypes.default.func.isRequired,
  setRpcTarget: _propTypes.default.func.isRequired,
  hideNetworkDropdown: _propTypes.default.func.isRequired,
  frequentRpcListDetail: _propTypes.default.array.isRequired,
  shouldShowTestNetworks: _propTypes.default.bool,
  networkDropdownOpen: _propTypes.default.bool.isRequired,
  displayInvalidCustomNetworkAlert: _propTypes.default.func.isRequired,
  showConfirmDeleteNetworkModal: _propTypes.default.func.isRequired,
  showTestnetMessageInDropdown: _propTypes.default.bool.isRequired,
  hideTestNetMessage: _propTypes.default.func.isRequired,
  history: _propTypes.default.object
});

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(NetworkDropdown);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\dropdowns\\network-dropdown.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\add-collectible\\index.js", {"./add-collectible":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\add-collectible\\add-collectible.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\add-collectible\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _addCollectible.default;
  }
});

var _addCollectible = _interopRequireDefault(require("./add-collectible"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\add-collectible\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\asset\\index.js", {"./asset":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\asset\\asset.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\asset\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _asset.default;
  }
});

var _asset = _interopRequireDefault(require("./asset"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\asset\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirmation\\index.js", {"./confirmation":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirmation\\confirmation.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\confirmation\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _confirmation.default;
  }
});

var _confirmation = _interopRequireDefault(require("./confirmation"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirmation\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\permissions-connect\\index.js", {"./permissions-connect.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\permissions-connect\\permissions-connect.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\permissions-connect\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _permissionsConnect.default;
  }
});

var _permissionsConnect = _interopRequireDefault(require("./permissions-connect.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\permissions-connect\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\qr-hardware-popover\\index.js", {"./qr-hardware-popover":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\qr-hardware-popover\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _qrHardwarePopover = _interopRequireDefault(require("./qr-hardware-popover"));

var _default = _qrHardwarePopover.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\qr-hardware-popover\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\token-details\\index.js", {"./token-details-page":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\token-details\\token-details-page.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\token-details\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _tokenDetailsPage.default;
  }
});

var _tokenDetailsPage = _interopRequireDefault(require("./token-details-page"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\token-details\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-import-token\\index.js", {"./confirm-import-token":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-import-token\\confirm-import-token.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\confirm-import-token\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _confirmImportToken = _interopRequireDefault(require("./confirm-import-token"));

var _default = _confirmImportToken.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-import-token\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\alerts\\index.js", {"./alerts":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\alerts\\alerts.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\alerts\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _alerts.default;
  }
});

var _alerts = _interopRequireDefault(require("./alerts"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\alerts\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\index.js", {"./modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\modal.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\modals\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Modal", {
  enumerable: true,
  get: function () {
    return _modal.default;
  }
});

var _modal = _interopRequireDefault(require("./modal"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\import-token\\index.js", {"./import-token.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\import-token\\import-token.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\import-token\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _importToken = _interopRequireDefault(require("./import-token.container"));

var _default = _importToken.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\import-token\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\first-time-flow\\index.js", {"./first-time-flow.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\first-time-flow\\first-time-flow.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\first-time-flow\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _firstTimeFlow.default;
  }
});

var _firstTimeFlow = _interopRequireDefault(require("./first-time-flow.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\first-time-flow\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\settings\\index.js", {"./settings.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\settings\\settings.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\settings\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _settings.default;
  }
});

var _settings = _interopRequireDefault(require("./settings.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\settings\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\account-menu\\index.js", {"./account-menu.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\account-menu\\account-menu.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\account-menu\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _accountMenu.default;
  }
});

var _accountMenu = _interopRequireDefault(require("./account-menu.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\account-menu\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\index.js", {"../../../shared/constants/swaps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\swaps.js","../../../shared/constants/transaction":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\transaction.js","../../components/ui/actionable-message":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\actionable-message\\index.js","../../contexts/i18n":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\contexts\\i18n.js","../../ducks/swaps/swaps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\swaps\\swaps.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../helpers/higher-order-components/feature-toggled-route":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\feature-toggled-route.js","../../hooks/useGasFeeEstimates":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useGasFeeEstimates.js","../../hooks/useMetricEvent":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useMetricEvent.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../selectors/selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\selectors.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./awaiting-signatures":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\awaiting-signatures\\index.js","./awaiting-swap":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\awaiting-swap\\index.js","./build-quote":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\build-quote\\index.js","./loading-swaps-quotes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\loading-swaps-quotes\\index.js","./smart-transaction-status":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\smart-transaction-status\\index.js","./swaps.util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\swaps.util.js","./view-quote":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\view-quote\\index.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","lodash":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\lodash.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\swaps\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Swap;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _lodash = require("lodash");

var _i18n = require("../../contexts/i18n");

var _selectors = require("../../selectors/selectors");

var _swaps = require("../../ducks/swaps/swaps");

var _selectors2 = require("../../selectors");

var _routes = require("../../helpers/constants/routes");

var _swaps2 = require("../../../shared/constants/swaps");

var _actions = require("../../store/actions");

var _useMetricEvent = require("../../hooks/useMetricEvent");

var _useGasFeeEstimates = require("../../hooks/useGasFeeEstimates");

var _featureToggledRoute = _interopRequireDefault(require("../../helpers/higher-order-components/feature-toggled-route"));

var _transaction = require("../../../shared/constants/transaction");

var _actionableMessage = _interopRequireDefault(require("../../components/ui/actionable-message"));

var _swaps3 = require("./swaps.util");

var _awaitingSignatures = _interopRequireDefault(require("./awaiting-signatures"));

var _smartTransactionStatus = _interopRequireDefault(require("./smart-transaction-status"));

var _awaitingSwap = _interopRequireDefault(require("./awaiting-swap"));

var _loadingSwapsQuotes = _interopRequireDefault(require("./loading-swaps-quotes"));

var _buildQuote = _interopRequireDefault(require("./build-quote"));

var _viewQuote = _interopRequireDefault(require("./view-quote"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Swap() {
  var _approveTxData$txRece, _tradeTxData$txReceip, _fetchParams$sourceTo, _fetchParams$destinat, _fetchParams$sourceTo2, _fetchParams$destinat2;

  const t = (0, _react.useContext)(_i18n.I18nContext);
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    pathname
  } = (0, _reactRouterDom.useLocation)();
  const isAwaitingSwapRoute = pathname === _routes.AWAITING_SWAP_ROUTE;
  const isAwaitingSignaturesRoute = pathname === _routes.AWAITING_SIGNATURES_ROUTE;
  const isSwapsErrorRoute = pathname === _routes.SWAPS_ERROR_ROUTE;
  const isLoadingQuotesRoute = pathname === _routes.LOADING_QUOTES_ROUTE;
  const isSmartTransactionStatusRoute = pathname === _routes.SMART_TRANSACTION_STATUS_ROUTE;
  const isViewQuoteRoute = pathname === _routes.VIEW_QUOTE_ROUTE;
  const fetchParams = (0, _reactRedux.useSelector)(_swaps.getFetchParams, _lodash.isEqual);
  const {
    destinationTokenInfo = {}
  } = (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.metaData) || {};
  const routeState = (0, _reactRedux.useSelector)(_swaps.getBackgroundSwapRouteState);
  const selectedAccount = (0, _reactRedux.useSelector)(_selectors.getSelectedAccount, _reactRedux.shallowEqual);
  const quotes = (0, _reactRedux.useSelector)(_swaps.getQuotes, _lodash.isEqual);
  const txList = (0, _reactRedux.useSelector)(_selectors2.currentNetworkTxListSelector, _reactRedux.shallowEqual);
  const tradeTxId = (0, _reactRedux.useSelector)(_swaps.getTradeTxId);
  const approveTxId = (0, _reactRedux.useSelector)(_swaps.getApproveTxId);
  const aggregatorMetadata = (0, _reactRedux.useSelector)(_swaps.getAggregatorMetadata, _reactRedux.shallowEqual);
  const fetchingQuotes = (0, _reactRedux.useSelector)(_swaps.getFetchingQuotes);
  let swapsErrorKey = (0, _reactRedux.useSelector)(_swaps.getSwapsErrorKey);
  const swapsEnabled = (0, _reactRedux.useSelector)(_swaps.getSwapsFeatureIsLive);
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const isSwapsChain = (0, _reactRedux.useSelector)(_selectors.getIsSwapsChain);
  const networkAndAccountSupports1559 = (0, _reactRedux.useSelector)(_selectors2.checkNetworkAndAccountSupports1559);
  const defaultSwapsToken = (0, _reactRedux.useSelector)(_selectors2.getSwapsDefaultToken, _lodash.isEqual);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList, _lodash.isEqual);
  const listTokenValues = (0, _lodash.shuffle)(Object.values(tokenList));
  const reviewSwapClickedTimestamp = (0, _reactRedux.useSelector)(_swaps.getReviewSwapClickedTimestamp);
  const pendingSmartTransactions = (0, _reactRedux.useSelector)(_swaps.getPendingSmartTransactions);
  const reviewSwapClicked = Boolean(reviewSwapClickedTimestamp);
  const smartTransactionsOptInStatus = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsOptInStatus);
  const smartTransactionsEnabled = (0, _reactRedux.useSelector)(_swaps.getSmartTransactionsEnabled);
  const currentSmartTransactionsError = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsError);
  const smartTransactionsErrorMessageDismissed = (0, _reactRedux.useSelector)(_swaps.getCurrentSmartTransactionsErrorMessageDismissed);
  const showSmartTransactionsErrorMessage = currentSmartTransactionsError && !smartTransactionsErrorMessageDismissed;

  if (networkAndAccountSupports1559) {
    // This will pre-load gas fees before going to the View Quote page.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, _useGasFeeEstimates.useGasFeeEstimates)();
  }

  const {
    balance: ethBalance,
    address: selectedAccountAddress
  } = selectedAccount;
  const {
    destinationTokenAddedForSwap
  } = fetchParams || {};
  const approveTxData = approveTxId && txList.find(({
    id
  }) => approveTxId === id);
  const tradeTxData = tradeTxId && txList.find(({
    id
  }) => tradeTxId === id);
  const tokensReceived = (tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.txReceipt) && (0, _swaps3.getSwapsTokensReceivedFromTxMeta)(destinationTokenInfo === null || destinationTokenInfo === void 0 ? void 0 : destinationTokenInfo.symbol, tradeTxData, destinationTokenInfo === null || destinationTokenInfo === void 0 ? void 0 : destinationTokenInfo.address, selectedAccountAddress, destinationTokenInfo === null || destinationTokenInfo === void 0 ? void 0 : destinationTokenInfo.decimals, approveTxData, chainId);
  const tradeConfirmed = (tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.status) === _transaction.TRANSACTION_STATUSES.CONFIRMED;
  const approveError = (approveTxData === null || approveTxData === void 0 ? void 0 : approveTxData.status) === _transaction.TRANSACTION_STATUSES.FAILED || (approveTxData === null || approveTxData === void 0 ? void 0 : (_approveTxData$txRece = approveTxData.txReceipt) === null || _approveTxData$txRece === void 0 ? void 0 : _approveTxData$txRece.status) === '0x0';
  const tradeError = (tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.status) === _transaction.TRANSACTION_STATUSES.FAILED || (tradeTxData === null || tradeTxData === void 0 ? void 0 : (_tradeTxData$txReceip = tradeTxData.txReceipt) === null || _tradeTxData$txReceip === void 0 ? void 0 : _tradeTxData$txReceip.status) === '0x0';
  const conversionError = approveError || tradeError;

  if (conversionError && swapsErrorKey !== _swaps2.CONTRACT_DATA_DISABLED_ERROR) {
    swapsErrorKey = _swaps2.SWAP_FAILED_ERROR;
  }

  const clearTemporaryTokenRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    clearTemporaryTokenRef.current = () => {
      if (destinationTokenAddedForSwap && (!isAwaitingSwapRoute || conversionError)) {
        dispatch((0, _actions.removeToken)(destinationTokenInfo === null || destinationTokenInfo === void 0 ? void 0 : destinationTokenInfo.address));
      }
    };
  }, [conversionError, dispatch, destinationTokenAddedForSwap, destinationTokenInfo, fetchParams, isAwaitingSwapRoute]);
  (0, _react.useEffect)(() => {
    return () => {
      clearTemporaryTokenRef.current();
    };
  }, []); // eslint-disable-next-line

  (0, _react.useEffect)(() => {
    (0, _swaps3.fetchTokens)(chainId).then(tokens => {
      dispatch((0, _actions.setSwapsTokens)(tokens));
    }).catch(error => console.error(error));
    (0, _swaps3.fetchTopAssets)(chainId).then(topAssets => {
      dispatch((0, _swaps.setTopAssets)(topAssets));
    });
    (0, _swaps3.fetchAggregatorMetadata)(chainId).then(newAggregatorMetadata => {
      dispatch((0, _swaps.setAggregatorMetadata)(newAggregatorMetadata));
    });

    if (!networkAndAccountSupports1559) {
      dispatch((0, _swaps.fetchAndSetSwapsGasPriceInfo)(chainId));
    }

    return () => {
      dispatch((0, _swaps.prepareToLeaveSwaps)());
    };
  }, [dispatch, chainId, networkAndAccountSupports1559]);
  const hardwareWalletUsed = (0, _reactRedux.useSelector)(_selectors.isHardwareWallet);
  const hardwareWalletType = (0, _reactRedux.useSelector)(_selectors.getHardwareWalletType);
  const exitedSwapsEvent = (0, _useMetricEvent.useNewMetricEvent)({
    event: 'Exited Swaps',
    category: 'swaps',
    sensitiveProperties: {
      token_from: fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$sourceTo = fetchParams.sourceTokenInfo) === null || _fetchParams$sourceTo === void 0 ? void 0 : _fetchParams$sourceTo.symbol,
      token_from_amount: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value,
      request_type: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError,
      token_to: fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$destinat = fetchParams.destinationTokenInfo) === null || _fetchParams$destinat === void 0 ? void 0 : _fetchParams$destinat.symbol,
      slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
      custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) !== 2,
      current_screen: pathname.match(/\/swaps\/(.+)/u)[1],
      is_hardware_wallet: hardwareWalletUsed,
      hardware_wallet_type: hardwareWalletType,
      stx_enabled: smartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus
    }
  });
  const exitEventRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    exitEventRef.current = () => {
      exitedSwapsEvent();
    };
  });
  (0, _react.useEffect)(() => {
    const fetchSwapsLivenessAndFeatureFlagsWrapper = async () => {
      await dispatch((0, _swaps.fetchSwapsLivenessAndFeatureFlags)());
    };

    fetchSwapsLivenessAndFeatureFlagsWrapper();
    return () => {
      exitEventRef.current();
    };
  }, [dispatch]);
  (0, _react.useEffect)(() => {
    // If there is a swapsErrorKey and reviewSwapClicked is false, there was an error in silent quotes prefetching
    // and we don't want to show the error page in that case, because another API call for quotes can be successful.
    if (swapsErrorKey && !isSwapsErrorRoute && reviewSwapClicked) {
      history.push(_routes.SWAPS_ERROR_ROUTE);
    }
  }, [history, swapsErrorKey, isSwapsErrorRoute, reviewSwapClicked]);
  const beforeUnloadEventAddedRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    const fn = () => {
      clearTemporaryTokenRef.current();

      if (isLoadingQuotesRoute) {
        dispatch((0, _swaps.prepareToLeaveSwaps)());
      }

      return null;
    };

    if (isLoadingQuotesRoute && !beforeUnloadEventAddedRef.current) {
      beforeUnloadEventAddedRef.current = true;
      window.addEventListener('beforeunload', fn);
    }

    return () => window.removeEventListener('beforeunload', fn);
  }, [dispatch, isLoadingQuotesRoute]);
  const errorStxEvent = (0, _useMetricEvent.useNewMetricEvent)({
    event: 'Error Smart Transactions',
    category: 'swaps',
    sensitiveProperties: {
      token_from: fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$sourceTo2 = fetchParams.sourceTokenInfo) === null || _fetchParams$sourceTo2 === void 0 ? void 0 : _fetchParams$sourceTo2.symbol,
      token_from_amount: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.value,
      request_type: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.balanceError,
      token_to: fetchParams === null || fetchParams === void 0 ? void 0 : (_fetchParams$destinat2 = fetchParams.destinationTokenInfo) === null || _fetchParams$destinat2 === void 0 ? void 0 : _fetchParams$destinat2.symbol,
      slippage: fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage,
      custom_slippage: (fetchParams === null || fetchParams === void 0 ? void 0 : fetchParams.slippage) !== 2,
      current_screen: pathname.match(/\/swaps\/(.+)/u)[1],
      is_hardware_wallet: hardwareWalletUsed,
      hardware_wallet_type: hardwareWalletType,
      stx_enabled: smartTransactionsEnabled,
      stx_user_opt_in: smartTransactionsOptInStatus,
      stx_error: currentSmartTransactionsError
    }
  });
  (0, _react.useEffect)(() => {
    if (currentSmartTransactionsError) {
      errorStxEvent();
    }
  }, [errorStxEvent, currentSmartTransactionsError]);

  if (!isSwapsChain) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.DEFAULT_ROUTE
      }
    });
  }

  const isStxNotEnoughFundsError = currentSmartTransactionsError === 'not_enough_funds';
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__header-edit",
    onClick: async () => {
      await dispatch((0, _swaps.navigateBackToBuildQuote)(history));
    }
  }, isViewQuoteRoute && t('edit')), /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__title"
  }, t('swap')), /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__header-cancel",
    onClick: async () => {
      clearTemporaryTokenRef.current();
      dispatch((0, _swaps.clearSwapsState)());
      await dispatch((0, _actions.resetBackgroundSwapsState)());
      history.push(_routes.DEFAULT_ROUTE);
    }
  }, !isAwaitingSwapRoute && !isAwaitingSignaturesRoute && !isSmartTransactionStatusRoute && t('cancel'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "swaps__content"
  }, showSmartTransactionsErrorMessage && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
    type: isStxNotEnoughFundsError ? 'default' : 'warning',
    message: isStxNotEnoughFundsError ? /*#__PURE__*/_react.default.createElement("div", null, t('swapApproveNeedMoreTokensSmartTransactions', [defaultSwapsToken.symbol]), ' ', /*#__PURE__*/_react.default.createElement("span", {
      onClick: () => dispatch((0, _swaps.dismissCurrentSmartTransactionsErrorMessage)()),
      style: {
        textDecoration: 'underline',
        cursor: 'pointer'
      }
    }, t('stxTryRegular'))) : /*#__PURE__*/_react.default.createElement("div", {
      className: "build-quote__token-verification-warning-message"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "build-quote__bold"
    }, t('stxUnavailable')), /*#__PURE__*/_react.default.createElement("div", null, t('stxFallbackToNormal'))),
    className: isStxNotEnoughFundsError ? 'swaps__error-message' : 'actionable-message--left-aligned actionable-message--warning swaps__error-message',
    primaryAction: isStxNotEnoughFundsError ? null : {
      label: t('dismiss'),
      onClick: () => dispatch((0, _swaps.dismissCurrentSmartTransactionsErrorMessage)())
    },
    withRightButton: true
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_featureToggledRoute.default, {
    redirectRoute: _routes.SWAPS_MAINTENANCE_ROUTE,
    flag: swapsEnabled,
    path: _routes.BUILD_QUOTE_ROUTE,
    exact: true,
    render: () => {
      if (tradeTxData && !conversionError) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.AWAITING_SWAP_ROUTE
          }
        });
      } else if (tradeTxData && routeState) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.SWAPS_ERROR_ROUTE
          }
        });
      } else if (routeState === 'loading' && aggregatorMetadata) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.LOADING_QUOTES_ROUTE
          }
        });
      }

      return /*#__PURE__*/_react.default.createElement(_buildQuote.default, {
        ethBalance: ethBalance,
        selectedAccountAddress: selectedAccountAddress,
        shuffledTokensList: listTokenValues
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_featureToggledRoute.default, {
    redirectRoute: _routes.SWAPS_MAINTENANCE_ROUTE,
    flag: swapsEnabled,
    path: _routes.VIEW_QUOTE_ROUTE,
    exact: true,
    render: () => {
      if (pendingSmartTransactions.length > 0 && routeState === 'smartTransactionStatus') {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.SMART_TRANSACTION_STATUS_ROUTE
          }
        });
      }

      if (Object.values(quotes).length) {
        return /*#__PURE__*/_react.default.createElement(_viewQuote.default, {
          numberOfQuotes: Object.values(quotes).length
        });
      } else if (fetchParams) {
        return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
          to: {
            pathname: _routes.SWAPS_ERROR_ROUTE
          }
        });
      }

      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.BUILD_QUOTE_ROUTE
        }
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.SWAPS_ERROR_ROUTE,
    exact: true,
    render: () => {
      if (swapsErrorKey) {
        return /*#__PURE__*/_react.default.createElement(_awaitingSwap.default, {
          swapComplete: false,
          errorKey: swapsErrorKey,
          txHash: tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.hash,
          submittedTime: tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.submittedTime
        });
      }

      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.BUILD_QUOTE_ROUTE
        }
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_featureToggledRoute.default, {
    redirectRoute: _routes.SWAPS_MAINTENANCE_ROUTE,
    flag: swapsEnabled,
    path: _routes.LOADING_QUOTES_ROUTE,
    exact: true,
    render: () => {
      return aggregatorMetadata ? /*#__PURE__*/_react.default.createElement(_loadingSwapsQuotes.default, {
        loadingComplete: !fetchingQuotes && Boolean(Object.values(quotes).length),
        onDone: async () => {
          await dispatch((0, _actions.setBackgroundSwapRouteState)(''));

          if (swapsErrorKey === _swaps2.ERROR_FETCHING_QUOTES || swapsErrorKey === _swaps2.QUOTES_NOT_AVAILABLE_ERROR) {
            dispatch((0, _actions.setSwapsErrorKey)(_swaps2.QUOTES_NOT_AVAILABLE_ERROR));
            history.push(_routes.SWAPS_ERROR_ROUTE);
          } else {
            history.push(_routes.VIEW_QUOTE_ROUTE);
          }
        },
        aggregatorMetadata: aggregatorMetadata
      }) : /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.BUILD_QUOTE_ROUTE
        }
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.SWAPS_MAINTENANCE_ROUTE,
    exact: true,
    render: () => {
      return swapsEnabled === false ? /*#__PURE__*/_react.default.createElement(_awaitingSwap.default, {
        errorKey: _swaps2.OFFLINE_FOR_MAINTENANCE
      }) : /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.BUILD_QUOTE_ROUTE
        }
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.AWAITING_SIGNATURES_ROUTE,
    exact: true,
    render: () => {
      return /*#__PURE__*/_react.default.createElement(_awaitingSignatures.default, null);
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.SMART_TRANSACTION_STATUS_ROUTE,
    exact: true,
    render: () => {
      return /*#__PURE__*/_react.default.createElement(_smartTransactionStatus.default, null);
    }
  }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
    path: _routes.AWAITING_SWAP_ROUTE,
    exact: true,
    render: () => {
      return routeState === 'awaiting' || tradeTxData ? /*#__PURE__*/_react.default.createElement(_awaitingSwap.default, {
        swapComplete: tradeConfirmed,
        txHash: tradeTxData === null || tradeTxData === void 0 ? void 0 : tradeTxData.hash,
        tokensReceived: tokensReceived,
        submittingSwap: routeState === 'awaiting' && !(approveTxId || tradeTxId)
      }) : /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.DEFAULT_ROUTE
        }
      });
    }
  })))));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\index.js", {"./send":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\send.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\send\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _send.default;
  }
});

var _send = _interopRequireDefault(require("./send"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\home\\index.js", {"./home.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\home\\home.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\home\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _home.default;
  }
});

var _home = _interopRequireDefault(require("./home.container"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\home\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-transaction\\index.js", {"./confirm-transaction.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-transaction\\confirm-transaction.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\confirm-transaction\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _confirmTransaction = _interopRequireDefault(require("./confirm-transaction.container"));

var _default = _confirmTransaction.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-transaction\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\cycle.js", {"./path-getter":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\path-getter.js","./utils":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\utils.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\jsan\lib\cycle.js
      return function (require, module, exports) {
var pathGetter = require('./path-getter');
var utils = require('./utils');

var WMap = typeof WeakMap !== 'undefined'?
  WeakMap:
  function() {
    var keys = [];
    var values = [];
    return {
      set: function(key, value) {
        keys.push(key);
        values.push(value);
      },
      get: function(key) {
        for (var i = 0; i < keys.length; i++) {
          if (keys[i] === key) {
            return values[i];
          }
        }
      }
    }
  };

// Based on https://github.com/douglascrockford/JSON-js/blob/master/cycle.js

exports.decycle = function decycle(object, options, replacer) {
  'use strict';

  var map = new WMap()

  var noCircularOption = !Object.prototype.hasOwnProperty.call(options, 'circular');
  var withRefs = options.refs !== false;

  return (function derez(_value, path, key) {

    // The derez recurses through the object, producing the deep copy.

    var i,        // The loop counter
      name,       // Property name
      nu;         // The new object or array

    // typeof null === 'object', so go on if this value is really an object but not
    // one of the weird builtin objects.

    var value = typeof replacer === 'function' ? replacer(key || '', _value) : _value;

    if (options.date && value instanceof Date) {
      return {$jsan: 'd' + value.getTime()};
    }
    if (options.regex && value instanceof RegExp) {
      return {$jsan: 'r' + utils.getRegexFlags(value) + ',' + value.source};
    }
    if (options['function'] && typeof value === 'function') {
      return {$jsan: 'f' + utils.stringifyFunction(value, options['function'])}
    }
    if (options['nan'] && typeof value === 'number' && isNaN(value)) {
      return {$jsan: 'n'}
    }
    if (options['infinity']) {
      if (Number.POSITIVE_INFINITY === value) return {$jsan: 'i'}
      if (Number.NEGATIVE_INFINITY === value) return {$jsan: 'y'}
    }
    if (options['undefined'] && value === undefined) {
      return {$jsan: 'u'}
    }
    if (options['error'] && value instanceof Error) {
      return {$jsan: 'e' + value.message}
    }
    if (options['symbol'] && typeof value === 'symbol') {
      var symbolKey = Symbol.keyFor(value)
      if (symbolKey !== undefined) {
        return {$jsan: 'g' + symbolKey}
      }

      // 'Symbol(foo)'.slice(7, -1) === 'foo'
      return {$jsan: 's' + value.toString().slice(7, -1)}
    }

    if (options['map'] && typeof Map === 'function' && value instanceof Map && typeof Array.from === 'function') {
      return {$jsan: 'm' + JSON.stringify(decycle(Array.from(value), options, replacer))}
    }

    if (options['set'] && typeof Set === 'function' && value instanceof Set && typeof Array.from === 'function') {
      return {$jsan: 'l' + JSON.stringify(decycle(Array.from(value), options, replacer))}
    }

    if (value && typeof value.toJSON === 'function') {
      try {
        value = value.toJSON(key);
      } catch (error) {
        var keyString = (key || '$');
        return "toJSON failed for '" + (map.get(value) || keyString) + "'";
      }
    }

    if (typeof value === 'object' && value !== null &&
      !(value instanceof Boolean) &&
      !(value instanceof Date)    &&
      !(value instanceof Number)  &&
      !(value instanceof RegExp)  &&
      !(value instanceof String)  &&
      !(typeof value === 'symbol')  &&
      !(value instanceof Error)) {

        // If the value is an object or array, look to see if we have already
        // encountered it. If so, return a $ref/path object.

      if (typeof value === 'object') {
        var foundPath = map.get(value);
        if (foundPath) {
          if (noCircularOption && withRefs) {
            return {$jsan: foundPath};
          }
          if (path.indexOf(foundPath) === 0) {
            if (!noCircularOption) {
              return typeof options.circular === 'function'?
              options.circular(value, path, foundPath):
              options.circular;
            }
            return {$jsan: foundPath};
          }
          if (withRefs) return {$jsan: foundPath};
        }
        map.set(value, path);
      }


      // If it is an array, replicate the array.

      if (Object.prototype.toString.apply(value) === '[object Array]') {
          nu = [];
          for (i = 0; i < value.length; i += 1) {
              nu[i] = derez(value[i], path + '[' + i + ']', i);
          }
      } else {

        // If it is an object, replicate the object.

        nu = {};
        for (name in value) {
          if (Object.prototype.hasOwnProperty.call(value, name)) {
            var nextPath = /^\w+$/.test(name) ?
              '.' + name :
              '[' + JSON.stringify(name) + ']';
            nu[name] = name === '$jsan' ? [derez(value[name], path + nextPath)] : derez(value[name], path + nextPath, name);
          }
        }
      }
      return nu;
    }
    return value;
  }(object, '$'));
};


exports.retrocycle = function retrocycle($) {
  'use strict';


  return (function rez(value) {

    // The rez function walks recursively through the object looking for $jsan
    // properties. When it finds one that has a value that is a path, then it
    // replaces the $jsan object with a reference to the value that is found by
    // the path.

    var i, item, name, path;

    if (value && typeof value === 'object') {
      if (Object.prototype.toString.apply(value) === '[object Array]') {
        for (i = 0; i < value.length; i += 1) {
          item = value[i];
          if (item && typeof item === 'object') {
            if (item.$jsan) {
              value[i] = utils.restore(item.$jsan, $);
            } else {
              rez(item);
            }
          }
        }
      } else {
        for (name in value) {
          // base case passed raw object
          if(typeof value[name] === 'string' && name === '$jsan'){
            return utils.restore(value.$jsan, $);
            break;
          }
          else {
            if (name === '$jsan') {
              value[name] = value[name][0];
            }
            if (typeof value[name] === 'object') {
              item = value[name];
              if (item && typeof item === 'object') {
                if (item.$jsan) {
                  value[name] = utils.restore(item.$jsan, $);
                } else {
                  rez(item);
                }
              }
            }
          }
        }
      }
    }
    return value;
  }($));
};

      };
    };
  }
}, {package:"jsan",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\cycle.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\auth.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\lib\auth.js
      return function (require, module, exports) {
var AuthEngine = function () {
  this._internalStorage = {};
  this.isLocalStorageEnabled = this._checkLocalStorageEnabled();
};

AuthEngine.prototype._checkLocalStorageEnabled = function () {
  var err;
  try {
    // Some browsers will throw an error here if localStorage is disabled.
    global.localStorage;

    // Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem
    // throw QuotaExceededError. We're going to detect this and avoid hard to debug edge cases.
    global.localStorage.setItem('__scLocalStorageTest', 1);
    global.localStorage.removeItem('__scLocalStorageTest');
  } catch (e) {
    err = e;
  }
  return !err;
};

AuthEngine.prototype.saveToken = function (name, token, options, callback) {
  if (this.isLocalStorageEnabled && global.localStorage) {
    global.localStorage.setItem(name, token);
  } else {
    this._internalStorage[name] = token;
  }
  callback && callback(null, token);
};

AuthEngine.prototype.removeToken = function (name, callback) {
  var token;

  this.loadToken(name, function (err, authToken) {
    token = authToken;
  });

  if (this.isLocalStorageEnabled && global.localStorage) {
    global.localStorage.removeItem(name);
  } else {
    delete this._internalStorage[name];
  }

  callback && callback(null, token);
};

AuthEngine.prototype.loadToken = function (name, callback) {
  var token;

  if (this.isLocalStorageEnabled && global.localStorage) {
    token = global.localStorage.getItem(name);
  } else {
    token = this._internalStorage[name] || null;
  }
  callback(null, token);
};

module.exports.AuthEngine = AuthEngine;

      };
    };
  }
}, {package:"socketcluster-client",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\auth.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-errors\\index.js", {"./decycle":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-errors\\decycle.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\sc-errors\index.js
      return function (require, module, exports) {
var decycle = require('./decycle');

var isStrict = (function () { return !this; })();

function AuthTokenExpiredError(message, expiry) {
  this.name = 'AuthTokenExpiredError';
  this.message = message;
  this.expiry = expiry;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
AuthTokenExpiredError.prototype = Object.create(Error.prototype);


function AuthTokenInvalidError(message) {
  this.name = 'AuthTokenInvalidError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
AuthTokenInvalidError.prototype = Object.create(Error.prototype);


function AuthTokenNotBeforeError(message, date) {
  this.name = 'AuthTokenNotBeforeError';
  this.message = message;
  this.date = date;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
AuthTokenNotBeforeError.prototype = Object.create(Error.prototype);


// For any other auth token error.
function AuthTokenError(message) {
  this.name = 'AuthTokenError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
AuthTokenError.prototype = Object.create(Error.prototype);

// For any other auth error; not specifically related to the auth token itself.
function AuthError(message) {
  this.name = 'AuthError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
AuthError.prototype = Object.create(Error.prototype);


function SilentMiddlewareBlockedError(message, type) {
  this.name = 'SilentMiddlewareBlockedError';
  this.message = message;
  this.type = type;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
SilentMiddlewareBlockedError.prototype = Object.create(Error.prototype);


function InvalidActionError(message) {
  this.name = 'InvalidActionError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
InvalidActionError.prototype = Object.create(Error.prototype);

function InvalidArgumentsError(message) {
  this.name = 'InvalidArgumentsError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
InvalidArgumentsError.prototype = Object.create(Error.prototype);

function InvalidOptionsError(message) {
  this.name = 'InvalidOptionsError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
InvalidOptionsError.prototype = Object.create(Error.prototype);


function InvalidMessageError(message) {
  this.name = 'InvalidMessageError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
InvalidMessageError.prototype = Object.create(Error.prototype);


function SocketProtocolError(message, code) {
  this.name = 'SocketProtocolError';
  this.message = message;
  this.code = code;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
SocketProtocolError.prototype = Object.create(Error.prototype);


function ServerProtocolError(message) {
  this.name = 'ServerProtocolError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
ServerProtocolError.prototype = Object.create(Error.prototype);

function HTTPServerError(message) {
  this.name = 'HTTPServerError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
HTTPServerError.prototype = Object.create(Error.prototype);


function ResourceLimitError(message) {
  this.name = 'ResourceLimitError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
ResourceLimitError.prototype = Object.create(Error.prototype);


function TimeoutError(message) {
  this.name = 'TimeoutError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
TimeoutError.prototype = Object.create(Error.prototype);


function BadConnectionError(message, type) {
  this.name = 'BadConnectionError';
  this.message = message;
  this.type = type;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
BadConnectionError.prototype = Object.create(Error.prototype);


function BrokerError(message) {
  this.name = 'BrokerError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
BrokerError.prototype = Object.create(Error.prototype);


function ProcessExitError(message, code) {
  this.name = 'ProcessExitError';
  this.message = message;
  this.code = code;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
ProcessExitError.prototype = Object.create(Error.prototype);


function UnknownError(message) {
  this.name = 'UnknownError';
  this.message = message;
  if (Error.captureStackTrace && !isStrict) {
    Error.captureStackTrace(this, arguments.callee);
  } else {
    this.stack = (new Error()).stack;
  }
}
UnknownError.prototype = Object.create(Error.prototype);


// Expose all error types.

module.exports = {
  AuthTokenExpiredError: AuthTokenExpiredError,
  AuthTokenInvalidError: AuthTokenInvalidError,
  AuthTokenNotBeforeError: AuthTokenNotBeforeError,
  AuthTokenError: AuthTokenError,
  AuthError: AuthError,
  SilentMiddlewareBlockedError: SilentMiddlewareBlockedError,
  InvalidActionError: InvalidActionError,
  InvalidArgumentsError: InvalidArgumentsError,
  InvalidOptionsError: InvalidOptionsError,
  InvalidMessageError: InvalidMessageError,
  SocketProtocolError: SocketProtocolError,
  ServerProtocolError: ServerProtocolError,
  HTTPServerError: HTTPServerError,
  ResourceLimitError: ResourceLimitError,
  TimeoutError: TimeoutError,
  BadConnectionError: BadConnectionError,
  BrokerError: BrokerError,
  ProcessExitError: ProcessExitError,
  UnknownError: UnknownError
};

module.exports.socketProtocolErrorStatuses = {
  1001: 'Socket was disconnected',
  1002: 'A WebSocket protocol error was encountered',
  1003: 'Server terminated socket because it received invalid data',
  1005: 'Socket closed without status code',
  1006: 'Socket hung up',
  1007: 'Message format was incorrect',
  1008: 'Encountered a policy violation',
  1009: 'Message was too big to process',
  1010: 'Client ended the connection because the server did not comply with extension requirements',
  1011: 'Server encountered an unexpected fatal condition',
  4000: 'Server ping timed out',
  4001: 'Client pong timed out',
  4002: 'Server failed to sign auth token',
  4003: 'Failed to complete handshake',
  4004: 'Client failed to save auth token',
  4005: 'Did not receive #handshake from client before timeout',
  4006: 'Failed to bind socket to message broker',
  4007: 'Client connection establishment timed out',
  4008: 'Server rejected handshake from client',
  4009: 'Server received a message before the client handshake'
};

module.exports.socketProtocolIgnoreStatuses = {
  1000: 'Socket closed normally',
  1001: 'Socket hung up'
};

// Properties related to error domains cannot be serialized.
var unserializableErrorProperties = {
  domain: 1,
  domainEmitter: 1,
  domainThrown: 1
};

// Convert an error into a JSON-compatible type which can later be hydrated
// back to its *original* form.
module.exports.dehydrateError = function dehydrateError(error, includeStackTrace) {
  var dehydratedError;

  if (error && typeof error === 'object') {
    dehydratedError = {
      message: error.message
    };
    if (includeStackTrace) {
      dehydratedError.stack = error.stack;
    }
    for (var i in error) {
      if (!unserializableErrorProperties[i]) {
        dehydratedError[i] = error[i];
      }
    }
  } else if (typeof error === 'function') {
    dehydratedError = '[function ' + (error.name || 'anonymous') + ']';
  } else {
    dehydratedError = error;
  }

  return decycle(dehydratedError);
};

// Convert a dehydrated error back to its *original* form.
module.exports.hydrateError = function hydrateError(error) {
  var hydratedError = null;
  if (error != null) {
    if (typeof error === 'object') {
      hydratedError = new Error(error.message);
      for (var i in error) {
        if (error.hasOwnProperty(i)) {
          hydratedError[i] = error[i];
        }
      }
    } else {
      hydratedError = error;
    }
  }
  return hydratedError;
};

module.exports.decycle = decycle;

      };
    };
  }
}, {package:"sc-errors",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-errors\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-formatter\\index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\sc-formatter\index.js
      return function (require, module, exports) {
var base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var validJSONStartRegex = /^[ \n\r\t]*[{\[]/;

var arrayBufferToBase64 = function (arraybuffer) {
  var bytes = new Uint8Array(arraybuffer);
  var len = bytes.length;
  var base64 = '';

  for (var i = 0; i < len; i += 3) {
    base64 += base64Chars[bytes[i] >> 2];
    base64 += base64Chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
    base64 += base64Chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
    base64 += base64Chars[bytes[i + 2] & 63];
  }

  if ((len % 3) === 2) {
    base64 = base64.substring(0, base64.length - 1) + '=';
  } else if (len % 3 === 1) {
    base64 = base64.substring(0, base64.length - 2) + '==';
  }

  return base64;
};

var binaryToBase64Replacer = function (key, value) {
  if (global.ArrayBuffer && value instanceof global.ArrayBuffer) {
    return {
      base64: true,
      data: arrayBufferToBase64(value)
    };
  } else if (global.Buffer) {
    if (value instanceof global.Buffer){
      return {
        base64: true,
        data: value.toString('base64')
      };
    }
    // Some versions of Node.js convert Buffers to Objects before they are passed to
    // the replacer function - Because of this, we need to rehydrate Buffers
    // before we can convert them to base64 strings.
    if (value && value.type === 'Buffer' && Array.isArray(value.data)) {
      var rehydratedBuffer;
      if (global.Buffer.from) {
        rehydratedBuffer = global.Buffer.from(value.data);
      } else {
        rehydratedBuffer = new global.Buffer(value.data);
      }
      return {
        base64: true,
        data: rehydratedBuffer.toString('base64')
      };
    }
  }
  return value;
};

// Decode the data which was transmitted over the wire to a JavaScript Object in a format which SC understands.
// See encode function below for more details.
module.exports.decode = function (input) {
  if (input == null) {
   return null;
  }
  // Leave ping or pong message as is
  if (input === '#1' || input === '#2') {
    return input;
  }
  var message = input.toString();

  // Performance optimization to detect invalid JSON packet sooner.
  if (!validJSONStartRegex.test(message)) {
    return message;
  }

  try {
    return JSON.parse(message);
  } catch (err) {}
  return message;
};

// Encode a raw JavaScript object (which is in the SC protocol format) into a format for
// transfering it over the wire. In this case, we just convert it into a simple JSON string.
// If you want to create your own custom codec, you can encode the object into any format
// (e.g. binary ArrayBuffer or string with any kind of compression) so long as your decode
// function is able to rehydrate that object back into its original JavaScript Object format
// (which adheres to the SC protocol).
// See https://github.com/SocketCluster/socketcluster/blob/master/socketcluster-protocol.md
// for details about the SC protocol.
module.exports.encode = function (object) {
  // Leave ping or pong message as is
  if (object === '#1' || object === '#2') {
    return object;
  }
  return JSON.stringify(object, binaryToBase64Replacer);
};

      };
    };
  }
}, {package:"sc-formatter",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-formatter\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\clone\\clone.js", {"buffer":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\browserify\\node_modules\\buffer\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\node_modules\clone\clone.js
      return function (require, module, exports) {
(function (Buffer){(function (){
var clone = (function() {
'use strict';

function _instanceof(obj, type) {
  return type != null && obj instanceof type;
}

var nativeMap;
try {
  nativeMap = Map;
} catch(_) {
  // maybe a reference error because no `Map`. Give it a dummy value that no
  // value will ever be an instanceof.
  nativeMap = function() {};
}

var nativeSet;
try {
  nativeSet = Set;
} catch(_) {
  nativeSet = function() {};
}

var nativePromise;
try {
  nativePromise = Promise;
} catch(_) {
  nativePromise = function() {};
}

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/
function clone(parent, circular, depth, prototype, includeNonEnumerable) {
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    includeNonEnumerable = circular.includeNonEnumerable;
    circular = circular.circular;
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth === 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (_instanceof(parent, nativeMap)) {
      child = new nativeMap();
    } else if (_instanceof(parent, nativeSet)) {
      child = new nativeSet();
    } else if (_instanceof(parent, nativePromise)) {
      child = new nativePromise(function (resolve, reject) {
        parent.then(function(value) {
          resolve(_clone(value, depth - 1));
        }, function(err) {
          reject(_clone(err, depth - 1));
        });
      });
    } else if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      child = new Buffer(parent.length);
      parent.copy(child);
      return child;
    } else if (_instanceof(parent, Error)) {
      child = Object.create(parent);
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    if (_instanceof(parent, nativeMap)) {
      parent.forEach(function(value, key) {
        var keyChild = _clone(key, depth - 1);
        var valueChild = _clone(value, depth - 1);
        child.set(keyChild, valueChild);
      });
    }
    if (_instanceof(parent, nativeSet)) {
      parent.forEach(function(value) {
        var entryChild = _clone(value, depth - 1);
        child.add(entryChild);
      });
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(parent);
      for (var i = 0; i < symbols.length; i++) {
        // Don't need to worry about cloning a symbol because it is a primitive,
        // like a number or string.
        var symbol = symbols[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
          continue;
        }
        child[symbol] = _clone(parent[symbol], depth - 1);
        if (!descriptor.enumerable) {
          Object.defineProperty(child, symbol, {
            enumerable: false
          });
        }
      }
    }

    if (includeNonEnumerable) {
      var allPropertyNames = Object.getOwnPropertyNames(parent);
      for (var i = 0; i < allPropertyNames.length; i++) {
        var propertyName = allPropertyNames[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
        if (descriptor && descriptor.enumerable) {
          continue;
        }
        child[propertyName] = _clone(parent[propertyName], depth - 1);
        Object.defineProperty(child, propertyName, {
          enumerable: false
        });
      }
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
}
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
}
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
}
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
}
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
}
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if (typeof module === 'object' && module.exports) {
  module.exports = clone;
}

}).call(this)}).call(this,require("buffer").Buffer)

      };
    };
  }
}, {package:"clone",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\clone\\clone.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\response.js", {"sc-errors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-errors\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\lib\response.js
      return function (require, module, exports) {
var scErrors = require('sc-errors');
var InvalidActionError = scErrors.InvalidActionError;

var Response = function (socket, id) {
  this.socket = socket;
  this.id = id;
  this.sent = false;
};

Response.prototype._respond = function (responseData) {
  if (this.sent) {
    throw new InvalidActionError('Response ' + this.id + ' has already been sent');
  } else {
    this.sent = true;
    this.socket.send(this.socket.encode(responseData));
  }
};

Response.prototype.end = function (data) {
  if (this.id) {
    var responseData = {
      rid: this.id
    };
    if (data !== undefined) {
      responseData.data = data;
    }
    this._respond(responseData);
  }
};

Response.prototype.error = function (error, data) {
  if (this.id) {
    var err = scErrors.dehydrateError(error);

    var responseData = {
      rid: this.id,
      error: err
    };
    if (data !== undefined) {
      responseData.data = data;
    }

    this._respond(responseData);
  }
};

Response.prototype.callback = function (error, data) {
  if (error) {
    this.error(error, data);
  } else {
    this.end(data);
  }
};

module.exports.Response = Response;

      };
    };
  }
}, {package:"socketcluster-client",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\response.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\sctransport.js", {"./response":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\response.js","component-emitter":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\component-emitter\\index.js","querystring":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\querystring-es3\\index.js","sc-errors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-errors\\index.js","ws":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\ws-browser.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\lib\sctransport.js
      return function (require, module, exports) {
var Emitter = require('component-emitter');
var Response = require('./response').Response;
var querystring = require('querystring');
var WebSocket;
var createWebSocket;

if (global.WebSocket) {
  WebSocket = global.WebSocket;
  createWebSocket = function (uri, options) {
    return new WebSocket(uri);
  };
} else {
  WebSocket = require('ws');
  createWebSocket = function (uri, options) {
    return new WebSocket(uri, null, options);
  };
}

var scErrors = require('sc-errors');
var TimeoutError = scErrors.TimeoutError;
var BadConnectionError = scErrors.BadConnectionError;


var SCTransport = function (authEngine, codecEngine, options) {
  var self = this;

  this.state = this.CLOSED;
  this.auth = authEngine;
  this.codec = codecEngine;
  this.options = options;
  this.connectTimeout = options.connectTimeout;
  this.pingTimeout = options.ackTimeout;
  this.pingTimeoutDisabled = !!options.pingTimeoutDisabled;
  this.callIdGenerator = options.callIdGenerator;
  this.authTokenName = options.authTokenName;

  this._pingTimeoutTicker = null;
  this._callbackMap = {};
  this._batchSendList = [];

  // Open the connection.

  this.state = this.CONNECTING;
  var uri = this.uri();

  var wsSocket = createWebSocket(uri, this.options);
  wsSocket.binaryType = this.options.binaryType;

  this.socket = wsSocket;

  wsSocket.onopen = function () {
    self._onOpen();
  };

  wsSocket.onclose = function (event) {
    var code;
    if (event.code == null) {
      // This is to handle an edge case in React Native whereby
      // event.code is undefined when the mobile device is locked.
      // TODO: This is not perfect since this condition could also apply to
      // an abnormal close (no close control frame) which would be a 1006.
      code = 1005;
    } else {
      code = event.code;
    }
    self._onClose(code, event.reason);
  };

  wsSocket.onmessage = function (message, flags) {
    self._onMessage(message.data);
  };

  wsSocket.onerror = function (error) {
    // The onclose event will be called automatically after the onerror event
    // if the socket is connected - Otherwise, if it's in the middle of
    // connecting, we want to close it manually with a 1006 - This is necessary
    // to prevent inconsistent behavior when running the client in Node.js
    // vs in a browser.

    if (self.state === self.CONNECTING) {
      self._onClose(1006);
    }
  };

  this._connectTimeoutRef = setTimeout(function () {
    self._onClose(4007);
    self.socket.close(4007);
  }, this.connectTimeout);
};

SCTransport.prototype = Object.create(Emitter.prototype);

SCTransport.CONNECTING = SCTransport.prototype.CONNECTING = 'connecting';
SCTransport.OPEN = SCTransport.prototype.OPEN = 'open';
SCTransport.CLOSED = SCTransport.prototype.CLOSED = 'closed';

SCTransport.prototype.uri = function () {
  var query = this.options.query || {};
  var schema = this.options.secure ? 'wss' : 'ws';

  if (this.options.timestampRequests) {
    query[this.options.timestampParam] = (new Date()).getTime();
  }

  query = querystring.encode(query);

  if (query.length) {
    query = '?' + query;
  }

  var host;
  if (this.options.host) {
    host = this.options.host;
  } else {
    var port = '';

    if (this.options.port && ((schema === 'wss' && this.options.port !== 443)
      || (schema === 'ws' && this.options.port !== 80))) {
      port = ':' + this.options.port;
    }
    host = this.options.hostname + port;
  }

  return schema + '://' + host + this.options.path + query;
};

SCTransport.prototype._onOpen = function () {
  var self = this;

  clearTimeout(this._connectTimeoutRef);
  this._resetPingTimeout();

  this._handshake(function (err, status) {
    if (err) {
      var statusCode;
      if (status && status.code) {
        statusCode = status.code;
      } else {
        statusCode = 4003;
      }
      self._onError(err);
      self._onClose(statusCode, err.toString());
      self.socket.close(statusCode);
    } else {
      self.state = self.OPEN;
      Emitter.prototype.emit.call(self, 'open', status);
      self._resetPingTimeout();
    }
  });
};

SCTransport.prototype._handshake = function (callback) {
  var self = this;
  this.auth.loadToken(this.authTokenName, function (err, token) {
    if (err) {
      callback(err);
    } else {
      // Don't wait for this.state to be 'open'.
      // The underlying WebSocket (this.socket) is already open.
      var options = {
        force: true
      };
      self.emit('#handshake', {
        authToken: token
      }, options, function (err, status) {
        if (status) {
          // Add the token which was used as part of authentication attempt
          // to the status object.
          status.authToken = token;
          if (status.authError) {
            status.authError = scErrors.hydrateError(status.authError);
          }
        }
        callback(err, status);
      });
    }
  });
};

SCTransport.prototype._abortAllPendingEventsDueToBadConnection = function (failureType) {
  for (var i in this._callbackMap) {
    if (this._callbackMap.hasOwnProperty(i)) {
      var eventObject = this._callbackMap[i];
      delete this._callbackMap[i];

      clearTimeout(eventObject.timeout);
      delete eventObject.timeout;

      var errorMessage = "Event '" + eventObject.event +
        "' was aborted due to a bad connection";
      var badConnectionError = new BadConnectionError(errorMessage, failureType);

      var callback = eventObject.callback;
      delete eventObject.callback;
      callback.call(eventObject, badConnectionError, eventObject);
    }
  }
};

SCTransport.prototype._onClose = function (code, data) {
  delete this.socket.onopen;
  delete this.socket.onclose;
  delete this.socket.onmessage;
  delete this.socket.onerror;

  clearTimeout(this._connectTimeoutRef);
  clearTimeout(this._pingTimeoutTicker);
  clearTimeout(this._batchTimeout);

  if (this.state === this.OPEN) {
    this.state = this.CLOSED;
    Emitter.prototype.emit.call(this, 'close', code, data);
    this._abortAllPendingEventsDueToBadConnection('disconnect');

  } else if (this.state === this.CONNECTING) {
    this.state = this.CLOSED;
    Emitter.prototype.emit.call(this, 'openAbort', code, data);
    this._abortAllPendingEventsDueToBadConnection('connectAbort');
  }
};

SCTransport.prototype._handleEventObject = function (obj, message) {
  if (obj && obj.event != null) {
    var response = new Response(this, obj.cid);
    Emitter.prototype.emit.call(this, 'event', obj.event, obj.data, response);
  } else if (obj && obj.rid != null) {
    var eventObject = this._callbackMap[obj.rid];
    if (eventObject) {
      clearTimeout(eventObject.timeout);
      delete eventObject.timeout;
      delete this._callbackMap[obj.rid];

      if (eventObject.callback) {
        var rehydratedError = scErrors.hydrateError(obj.error);
        eventObject.callback(rehydratedError, obj.data);
      }
    }
  } else {
    Emitter.prototype.emit.call(this, 'event', 'raw', message);
  }
};

SCTransport.prototype._onMessage = function (message) {
  Emitter.prototype.emit.call(this, 'event', 'message', message);

  var obj = this.decode(message);

  // If ping
  if (obj === '#1') {
    this._resetPingTimeout();
    if (this.socket.readyState === this.socket.OPEN) {
      this.sendObject('#2');
    }
  } else {
    if (Array.isArray(obj)) {
      var len = obj.length;
      for (var i = 0; i < len; i++) {
        this._handleEventObject(obj[i], message);
      }
    } else {
      this._handleEventObject(obj, message);
    }
  }
};

SCTransport.prototype._onError = function (err) {
  Emitter.prototype.emit.call(this, 'error', err);
};

SCTransport.prototype._resetPingTimeout = function () {
  if (this.pingTimeoutDisabled) {
    return;
  }
  var self = this;

  var now = (new Date()).getTime();
  clearTimeout(this._pingTimeoutTicker);

  this._pingTimeoutTicker = setTimeout(function () {
    self._onClose(4000);
    self.socket.close(4000);
  }, this.pingTimeout);
};

SCTransport.prototype.getBytesReceived = function () {
  return this.socket.bytesReceived;
};

SCTransport.prototype.close = function (code, data) {
  code = code || 1000;

  if (this.state === this.OPEN) {
    var packet = {
      code: code,
      data: data
    };
    this.emit('#disconnect', packet);

    this._onClose(code, data);
    this.socket.close(code);

  } else if (this.state === this.CONNECTING) {
    this._onClose(code, data);
    this.socket.close(code);
  }
};

SCTransport.prototype.emitObject = function (eventObject, options) {
  var simpleEventObject = {
    event: eventObject.event,
    data: eventObject.data
  };

  if (eventObject.callback) {
    simpleEventObject.cid = eventObject.cid = this.callIdGenerator();
    this._callbackMap[eventObject.cid] = eventObject;
  }

  this.sendObject(simpleEventObject, options);

  return eventObject.cid || null;
};

SCTransport.prototype._handleEventAckTimeout = function (eventObject) {
  if (eventObject.cid) {
    delete this._callbackMap[eventObject.cid];
  }
  delete eventObject.timeout;

  var callback = eventObject.callback;
  if (callback) {
    delete eventObject.callback;
    var error = new TimeoutError("Event response for '" + eventObject.event + "' timed out");
    callback.call(eventObject, error, eventObject);
  }
};

// The last two optional arguments (a and b) can be options and/or callback
SCTransport.prototype.emit = function (event, data, a, b) {
  var self = this;

  var callback, options;

  if (b) {
    options = a;
    callback = b;
  } else {
    if (a instanceof Function) {
      options = {};
      callback = a;
    } else {
      options = a;
    }
  }

  var eventObject = {
    event: event,
    data: data,
    callback: callback
  };

  if (callback && !options.noTimeout) {
    eventObject.timeout = setTimeout(function () {
      self._handleEventAckTimeout(eventObject);
    }, this.options.ackTimeout);
  }

  var cid = null;
  if (this.state === this.OPEN || options.force) {
    cid = this.emitObject(eventObject, options);
  }
  return cid;
};

SCTransport.prototype.cancelPendingResponse = function (cid) {
  delete this._callbackMap[cid];
};

SCTransport.prototype.decode = function (message) {
  return this.codec.decode(message);
};

SCTransport.prototype.encode = function (object) {
  return this.codec.encode(object);
};

SCTransport.prototype.send = function (data) {
  if (this.socket.readyState !== this.socket.OPEN) {
    this._onClose(1005);
  } else {
    this.socket.send(data);
  }
};

SCTransport.prototype.serializeObject = function (object) {
  var str, formatError;
  try {
    str = this.encode(object);
  } catch (err) {
    formatError = err;
    this._onError(formatError);
  }
  if (!formatError) {
    return str;
  }
  return null;
};

SCTransport.prototype.sendObjectBatch = function (object) {
  var self = this;

  this._batchSendList.push(object);
  if (this._batchTimeout) {
    return;
  }

  this._batchTimeout = setTimeout(function () {
    delete self._batchTimeout;
    if (self._batchSendList.length) {
      var str = self.serializeObject(self._batchSendList);
      if (str != null) {
        self.send(str);
      }
      self._batchSendList = [];
    }
  }, this.options.pubSubBatchDuration || 0);
};

SCTransport.prototype.sendObjectSingle = function (object) {
  var str = this.serializeObject(object);
  if (str != null) {
    this.send(str);
  }
};

SCTransport.prototype.sendObject = function (object, options) {
  if (options && options.batch) {
    this.sendObjectBatch(object);
  } else {
    this.sendObjectSingle(object);
  }
};

module.exports.SCTransport = SCTransport;

      };
    };
  }
}, {package:"socketcluster-client",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\sctransport.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\linked-list\\index.js", {"./_source/linked-list.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\linked-list\\_source\\linked-list.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\linked-list\index.js
      return function (require, module, exports) {
'use strict';

module.exports = require('./_source/linked-list.js');

      };
    };
  }
}, {package:"linked-list",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\linked-list\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-channel\\index.js", {"component-emitter":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-channel\\node_modules\\component-emitter\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\sc-channel\index.js
      return function (require, module, exports) {
var Emitter = require('component-emitter');

var SCChannel = function (name, client, options) {
  var self = this;

  Emitter.call(this);

  this.PENDING = 'pending';
  this.SUBSCRIBED = 'subscribed';
  this.UNSUBSCRIBED = 'unsubscribed';

  this.name = name;
  this.state = this.UNSUBSCRIBED;
  this.client = client;

  this.options = options || {};
  this.setOptions(this.options);
};

SCChannel.prototype = Object.create(Emitter.prototype);

SCChannel.prototype.setOptions = function (options) {
  if (!options) {
    options = {};
  }
  this.waitForAuth = options.waitForAuth || false;
  this.batch = options.batch || false;

  if (options.data !== undefined) {
    this.data = options.data;
  }
};

SCChannel.prototype.getState = function () {
  return this.state;
};

SCChannel.prototype.subscribe = function (options) {
  this.client.subscribe(this.name, options);
};

SCChannel.prototype.unsubscribe = function () {
  this.client.unsubscribe(this.name);
};

SCChannel.prototype.isSubscribed = function (includePending) {
  return this.client.isSubscribed(this.name, includePending);
};

SCChannel.prototype.publish = function (data, callback) {
  this.client.publish(this.name, data, callback);
};

SCChannel.prototype.watch = function (handler) {
  this.client.watch(this.name, handler);
};

SCChannel.prototype.unwatch = function (handler) {
  this.client.unwatch(this.name, handler);
};

SCChannel.prototype.watchers = function () {
  return this.client.watchers(this.name);
};

SCChannel.prototype.destroy = function () {
  this.client.destroyChannel(this.name);
};

module.exports.SCChannel = SCChannel;

      };
    };
  }
}, {package:"sc-channel",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-channel\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\index.js", {"./v1":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\v1.js","./v4":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\v4.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\node_modules\uuid\index.js
      return function (require, module, exports) {
var v1 = require('./v1');
var v4 = require('./v4');

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;

      };
    };
  }
}, {package:"uuid",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remotedev-serialize\\constants\\options.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\remotedev-serialize\constants\options.js
      return function (require, module, exports) {
// jsan stringify options

module.exports = {
  refs: false, // references can't be resolved on the original Immutable structure
  date: true,
  function: true,
  regex: true,
  undefined: true,
  error: true,
  symbol: true,
  map: true,
  set: true,
  nan: true,
  infinity: true,
};

      };
    };
  }
}, {package:"remotedev-serialize",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remotedev-serialize\\constants\\options.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remotedev-serialize\\helpers\\index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\remotedev-serialize\helpers\index.js
      return function (require, module, exports) {
function mark(data, type, transformMethod) {
  return {
    data: transformMethod ? data[transformMethod]() : data,
    __serializedType__: type,
  };
}

function extract(data, type) {
  return {
    data: Object.assign({}, data),
    __serializedType__: type,
  };
}

function refer(data, type, isArray, refs) {
  var r = mark(data, type, isArray);
  if (!refs) return r;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    if (typeof ref === 'function' && data instanceof ref) {
      r.__serializedRef__ = i;
      return r;
    }
  }
  return r;
}

module.exports = {
  mark: mark,
  extract: extract,
  refer: refer,
};

      };
    };
  }
}, {package:"remotedev-serialize",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\remotedev-serialize\\helpers\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-instrument\\node_modules\\symbol-observable\\lib\\index.js", {"./ponyfill.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-instrument\\node_modules\\symbol-observable\\lib\\ponyfill.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\redux-devtools-instrument\node_modules\symbol-observable\lib\index.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ponyfill = require('./ponyfill.js');

var _ponyfill2 = _interopRequireDefault(_ponyfill);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var root; /* global window */


if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (typeof module !== 'undefined') {
  root = module;
} else {
  root = Function('return this')();
}

var result = (0, _ponyfill2['default'])(root);
exports['default'] = result;
      };
    };
  }
}, {package:"symbol-observable",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-instrument\\node_modules\\symbol-observable\\lib\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isPlainObject.js", {"./_baseGetTag":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseGetTag.js","./_getPrototype":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_getPrototype.js","./isObjectLike":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isObjectLike.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\lodash\isPlainObject.js
      return function (require, module, exports) {
var baseGetTag = require('./_baseGetTag'),
    getPrototype = require('./_getPrototype'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

      };
    };
  }
}, {package:"lodash",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isPlainObject.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\difference.js", {"./_baseDifference":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseDifference.js","./_baseFlatten":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseFlatten.js","./_baseRest":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseRest.js","./isArrayLikeObject":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isArrayLikeObject.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\lodash\difference.js
      return function (require, module, exports) {
var baseDifference = require('./_baseDifference'),
    baseFlatten = require('./_baseFlatten'),
    baseRest = require('./_baseRest'),
    isArrayLikeObject = require('./isArrayLikeObject');

/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */
var difference = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
    : [];
});

module.exports = difference;

      };
    };
  }
}, {package:"lodash",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\difference.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\union.js", {"./_baseFlatten":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseFlatten.js","./_baseRest":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseRest.js","./_baseUniq":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseUniq.js","./isArrayLikeObject":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isArrayLikeObject.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\lodash\union.js
      return function (require, module, exports) {
var baseFlatten = require('./_baseFlatten'),
    baseRest = require('./_baseRest'),
    baseUniq = require('./_baseUniq'),
    isArrayLikeObject = require('./isArrayLikeObject');

/**
 * Creates an array of unique values, in order, from all given arrays using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.union([2], [1, 2]);
 * // => [2, 1]
 */
var union = baseRest(function(arrays) {
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
});

module.exports = union;

      };
    };
  }
}, {package:"lodash",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\union.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\isPlainObject.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\utils\isPlainObject.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports["default"] = isPlainObject;

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = Object.getPrototypeOf(obj);
  if (proto === null) return true;
  var baseProto = proto;

  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }

  return proto === baseProto;
}
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\isPlainObject.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\warning.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-redux\lib\utils\warning.js
      return function (require, module, exports) {
"use strict";

exports.__esModule = true;
exports["default"] = warning;

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */

}
      };
    };
  }
}, {package:"react-redux",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\utils\\warning.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\node_modules\\history\\index.js", {"./cjs/history.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\node_modules\\history\\cjs\\history.js","./cjs/history.min.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\node_modules\\history\\cjs\\history.min.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router\node_modules\history\index.js
      return function (require, module, exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/history.min.js');
} else {
  module.exports = require('./cjs/history.js');
}

      };
    };
  }
}, {package:"history",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\node_modules\\history\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\path-to-regexp\\index.js", {"isarray":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\path-to-regexp\\node_modules\\isarray\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\path-to-regexp\index.js
      return function (require, module, exports) {
var isarray = require('isarray')

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp
module.exports.parse = parse
module.exports.compile = compile
module.exports.tokensToFunction = tokensToFunction
module.exports.tokensToRegExp = tokensToRegExp

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g')

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = []
  var key = 0
  var index = 0
  var path = ''
  var defaultDelimiter = options && options.delimiter || '/'
  var res

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0]
    var escaped = res[1]
    var offset = res.index
    path += str.slice(index, offset)
    index = offset + m.length

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1]
      continue
    }

    var next = str[index]
    var prefix = res[2]
    var name = res[3]
    var capture = res[4]
    var group = res[5]
    var modifier = res[6]
    var asterisk = res[7]

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path)
      path = ''
    }

    var partial = prefix != null && next != null && next !== prefix
    var repeat = modifier === '+' || modifier === '*'
    var optional = modifier === '?' || modifier === '*'
    var delimiter = res[2] || defaultDelimiter
    var pattern = capture || group

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    })
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index)
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path)
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options))
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length)

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
    }
  }

  return function (obj, opts) {
    var path = ''
    var data = obj || {}
    var options = opts || {}
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i]

      if (typeof token === 'string') {
        path += token

        continue
      }

      var value = data[token.name]
      var segment

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j])

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g)

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      })
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = []

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source)
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  var strict = options.strict
  var end = options.end !== false
  var route = ''

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i]

    if (typeof token === 'string') {
      route += escapeString(token)
    } else {
      var prefix = escapeString(token.prefix)
      var capture = '(?:' + token.pattern + ')'

      keys.push(token)

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*'
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?'
        } else {
          capture = prefix + '(' + capture + ')?'
        }
      } else {
        capture = prefix + '(' + capture + ')'
      }

      route += capture
    }
  }

  var delimiter = escapeString(options.delimiter || '/')
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
  }

  if (end) {
    route += '$'
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}

      };
    };
  }
}, {package:"path-to-regexp",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\path-to-regexp\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\mini-create-react-context\\dist\\cjs\\index.js", {"@babel/runtime/helpers/inheritsLoose":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\inheritsLoose.js","gud":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\gud\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","tiny-warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\mini-create-react-context\dist\cjs\index.js
      return function (require, module, exports) {
'use strict';function _interopDefault(e){return(e&&(typeof e==='object')&&'default'in e)?e['default']:e}var React=require('react'),React__default=_interopDefault(React),_inheritsLoose=_interopDefault(require('@babel/runtime/helpers/inheritsLoose')),PropTypes=_interopDefault(require('prop-types')),gud=_interopDefault(require('gud')),warning=_interopDefault(require('tiny-warning'));var MAX_SIGNED_31_BIT_INT = 1073741823;

function objectIs(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function createEventEmitter(value) {
  var handlers = [];
  return {
    on: function on(handler) {
      handlers.push(handler);
    },
    off: function off(handler) {
      handlers = handlers.filter(function (h) {
        return h !== handler;
      });
    },
    get: function get() {
      return value;
    },
    set: function set(newValue, changedBits) {
      value = newValue;
      handlers.forEach(function (handler) {
        return handler(value, changedBits);
      });
    }
  };
}

function onlyChild(children) {
  return Array.isArray(children) ? children[0] : children;
}

function createReactContext(defaultValue, calculateChangedBits) {
  var _Provider$childContex, _Consumer$contextType;

  var contextProp = '__create-react-context-' + gud() + '__';

  var Provider =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(Provider, _Component);

    function Provider() {
      var _this;

      _this = _Component.apply(this, arguments) || this;
      _this.emitter = createEventEmitter(_this.props.value);
      return _this;
    }

    var _proto = Provider.prototype;

    _proto.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
    };

    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        var oldValue = this.props.value;
        var newValue = nextProps.value;
        var changedBits;

        if (objectIs(oldValue, newValue)) {
          changedBits = 0;
        } else {
          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

          if ("development" !== 'production') {
            warning((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);
          }

          changedBits |= 0;

          if (changedBits !== 0) {
            this.emitter.set(nextProps.value, changedBits);
          }
        }
      }
    };

    _proto.render = function render() {
      return this.props.children;
    };

    return Provider;
  }(React.Component);

  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = PropTypes.object.isRequired, _Provider$childContex);

  var Consumer =
  /*#__PURE__*/
  function (_Component2) {
    _inheritsLoose(Consumer, _Component2);

    function Consumer() {
      var _this2;

      _this2 = _Component2.apply(this, arguments) || this;
      _this2.state = {
        value: _this2.getValue()
      };

      _this2.onUpdate = function (newValue, changedBits) {
        var observedBits = _this2.observedBits | 0;

        if ((observedBits & changedBits) !== 0) {
          _this2.setState({
            value: _this2.getValue()
          });
        }
      };

      return _this2;
    }

    var _proto2 = Consumer.prototype;

    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var observedBits = nextProps.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };

    _proto2.componentDidMount = function componentDidMount() {
      if (this.context[contextProp]) {
        this.context[contextProp].on(this.onUpdate);
      }

      var observedBits = this.props.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };

    _proto2.componentWillUnmount = function componentWillUnmount() {
      if (this.context[contextProp]) {
        this.context[contextProp].off(this.onUpdate);
      }
    };

    _proto2.getValue = function getValue() {
      if (this.context[contextProp]) {
        return this.context[contextProp].get();
      } else {
        return defaultValue;
      }
    };

    _proto2.render = function render() {
      return onlyChild(this.props.children)(this.state.value);
    };

    return Consumer;
  }(React.Component);

  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = PropTypes.object, _Consumer$contextType);
  return {
    Provider: Provider,
    Consumer: Consumer
  };
}var index = React__default.createContext || createReactContext;module.exports=index;
      };
    };
  }
}, {package:"mini-create-react-context",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\mini-create-react-context\\dist\\cjs\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\index.js", {"./cjs/value-equal.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\cjs\\value-equal.js","./cjs/value-equal.min.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\cjs\\value-equal.min.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\value-equal\index.js
      return function (require, module, exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/value-equal.min.js');
} else {
  module.exports = require('./cjs/value-equal.js');
}

      };
    };
  }
}, {package:"value-equal",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\index.js", {"./cjs/resolve-pathname.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\cjs\\resolve-pathname.js","./cjs/resolve-pathname.min.js":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\cjs\\resolve-pathname.min.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\resolve-pathname\index.js
      return function (require, module, exports) {
'use strict';

if ("development" === 'production') {
  module.exports = require('./cjs/resolve-pathname.min.js');
} else {
  module.exports = require('./cjs/resolve-pathname.js');
}

      };
    };
  }
}, {package:"resolve-pathname",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\mobile-sync\\mobile-sync.container.js", {"../../ducks/history/history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\history\\history.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./mobile-sync.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\mobile-sync\\mobile-sync.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\mobile-sync\mobile-sync.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../store/actions");

var _history = require("../../ducks/history/history");

var _selectors = require("../../selectors");

var _mobileSync = _interopRequireDefault(require("./mobile-sync.component"));

const mapDispatchToProps = dispatch => {
  return {
    requestRevealSeedWords: password => dispatch((0, _actions.requestRevealSeedWords)(password)),
    fetchInfoToSync: () => dispatch((0, _actions.fetchInfoToSync)()),
    displayWarning: message => dispatch((0, _actions.displayWarning)(message || null)),
    exportAccounts: (password, addresses) => dispatch((0, _actions.exportAccounts)(password, addresses)),
    hideWarning: () => dispatch((0, _actions.hideWarning)())
  };
};

const mapStateToProps = state => {
  const {
    metamask: {
      selectedAddress
    }
  } = state;
  return {
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    selectedAddress,
    keyrings: (0, _selectors.getMetaMaskKeyrings)(state)
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_mobileSync.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\mobile-sync\\mobile-sync.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\lock\\lock.container.js", {"../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./lock.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\lock\\lock.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\lock\lock.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../store/actions");

var _lock = _interopRequireDefault(require("./lock.component"));

const mapStateToProps = state => {
  const {
    metamask: {
      isUnlocked
    }
  } = state;
  return {
    isUnlocked
  };
};

const mapDispatchToProps = dispatch => {
  return {
    lockMetamask: () => dispatch((0, _actions.lockMetamask)())
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_lock.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\lock\\lock.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.container.js", {"../../ducks/history/history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\history\\history.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./confirm-add-suggested-token.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\confirm-add-suggested-token\confirm-add-suggested-token.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../store/actions");

var _history = require("../../ducks/history/history");

var _confirmAddSuggestedToken = _interopRequireDefault(require("./confirm-add-suggested-token.component"));

const mapStateToProps = state => {
  const {
    metamask: {
      suggestedAssets,
      tokens
    }
  } = state;
  return {
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    suggestedAssets,
    tokens
  };
};

const mapDispatchToProps = dispatch => {
  return {
    rejectWatchAsset: suggestedAssetID => dispatch((0, _actions.rejectWatchAsset)(suggestedAssetID)),
    acceptWatchAsset: suggestedAssetID => dispatch((0, _actions.acceptWatchAsset)(suggestedAssetID))
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmAddSuggestedToken.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\unlock-page\\unlock-page.container.js", {"../../../app/scripts/lib/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\app\\scripts\\lib\\util.js","../../../shared/constants/app":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\app.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./unlock-page.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\unlock-page\\unlock-page.component.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\objectWithoutProperties.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\unlock-page\unlock-page.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var _util = require("../../../app/scripts/lib/util");

var _app = require("../../../shared/constants/app");

var _routes = require("../../helpers/constants/routes");

var _actions = require("../../store/actions");

var _unlockPage = _interopRequireDefault(require("./unlock-page.component"));

const _excluded = ["markPasswordForgotten", "tryUnlockMetamask"],
      _excluded2 = ["history", "onSubmit"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const mapStateToProps = state => {
  const {
    metamask: {
      isUnlocked
    }
  } = state;
  return {
    isUnlocked
  };
};

const mapDispatchToProps = dispatch => {
  return {
    forgotPassword: () => dispatch((0, _actions.forgotPassword)()),
    tryUnlockMetamask: password => dispatch((0, _actions.tryUnlockMetamask)(password)),
    markPasswordForgotten: () => dispatch((0, _actions.markPasswordForgotten)()),
    forceUpdateMetamaskState: () => (0, _actions.forceUpdateMetamaskState)(dispatch),
    showOptInModal: () => dispatch((0, _actions.showModal)({
      name: 'METAMETRICS_OPT_IN_MODAL'
    }))
  };
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  const {
    // eslint-disable-next-line no-shadow
    markPasswordForgotten,
    // eslint-disable-next-line no-shadow
    tryUnlockMetamask
  } = dispatchProps,
        restDispatchProps = (0, _objectWithoutProperties2.default)(dispatchProps, _excluded);
  const {
    history,
    onSubmit: ownPropsSubmit
  } = ownProps,
        restOwnProps = (0, _objectWithoutProperties2.default)(ownProps, _excluded2);

  const onImport = async () => {
    await markPasswordForgotten();
    history.push(_routes.RESTORE_VAULT_ROUTE);

    if ((0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP) {
      global.platform.openExtensionInBrowser(_routes.RESTORE_VAULT_ROUTE);
    }
  };

  const onSubmit = async password => {
    await tryUnlockMetamask(password);
    history.push(_routes.DEFAULT_ROUTE);
  };

  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, stateProps), restDispatchProps), restOwnProps), {}, {
    onRestore: onImport,
    onSubmit: ownPropsSubmit || onSubmit,
    history
  });
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps))(_unlockPage.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\unlock-page\\unlock-page.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js", {"./button.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\button.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\button\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _button = _interopRequireDefault(require("./button.component"));

var _default = _button.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\export-text-container\\index.js", {"./export-text-container.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\export-text-container\\export-text-container.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\export-text-container\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _exportTextContainer = _interopRequireDefault(require("./export-text-container.component"));

var _default = _exportTextContainer.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\export-text-container\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\create-new-vault\\index.js", {"./create-new-vault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\create-new-vault\\create-new-vault.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\create-new-vault\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _createNewVault.default;
  }
});

var _createNewVault = _interopRequireDefault(require("./create-new-vault"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\create-new-vault\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\initialized\\initialized.container.js", {"./initialized.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\initialized\\initialized.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\helpers\higher-order-components\initialized\initialized.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _initialized = _interopRequireDefault(require("./initialized.component"));

const mapStateToProps = state => {
  const {
    metamask: {
      completedOnboarding
    }
  } = state;
  return {
    completedOnboarding
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_initialized.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\initialized\\initialized.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js", {"../../../../shared/constants/network":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\network.js","../../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./loading-network-screen.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\loading-network-screen\loading-network-screen.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _network = require("../../../../shared/constants/network");

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _selectors = require("../../../selectors");

var _loadingNetworkScreen = _interopRequireDefault(require("./loading-network-screen.component"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const mapStateToProps = state => {
  const {
    loadingMessage
  } = state.appState;
  const {
    provider
  } = state.metamask;
  const {
    rpcUrl,
    chainId,
    ticker,
    nickname,
    type
  } = provider;
  const setProviderArgs = type === _network.NETWORK_TYPE_RPC ? [rpcUrl, chainId, ticker, nickname] : [provider.type];
  return {
    isNetworkLoading: (0, _selectors.isNetworkLoading)(state),
    loadingMessage,
    setProviderArgs,
    provider,
    providerId: (0, _selectors.getNetworkIdentifier)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setProviderType: type => {
      dispatch(actions.setProviderType(type));
    },
    rollbackToPreviousProvider: () => dispatch(actions.rollbackToPreviousProvider()),
    showNetworkDropdown: () => dispatch(actions.showNetworkDropdown())
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_loadingNetworkScreen.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\loading-network-screen\\loading-network-screen.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.container.js", {"./authenticated.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\helpers\higher-order-components\authenticated\authenticated.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _authenticated = _interopRequireDefault(require("./authenticated.component"));

const mapStateToProps = state => {
  const {
    metamask: {
      isUnlocked,
      completedOnboarding
    }
  } = state;
  return {
    isUnlocked,
    completedOnboarding
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps)(_authenticated.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\metafox-logo\\index.js", {"./metafox-logo.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\metafox-logo\\metafox-logo.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\metafox-logo\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _metafoxLogo.default;
  }
});

var _metafoxLogo = _interopRequireDefault(require("./metafox-logo.component"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\metafox-logo\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\dropdown\\index.js", {"./dropdown":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\dropdown\\dropdown.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\dropdown\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _dropdown.default;
  }
});

var _dropdown = _interopRequireDefault(require("./dropdown"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\dropdown\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\create-account.component.js", {"../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","./connect-hardware":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\connect-hardware\\index.js","./import-account":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\import-account\\index.js","./new-account.container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\new-account.container.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\create-account\create-account.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../helpers/constants/routes");

var _newAccount = _interopRequireDefault(require("./new-account.container"));

var _importAccount = _interopRequireDefault(require("./import-account"));

var _connectHardware = _interopRequireDefault(require("./connect-hardware"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class CreateAccountPage extends _react.Component {
  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account__form"
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Switch, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.NEW_ACCOUNT_ROUTE,
      component: _newAccount.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.IMPORT_ACCOUNT_ROUTE,
      component: _importAccount.default
    }), /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {
      exact: true,
      path: _routes.CONNECT_HARDWARE_ROUTE,
      component: _connectHardware.default
    }))));
  }

}

exports.default = CreateAccountPage;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\create-account.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\app-header\\app-header.container.js", {"../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./app-header.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\app-header\\app-header.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\app-header\app-header.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _redux = require("redux");

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _appHeader = _interopRequireDefault(require("./app-header.component"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const mapStateToProps = state => {
  const {
    appState,
    metamask
  } = state;
  const {
    networkDropdownOpen
  } = appState;
  const {
    selectedAddress,
    isUnlocked,
    isAccountMenuOpen
  } = metamask;
  return {
    networkDropdownOpen,
    selectedAddress,
    isUnlocked,
    isAccountMenuOpen
  };
};

const mapDispatchToProps = dispatch => {
  return {
    showNetworkDropdown: () => dispatch(actions.showNetworkDropdown()),
    hideNetworkDropdown: () => dispatch(actions.hideNetworkDropdown()),
    toggleAccountMenu: () => dispatch(actions.toggleAccountMenu())
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_appHeader.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\app-header\\app-header.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\loading-screen\\loading-screen.component.js", {"../spinner":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\spinner\\index.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\loading-screen\loading-screen.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _spinner = _interopRequireDefault(require("../spinner"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class LoadingScreen extends _react.Component {
  renderMessage() {
    const {
      loadingMessage
    } = this.props;

    if (!loadingMessage) {
      return null;
    }

    return /*#__PURE__*/(0, _react.isValidElement)(loadingMessage) ? loadingMessage : /*#__PURE__*/_react.default.createElement("span", null, loadingMessage);
  }

  render() {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "loading-overlay"
    }, this.props.header, /*#__PURE__*/_react.default.createElement("div", {
      className: "loading-overlay__container"
    }, this.props.showLoadingSpinner && /*#__PURE__*/_react.default.createElement(_spinner.default, {
      color: "#F7C06C",
      className: "loading-overlay__spinner"
    }), this.renderMessage()));
  }

}

(0, _defineProperty2.default)(LoadingScreen, "defaultProps", {
  loadingMessage: null,
  showLoadingSpinner: true
});
(0, _defineProperty2.default)(LoadingScreen, "propTypes", {
  loadingMessage: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),
  showLoadingSpinner: _propTypes.default.bool,
  header: _propTypes.default.element
});
var _default = LoadingScreen;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\loading-screen\\loading-screen.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js", {"../contexts/i18n":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\contexts\\i18n.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\hooks\useI18nContext.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useI18nContext = useI18nContext;

var _react = require("react");

var _i18n = require("../contexts/i18n");

/**
 * useI18ncContext
 *
 * A time saving shortcut to using useContext + I18ncontext in many
 * different places.
 *
 * @returns {Function} I18n function from contexts/I18n.js
 */
function useI18nContext() {
  return (0, _react.useContext)(_i18n.I18nContext);
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\onboarding-flow-switch\\onboarding-flow-switch.js", {"../../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\onboarding-flow-switch\onboarding-flow-switch.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnboardingFlowSwitch;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../../helpers/constants/routes");

var _metamask = require("../../../ducks/metamask/metamask");

function OnboardingFlowSwitch() {
  /* eslint-disable prefer-const */
  const completedOnboarding = (0, _reactRedux.useSelector)(_metamask.getCompletedOnboarding);
  const isInitialized = (0, _reactRedux.useSelector)(_metamask.getIsInitialized);
  const seedPhraseBackedUp = (0, _reactRedux.useSelector)(_metamask.getSeedPhraseBackedUp);
  const isUnlocked = (0, _reactRedux.useSelector)(_metamask.getIsUnlocked);

  if (completedOnboarding) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.DEFAULT_ROUTE
      }
    });
  }

  if (seedPhraseBackedUp !== null) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.ONBOARDING_COMPLETION_ROUTE
      }
    });
  }

  if (isUnlocked) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.LOCK_ROUTE
      }
    });
  }

  if (!isInitialized) {
    let redirect;
    /* eslint-disable prefer-const */
    ///: BEGIN:ONLY_INCLUDE_IN(main,beta)

    redirect = /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.ONBOARDING_WELCOME_ROUTE
      }
    }); ///: END:ONLY_INCLUDE_IN

    /* eslint-enable prefer-const */

    return redirect;
  }

  return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
    to: {
      pathname: _routes.ONBOARDING_UNLOCK_ROUTE
    }
  });
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\onboarding-flow-switch\\onboarding-flow-switch.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\creation-successful\\creation-successful.js", {"../../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../../../hooks/useMetricEvent":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useMetricEvent.js","../../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\creation-successful\creation-successful.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CreationSuccessful;

var _react = _interopRequireDefault(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _designSystem = require("../../../helpers/constants/design-system");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _routes = require("../../../helpers/constants/routes");

var _actions = require("../../../store/actions");

var _useMetricEvent = require("../../../hooks/useMetricEvent");

var _selectors = require("../../../selectors");

function CreationSuccessful() {
  const firstTimeFlowTypeNameMap = {
    create: 'New Wallet Created',
    import: 'New Wallet Imported'
  };
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const firstTimeFlowType = (0, _reactRedux.useSelector)(_selectors.getFirstTimeFlowType);
  const onboardingCompletedEvent = (0, _useMetricEvent.useMetricEvent)({
    category: 'Onboarding',
    action: 'Onboarding Complete',
    name: firstTimeFlowTypeNameMap[firstTimeFlowType]
  });

  const onComplete = async () => {
    await dispatch((0, _actions.setCompletedOnboarding)());
    onboardingCompletedEvent();
    history.push(_routes.ONBOARDING_PIN_EXTENSION_ROUTE);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "creation-successful"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    textAlign: _designSystem.TEXT_ALIGN.CENTER,
    margin: 6
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/tada.png"
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    margin: 6
  }, t('walletCreationSuccessTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('walletCreationSuccessDetail'))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('remember')), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('walletCreationSuccessReminder1'))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('walletCreationSuccessReminder2'))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('walletCreationSuccessReminder3', [/*#__PURE__*/_react.default.createElement("span", {
    key: "creation-successful__bold",
    className: "creation-successful__bold"
  }, t('walletCreationSuccessReminder3BoldSection'))]))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    href: "https://community.metamask.io/t/what-is-a-secret-recovery-phrase-and-how-to-keep-your-crypto-wallet-secure/3440",
    target: "_blank",
    type: "link",
    rel: "noopener noreferrer"
  }, t('learnMore')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 6,
    className: "creation-successful__actions"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: () => history.push(_routes.ONBOARDING_PRIVACY_SETTINGS_ROUTE)
  }, t('setAdvancedPrivacySettings')), /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "onboarding-complete-done",
    type: "primary",
    large: true,
    rounded: true,
    onClick: onComplete
  }, t('done'))));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\creation-successful\\creation-successful.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\recovery-phrase\\confirm-recovery-phrase.js", {"../../../components/app/step-progress-bar":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\step-progress-bar\\index.js","../../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","./recovery-phrase-chips":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\recovery-phrase\\recovery-phrase-chips.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","lodash":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\lodash.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\recovery-phrase\confirm-recovery-phrase.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmRecoveryPhrase;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _lodash = require("lodash");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _stepProgressBar = require("../../../components/app/step-progress-bar");

var _routes = require("../../../helpers/constants/routes");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _recoveryPhraseChips = _interopRequireDefault(require("./recovery-phrase-chips"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ConfirmRecoveryPhrase({
  secretRecoveryPhrase = ''
}) {
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const splitSecretRecoveryPhrase = secretRecoveryPhrase.split(' ');
  const indicesToCheck = [2, 3, 7];
  const [matching, setMatching] = (0, _react.useState)(false); // Removes seed phrase words from chips corresponding to the
  // indicesToCheck so that user has to complete the phrase and confirm
  // they have saved it.

  const initializePhraseElements = () => {
    const phraseElements = _objectSpread({}, splitSecretRecoveryPhrase);

    indicesToCheck.forEach(i => {
      phraseElements[i] = '';
    });
    return phraseElements;
  };

  const [phraseElements, setPhraseElements] = (0, _react.useState)(initializePhraseElements());
  const validate = (0, _react.useMemo)(() => (0, _lodash.debounce)(elements => {
    setMatching(Object.values(elements).join(' ') === secretRecoveryPhrase);
  }, 500), [setMatching, secretRecoveryPhrase]);

  const handleSetPhraseElements = values => {
    setPhraseElements(values);
    validate(values);
  };

  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_stepProgressBar.ThreeStepProgressBar, {
    stage: _stepProgressBar.threeStepStages.RECOVERY_PHRASE_CONFIRM
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    textAlign: _designSystem.TEXT_ALIGN.CENTER,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('seedPhraseConfirm'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    textAlign: _designSystem.TEXT_ALIGN.CENTER,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('seedPhraseEnterMissingWords'))), /*#__PURE__*/_react.default.createElement(_recoveryPhraseChips.default, {
    secretRecoveryPhrase: splitSecretRecoveryPhrase,
    confirmPhase: true,
    setInputValue: handleSetPhraseElements,
    inputValue: phraseElements,
    indicesToCheck: indicesToCheck
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "recovery-phrase__footer"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "recovery-phrase-confirm",
    type: "primary",
    className: "recovery-phrase__footer--button",
    onClick: () => {
      history.push(_routes.ONBOARDING_COMPLETION_ROUTE);
    },
    disabled: !matching
  }, t('confirm'))));
}

ConfirmRecoveryPhrase.propTypes = {
  secretRecoveryPhrase: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\recovery-phrase\\confirm-recovery-phrase.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\import-srp\\import-srp.js", {"../../../components/app/step-progress-bar":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\step-progress-bar\\index.js","../../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../helpers/utils/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","ethers":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\ethers\\lib\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\import-srp\import-srp.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ImportSRP;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _ethers = require("ethers");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _stepProgressBar = require("../../../components/app/step-progress-bar");

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _routes = require("../../../helpers/constants/routes");

var _util = require("../../../helpers/utils/util");

var _useI18nContext = require("../../../hooks/useI18nContext");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ImportSRP({
  submitSecretRecoveryPhrase
}) {
  const [secretRecoveryPhrase, setSecretRecoveryPhrase] = (0, _react.useState)('');
  const [revealSRP, setRevealSRP] = (0, _react.useState)(true);
  const [error, setError] = (0, _react.useState)('');
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const {
    isValidMnemonic
  } = _ethers.ethers.utils;

  const parseSeedPhrase = seedPhrase => {
    var _trim$toLowerCase$mat;

    return ((_trim$toLowerCase$mat = (seedPhrase || '').trim().toLowerCase().match(/\w+/gu)) === null || _trim$toLowerCase$mat === void 0 ? void 0 : _trim$toLowerCase$mat.join(' ')) || '';
  };

  const handleSecretRecoveryPhraseChange = recoveryPhrase => {
    setError('');

    if (recoveryPhrase) {
      const parsedSecretRecoveryPhrase = parseSeedPhrase(recoveryPhrase);
      const wordCount = parsedSecretRecoveryPhrase.split(/\s/u).length;

      if (wordCount % 3 !== 0 || wordCount > 24 || wordCount < 12) {
        setError(t('seedPhraseReq'));
      } else if (!isValidMnemonic(parsedSecretRecoveryPhrase)) {
        setError(t('invalidSeedPhrase'));
      }
    }

    setSecretRecoveryPhrase(recoveryPhrase);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp"
  }, /*#__PURE__*/_react.default.createElement(_stepProgressBar.TwoStepProgressBar, {
    stage: _stepProgressBar.twoStepStages.RECOVERY_PHRASE_CONFIRM
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp__header"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('importExistingWalletTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('importExistingWalletDescription', [/*#__PURE__*/_react.default.createElement("a", {
    key: "learnMore",
    type: "link",
    href: "https://metamask.zendesk.com/hc/en-us/articles/360036464651",
    target: "_blank",
    rel: "noopener noreferrer"
  }, t('learnMore'))]))), /*#__PURE__*/_react.default.createElement("div", {
    className: "import-srp__actions"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    textAlign: _designSystem.TEXT_ALIGN.LEFT
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('secretRecoveryPhrase')), /*#__PURE__*/_react.default.createElement("div", {
    className: "srp-text-area"
  }, /*#__PURE__*/_react.default.createElement("button", {
    onClick: () => setRevealSRP(!revealSRP)
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: `far fa-eye${revealSRP ? '-slash' : ''}`,
    color: "grey"
  })), /*#__PURE__*/_react.default.createElement("textarea", {
    "data-testid": "import-srp-text",
    className: (0, _classnames.default)('srp-text-area__textarea', {
      'srp-text-area__textarea--blur': !revealSRP,
      'srp-text-area__textarea--error': error
    }),
    onChange: ({
      target: {
        value
      }
    }) => handleSecretRecoveryPhraseChange(value),
    onPaste: _util.clearClipboard,
    autoComplete: "off",
    autoCorrect: "off"
  }), error && /*#__PURE__*/_react.default.createElement("span", {
    className: "srp-text-area__textarea__error-message"
  }, error)), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    "data-testid": "import-srp-confirm",
    large: true,
    onClick: () => {
      submitSecretRecoveryPhrase(secretRecoveryPhrase);
      history.replace(_routes.ONBOARDING_CREATE_PASSWORD_ROUTE);
    },
    disabled: error || secretRecoveryPhrase.length === 0
  }, t('confirmRecoveryPhrase')))));
}

ImportSRP.propTypes = {
  submitSecretRecoveryPhrase: _propTypes.default.func
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\import-srp\\import-srp.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\secure-your-wallet\\secure-your-wallet.js", {"../../../components/app/step-progress-bar":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\step-progress-bar\\index.js","../../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","../../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","./skip-srp-backup-popover":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\secure-your-wallet\\skip-srp-backup-popover.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\secure-your-wallet\secure-your-wallet.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SecureYourWallet;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _stepProgressBar = require("../../../components/app/step-progress-bar");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _routes = require("../../../helpers/constants/routes");

var _metamask = require("../../../ducks/metamask/metamask");

var _skipSrpBackupPopover = _interopRequireDefault(require("./skip-srp-backup-popover"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SecureYourWallet() {
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const currentLocale = (0, _reactRedux.useSelector)(_metamask.getCurrentLocale);
  const [showSkipSRPBackupPopover, setShowSkipSRPBackupPopover] = (0, _react.useState)(false);

  const handleClickRecommended = () => {
    history.push(_routes.ONBOARDING_REVIEW_SRP_ROUTE);
  };

  const handleClickNotRecommended = () => {
    setShowSkipSRPBackupPopover(true);
  };

  const subtitles = {
    en: 'English',
    es: 'Spanish',
    hi: 'Hindi',
    id: 'Indonesian',
    ja: 'Japanese',
    ko: 'Korean',
    pt: 'Portuguese',
    ru: 'Russian',
    tl: 'Tagalog',
    vi: 'Vietnamese'
  };
  const defaultLang = subtitles[currentLocale] ? currentLocale : 'en';
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "secure-your-wallet"
  }, showSkipSRPBackupPopover && /*#__PURE__*/_react.default.createElement(_skipSrpBackupPopover.default, {
    handleClose: () => setShowSkipSRPBackupPopover(false)
  }), /*#__PURE__*/_react.default.createElement(_stepProgressBar.ThreeStepProgressBar, {
    stage: _stepProgressBar.threeStepStages.RECOVERY_PHRASE_VIDEO
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    textAlign: _designSystem.TEXT_ALIGN.CENTER,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('seedPhraseIntroTitle'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    textAlign: _designSystem.TEXT_ALIGN.CENTER,
    marginBottom: 6
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4,
    className: "secure-your-wallet__details"
  }, t('seedPhraseIntroTitleCopy'))), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement("video", {
    controls: true,
    style: {
      borderRadius: '10px'
    }
  }, /*#__PURE__*/_react.default.createElement("source", {
    type: "video/webm",
    src: "./images/videos/recovery-onboarding/video.webm"
  }), Object.keys(subtitles).map(key => {
    return /*#__PURE__*/_react.default.createElement("track", {
      default: Boolean(key === defaultLang),
      srcLang: key,
      label: subtitles[key],
      key: `${key}-subtitles`,
      kind: "subtitles",
      src: `./images/videos/recovery-onboarding/subtitles/${key}.vtt`
    });
  }))), /*#__PURE__*/_react.default.createElement(_box.default, {
    margin: 8,
    width: "10/12",
    justifyContent: _designSystem.JUSTIFY_CONTENT.SPACE_BETWEEN,
    className: "secure-your-wallet__actions"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "secure-wallet-later",
    type: "secondary",
    rounded: true,
    large: true,
    onClick: handleClickNotRecommended
  }, t('seedPhraseIntroNotRecommendedButtonCopy')), /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "secure-wallet-recommended",
    type: "primary",
    rounded: true,
    large: true,
    onClick: handleClickRecommended
  }, t('seedPhraseIntroRecommendedButtonCopy'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4,
    textAlign: _designSystem.TEXT_ALIGN.CENTER
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: "span",
    variant: _designSystem.TYPOGRAPHY.H4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    boxProps: {
      display: 'block'
    }
  }, t('seedPhraseIntroSidebarTitleOne')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: "span",
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('seedPhraseIntroSidebarCopyOne'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 4,
    textAlign: _designSystem.TEXT_ALIGN.CENTER
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: "span",
    variant: _designSystem.TYPOGRAPHY.H4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    boxProps: {
      display: 'block'
    }
  }, t('seedPhraseIntroSidebarTitleTwo')), /*#__PURE__*/_react.default.createElement("ul", {
    className: "secure-your-wallet__list"
  }, /*#__PURE__*/_react.default.createElement("li", null, t('seedPhraseIntroSidebarBulletOne')), /*#__PURE__*/_react.default.createElement("li", null, t('seedPhraseIntroSidebarBulletTwo')), /*#__PURE__*/_react.default.createElement("li", null, t('seedPhraseIntroSidebarBulletThree')), /*#__PURE__*/_react.default.createElement("li", null, t('seedPhraseIntroSidebarBulletFour')))), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginBottom: 6,
    textAlign: _designSystem.TEXT_ALIGN.CENTER
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: "span",
    variant: _designSystem.TYPOGRAPHY.H4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    boxProps: {
      display: 'block'
    }
  }, t('seedPhraseIntroSidebarTitleThree')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: "span",
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('seedPhraseIntroSidebarCopyTwo'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "secure-your-wallet__highlighted",
    marginBottom: 2,
    textAlign: _designSystem.TEXT_ALIGN.CENTER
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: "span",
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('seedPhraseIntroSidebarCopyThree'))));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\secure-your-wallet\\secure-your-wallet.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\metametrics\\metametrics.js", {"../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\typography.js","../../../contexts/metametrics":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\metametrics\metametrics.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnboardingMetametrics;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _typography = _interopRequireDefault(require("../../../components/ui/typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _metametrics = require("../../../contexts/metametrics");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const firstTimeFlowTypeNameMap = {
  create: 'Selected Create New Wallet',
  import: 'Selected Import Wallet'
};

function OnboardingMetametrics() {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const nextRoute = (0, _reactRedux.useSelector)(_selectors.getFirstTimeFlowTypeRoute);
  const firstTimeFlowType = (0, _reactRedux.useSelector)(_selectors.getFirstTimeFlowType);
  const participateInMetaMetrics = (0, _reactRedux.useSelector)(_selectors.getParticipateInMetaMetrics);
  const firstTimeSelectionMetaMetricsName = firstTimeFlowTypeNameMap[firstTimeFlowType];
  const metricsEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);

  const onConfirm = async () => {
    const [, metaMetricsId] = await dispatch((0, _actions.setParticipateInMetaMetrics)(true));

    try {
      if (!participateInMetaMetrics) {
        metricsEvent({
          eventOpts: {
            category: 'Onboarding',
            action: 'Metrics Option',
            name: 'Metrics Opt In'
          },
          isOptIn: true,
          flushImmediately: true
        });
      }

      metricsEvent({
        eventOpts: {
          category: 'Onboarding',
          action: 'Import or Create',
          name: firstTimeSelectionMetaMetricsName
        },
        isOptIn: true,
        metaMetricsId,
        flushImmediately: true
      });
    } finally {
      history.push(nextRoute);
    }
  };

  const onCancel = async () => {
    await dispatch((0, _actions.setParticipateInMetaMetrics)(false));

    try {
      if (!participateInMetaMetrics) {
        metricsEvent({
          eventOpts: {
            category: 'Onboarding',
            action: 'Metrics Option',
            name: 'Metrics Opt Out'
          },
          isOptIn: true,
          flushImmediately: true
        });
      }
    } finally {
      history.push(nextRoute);
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-metametrics"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('metametricsTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('metametricsOptInDescription2')), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-check"
  }), t('metametricsCommitmentsAllowOptOut2')), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-check"
  }), t('metametricsCommitmentsSendAnonymizedEvents')), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-times"
  }), t('metametricsCommitmentsNeverCollect')), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-times"
  }), t('metametricsCommitmentsNeverIP')), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement("i", {
    className: "fa fa-times"
  }), t('metametricsCommitmentsNeverSell'))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.UI4,
    align: _designSystem.TEXT_ALIGN.CENTER,
    variant: _designSystem.TYPOGRAPHY.H6,
    className: "onboarding-metametrics__terms"
  }, t('gdprMessage', [/*#__PURE__*/_react.default.createElement("a", {
    key: "metametrics-bottom-text-wrapper",
    href: "https://metamask.io/privacy.html",
    target: "_blank",
    rel: "noopener noreferrer"
  }, t('gdprMessagePrivacyPolicy'))])), /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-metametrics__buttons"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "metametrics-no-thanks",
    type: "secondary",
    onClick: onCancel
  }, t('noThanks')), /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "metametrics-i-agree",
    type: "primary",
    onClick: onConfirm
  }, t('affirmAgree'))));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\metametrics\\metametrics.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\recovery-phrase\\review-recovery-phrase.js", {"../../../components/app/step-progress-bar":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\step-progress-bar\\index.js","../../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/icon/copy-icon.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\icon\\copy-icon.component.js","../../../components/ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../hooks/useCopyToClipboard":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useCopyToClipboard.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","./recovery-phrase-chips":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\recovery-phrase\\recovery-phrase-chips.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\recovery-phrase\review-recovery-phrase.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RecoveryPhrase;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _copyIcon = _interopRequireDefault(require("../../../components/ui/icon/copy-icon.component"));

var _useCopyToClipboard = require("../../../hooks/useCopyToClipboard");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _routes = require("../../../helpers/constants/routes");

var _designSystem = require("../../../helpers/constants/design-system");

var _stepProgressBar = require("../../../components/app/step-progress-bar");

var _recoveryPhraseChips = _interopRequireDefault(require("./recovery-phrase-chips"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function RecoveryPhrase({
  secretRecoveryPhrase
}) {
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _useI18nContext.useI18nContext)();
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  const [phraseRevealed, setPhraseRevealed] = (0, _react.useState)(false);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "recovery-phrase"
  }, /*#__PURE__*/_react.default.createElement(_stepProgressBar.ThreeStepProgressBar, {
    stage: _stepProgressBar.threeStepStages.RECOVERY_PHRASE_REVIEW
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    textAlign: _designSystem.TEXT_ALIGN.CENTER,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('seedPhraseWriteDownHeader'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    textAlign: _designSystem.TEXT_ALIGN.CENTER,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('seedPhraseWriteDownDetails'))), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.SPACE_EVENLY,
    textAlign: _designSystem.TEXT_ALIGN.LEFT,
    marginBottom: 4,
    className: "recovery-phrase__tips"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('tips'), ":"), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('seedPhraseIntroSidebarBulletFour'))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('seedPhraseIntroSidebarBulletTwo'))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('seedPhraseIntroSidebarBulletThree'))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('seedPhraseIntroSidebarBulletFour'))))), /*#__PURE__*/_react.default.createElement(_recoveryPhraseChips.default, {
    secretRecoveryPhrase: secretRecoveryPhrase.split(' '),
    phraseRevealed: phraseRevealed
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "recovery-phrase__footer"
  }, phraseRevealed ? /*#__PURE__*/_react.default.createElement("div", {
    className: "recovery-phrase__footer--copy"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    onClick: () => {
      handleCopy(secretRecoveryPhrase);
    },
    icon: copied ? null : /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
      size: 20,
      color: "#3098DC"
    }),
    className: "recovery-phrase__footer--copy--button",
    type: "link"
  }, copied ? t('copiedExclamation') : t('copyToClipboard')), /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "recovery-phrase-next",
    type: "primary",
    className: "recovery-phrase__footer--button",
    onClick: () => {
      history.push(_routes.ONBOARDING_CONFIRM_SRP_ROUTE);
    }
  }, t('next'))) : /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "recovery-phrase-reveal",
    type: "primary",
    className: "recovery-phrase__footer--button",
    onClick: () => {
      setPhraseRevealed(true);
    }
  }, t('revealSeedWords'))));
}

RecoveryPhrase.propTypes = {
  secretRecoveryPhrase: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\recovery-phrase\\review-recovery-phrase.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\pin-extension\\pin-extension.js", {"../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\typography.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","./pin-billboard":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\pin-extension\\pin-billboard.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-responsive-carousel":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-responsive-carousel\\lib\\js\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\pin-extension\pin-extension.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnboardingPinExtension;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactResponsiveCarousel = require("react-responsive-carousel");

var _typography = _interopRequireDefault(require("../../../components/ui/typography/typography"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _designSystem = require("../../../helpers/constants/design-system");

var _routes = require("../../../helpers/constants/routes");

var _pinBillboard = _interopRequireDefault(require("./pin-billboard"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function OnboardingPinExtension() {
  const t = (0, _useI18nContext.useI18nContext)();
  const [selectedIndex, setSelectedIndex] = (0, _react.useState)(0);
  const history = (0, _reactRouterDom.useHistory)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-pin-extension"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('onboardingPinExtensionTitle')), /*#__PURE__*/_react.default.createElement(_reactResponsiveCarousel.Carousel, {
    selectedItem: selectedIndex,
    showThumbs: false,
    showStatus: false,
    showArrows: false
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('onboardingPinExtensionDescription')), /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-pin-extension__diagram"
  }, /*#__PURE__*/_react.default.createElement(_pinBillboard.default, null))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('onboardingPinExtensionDescription2')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('onboardingPinExtensionDescription3')), /*#__PURE__*/_react.default.createElement("img", {
    src: "/images/onboarding-pin-browser.svg",
    width: "799",
    height: "320",
    alt: ""
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-pin-extension__buttons"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": selectedIndex === 0 ? 'pin-extension-next' : 'pin-extension-done',
    type: "primary",
    onClick: () => {
      if (selectedIndex === 0) {
        setSelectedIndex(1);
      } else {
        history.push(_routes.DEFAULT_ROUTE);
      }
    }
  }, selectedIndex === 0 ? t('next') : t('done'))));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\pin-extension\\pin-extension.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\create-password\\create-password.js", {"../../../components/app/step-progress-bar":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\step-progress-bar\\index.js","../../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/check-box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\check-box\\index.js","../../../components/ui/form-field":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\form-field\\index.js","../../../components/ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../../../hooks/useMetricEvent":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useMetricEvent.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\create-password\create-password.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CreatePassword;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _useMetricEvent = require("../../../hooks/useMetricEvent");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _routes = require("../../../helpers/constants/routes");

var _formField = _interopRequireDefault(require("../../../components/ui/form-field"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _checkBox = _interopRequireDefault(require("../../../components/ui/check-box"));

var _stepProgressBar = require("../../../components/app/step-progress-bar");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function CreatePassword({
  createNewAccount,
  importWithRecoveryPhrase,
  secretRecoveryPhrase
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const [confirmPassword, setConfirmPassword] = (0, _react.useState)('');
  const [password, setPassword] = (0, _react.useState)('');
  const [passwordError, setPasswordError] = (0, _react.useState)('');
  const [confirmPasswordError, setConfirmPasswordError] = (0, _react.useState)('');
  const [termsChecked, setTermsChecked] = (0, _react.useState)(false);
  const [showPassword, setShowPassword] = (0, _react.useState)(false);
  const history = (0, _reactRouterDom.useHistory)();
  const submitPasswordEvent = (0, _useMetricEvent.useNewMetricEvent)({
    event: 'Submit Password',
    category: 'Onboarding'
  });
  const isValid = (0, _react.useMemo)(() => {
    if (!password || !confirmPassword || password !== confirmPassword) {
      return false;
    }

    if (password.length < 8) {
      return false;
    }

    return !passwordError && !confirmPasswordError;
  }, [password, confirmPassword, passwordError, confirmPasswordError]);

  const handlePasswordChange = passwordInput => {
    let error = '';
    let confirmError = '';

    if (passwordInput && passwordInput.length < 8) {
      error = t('passwordNotLongEnough');
    }

    if (confirmPassword && passwordInput !== confirmPassword) {
      confirmError = t('passwordsDontMatch');
    }

    setPassword(passwordInput);
    setPasswordError(error);
    setConfirmPasswordError(confirmError);
  };

  const handleConfirmPasswordChange = confirmPasswordInput => {
    let error = '';

    if (password !== confirmPasswordInput) {
      error = t('passwordsDontMatch');
    }

    setConfirmPassword(confirmPasswordInput);
    setConfirmPasswordError(error);
  };

  const handleCreate = async event => {
    event.preventDefault();

    if (!isValid) {
      return;
    } // If secretRecoveryPhrase is defined we are in import wallet flow


    if (secretRecoveryPhrase) {
      await importWithRecoveryPhrase(password, secretRecoveryPhrase);
      history.push(_routes.ONBOARDING_COMPLETION_ROUTE);
    } else {
      // Otherwise we are in create new wallet flow
      try {
        if (createNewAccount) {
          await createNewAccount(password);
        }

        submitPasswordEvent();
        history.push(_routes.ONBOARDING_SECURE_YOUR_WALLET_ROUTE);
      } catch (error) {
        setPasswordError(error.message);
      }
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "create-password__wrapper"
  }, secretRecoveryPhrase ? /*#__PURE__*/_react.default.createElement(_stepProgressBar.TwoStepProgressBar, {
    stage: _stepProgressBar.twoStepStages.PASSWORD_CREATE
  }) : /*#__PURE__*/_react.default.createElement(_stepProgressBar.ThreeStepProgressBar, {
    stage: _stepProgressBar.threeStepStages.PASSWORD_CREATE
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('createPassword')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4,
    align: _designSystem.TEXT_ALIGN.CENTER,
    boxProps: {
      margin: 5
    }
  }, t('passwordSetupDetails')), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    marginTop: 3,
    padding: [0, 12]
  }, /*#__PURE__*/_react.default.createElement("form", {
    className: "create-password__form",
    onSubmit: handleCreate
  }, /*#__PURE__*/_react.default.createElement(_formField.default, {
    dataTestId: "create-password-new",
    autoFocus: true,
    error: passwordError,
    onChange: handlePasswordChange,
    password: !showPassword,
    titleText: t('newPassword'),
    value: password,
    titleDetail: /*#__PURE__*/_react.default.createElement("button", {
      className: "create-password__form--password-button",
      type: "button",
      onClick: e => {
        e.preventDefault();
        setShowPassword(!showPassword);
      }
    }, showPassword ? t('hide') : t('show'))
  }), /*#__PURE__*/_react.default.createElement(_formField.default, {
    dataTestId: "create-password-confirm",
    onChange: handleConfirmPasswordChange,
    password: !showPassword,
    error: confirmPasswordError,
    titleText: t('confirmPassword'),
    value: confirmPassword,
    titleDetail: isValid && /*#__PURE__*/_react.default.createElement("div", {
      className: "create-password__form--checkmark"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: "fas fa-check"
    }))
  }), /*#__PURE__*/_react.default.createElement(_box.default, {
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    justifyContent: _designSystem.JUSTIFY_CONTENT.SPACE_BETWEEN,
    marginBottom: 4
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    dataTestId: "create-password-terms",
    onClick: () => setTermsChecked(!termsChecked),
    checked: termsChecked
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H5,
    boxProps: {
      marginLeft: 3
    }
  }, t('passwordTermsWarning', [/*#__PURE__*/_react.default.createElement("a", {
    onClick: e => e.stopPropagation(),
    key: "create-password__link-text",
    href: "https://metamask.io/terms.html",
    target: "_blank",
    rel: "noopener noreferrer"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "create-password__link-text"
  }, t('learnMore')))]))), /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": secretRecoveryPhrase ? 'create-password-import' : 'create-password-wallet',
    type: "primary",
    className: "create-password__form--submit-button",
    disabled: !isValid || !termsChecked,
    onClick: handleCreate
  }, secretRecoveryPhrase ? t('importMyWallet') : t('createNewWallet')))));
}

CreatePassword.propTypes = {
  createNewAccount: _propTypes.default.func,
  importWithRecoveryPhrase: _propTypes.default.func,
  secretRecoveryPhrase: _propTypes.default.string
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\create-password\\create-password.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\privacy-settings\\privacy-settings.js", {"../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./setting":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\privacy-settings\\setting.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\privacy-settings\privacy-settings.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PrivacySettings;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _actions = require("../../../store/actions");

var _routes = require("../../../helpers/constants/routes");

var _setting = require("./setting");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function PrivacySettings() {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const [usePhishingDetection, setUsePhishingDetection] = (0, _react.useState)(true);
  const [turnOnTokenDetection, setTurnOnTokenDetection] = (0, _react.useState)(true);
  const [showIncomingTransactions, setShowIncomingTransactions] = (0, _react.useState)(true);

  const handleSubmit = () => {
    dispatch((0, _actions.setFeatureFlag)('showIncomingTransactions', showIncomingTransactions));
    dispatch((0, _actions.setUsePhishDetect)(usePhishingDetection));
    dispatch((0, _actions.setUseTokenDetection)(turnOnTokenDetection));
    dispatch((0, _actions.setCompletedOnboarding)());
    history.push(_routes.ONBOARDING_PIN_EXTENSION_ROUTE);
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "privacy-settings"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "privacy-settings__header"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('setAdvancedPrivacySettings')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H4
  }, t('setAdvancedPrivacySettingsDetails'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "privacy-settings__settings",
    "data-testid": "privacy-settings-settings"
  }, /*#__PURE__*/_react.default.createElement(_setting.Setting, {
    value: showIncomingTransactions,
    setValue: setShowIncomingTransactions,
    title: t('showIncomingTransactions'),
    description: t('onboardingShowIncomingTransactionsDescription', [/*#__PURE__*/_react.default.createElement("a", {
      key: "etherscan",
      href: "https://etherscan.io/",
      target: "_blank",
      rel: "noreferrer"
    }, t('etherscan')), /*#__PURE__*/_react.default.createElement("a", {
      href: "https://cn.etherscan.com/privacyPolicy",
      target: "_blank",
      rel: "noreferrer",
      key: "privacyMsg"
    }, t('privacyMsg'))])
  }), /*#__PURE__*/_react.default.createElement(_setting.Setting, {
    value: usePhishingDetection,
    setValue: setUsePhishingDetection,
    title: t('usePhishingDetection'),
    description: t('onboardingUsePhishingDetectionDescription', [/*#__PURE__*/_react.default.createElement("a", {
      href: "https://www.jsdelivr.com",
      target: "_blank",
      rel: "noreferrer",
      key: "jsDeliver"
    }, t('jsDeliver')), /*#__PURE__*/_react.default.createElement("a", {
      href: "https://www.jsdelivr.com/terms/privacy-policy-jsdelivr-com",
      target: "_blank",
      rel: "noreferrer",
      key: "privacyMsg"
    }, t('privacyMsg'))])
  }), /*#__PURE__*/_react.default.createElement(_setting.Setting, {
    value: turnOnTokenDetection,
    setValue: setTurnOnTokenDetection,
    title: t('turnOnTokenDetection'),
    description: t('useTokenDetectionDescription')
  })), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    rounded: true,
    onClick: handleSubmit
  }, t('done'))));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\privacy-settings\\privacy-settings.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\welcome\\welcome.js", {"../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/mascot":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\mascot\\index.js","../../../components/ui/typography/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\typography.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","events":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\browserify\\node_modules\\events\\events.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-responsive-carousel":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-responsive-carousel\\lib\\js\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\welcome\welcome.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = OnboardingWelcome;

var _events = _interopRequireDefault(require("events"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _reactResponsiveCarousel = require("react-responsive-carousel");

var _mascot = _interopRequireDefault(require("../../../components/ui/mascot"));

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _actions = require("../../../store/actions");

var _routes = require("../../../helpers/constants/routes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function OnboardingWelcome() {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const [eventEmitter] = (0, _react.useState)(new _events.default());

  const onCreateClick = () => {
    dispatch((0, _actions.setFirstTimeFlowType)('create'));
    history.push(_routes.ONBOARDING_METAMETRICS);
  };

  const onImportClick = () => {
    dispatch((0, _actions.setFirstTimeFlowType)('import'));
    history.push(_routes.ONBOARDING_METAMETRICS);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-welcome"
  }, /*#__PURE__*/_react.default.createElement(_reactResponsiveCarousel.Carousel, {
    showThumbs: false,
    showStatus: false,
    showArrows: true
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('welcomeToMetaMask')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('welcomeToMetaMaskIntro')), /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-welcome__mascot"
  }, /*#__PURE__*/_react.default.createElement(_mascot.default, {
    animationEventEmitter: eventEmitter,
    width: "250",
    height: "250"
  }))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('welcomeExploreTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('welcomeExploreDescription')), /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-welcome__image"
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "/images/onboarding-welcome-say-hello.svg",
    width: "169",
    height: "237",
    alt: ""
  }))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H2,
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('welcomeLoginTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER
  }, t('welcomeLoginDescription')), /*#__PURE__*/_react.default.createElement("div", {
    className: "onboarding-welcome__image"
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "/images/onboarding-welcome-decentralised-apps.svg",
    width: "327",
    height: "256",
    alt: ""
  })))), /*#__PURE__*/_react.default.createElement("ul", {
    className: "onboarding-welcome__buttons"
  }, /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "onboarding-create-wallet",
    type: "primary",
    onClick: onCreateClick
  }, t('onboardingCreateWallet'))), /*#__PURE__*/_react.default.createElement("li", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    "data-testid": "onboarding-import-wallet",
    type: "secondary",
    onClick: onImportClick
  }, t('onboardingImportWallet')))));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\welcome\\welcome.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\color-indicator\\index.js", {"./color-indicator":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\color-indicator\\color-indicator.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\color-indicator\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _colorIndicator.default;
  }
});

var _colorIndicator = _interopRequireDefault(require("./color-indicator"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\color-indicator\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\dropdowns\\dropdown.js", {"../menu-droppo":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\menu-droppo.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\dropdowns\dropdown.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownMenuItem = exports.Dropdown = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _menuDroppo = _interopRequireDefault(require("../menu-droppo"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class Dropdown extends _react.Component {
  render() {
    const {
      containerClassName,
      isOpen,
      onClickOutside,
      style,
      innerStyle,
      children,
      useCssTransition
    } = this.props;

    const innerStyleDefaults = _objectSpread({
      borderRadius: '4px',
      padding: '8px 16px',
      background: 'rgba(0, 0, 0, 0.8)',
      boxShadow: 'rgba(0, 0, 0, 0.15) 0px 2px 2px 2px'
    }, innerStyle);

    return /*#__PURE__*/_react.default.createElement(_menuDroppo.default, {
      containerClassName: containerClassName,
      useCssTransition: useCssTransition,
      isOpen: isOpen,
      zIndex: 55,
      onClickOutside: onClickOutside,
      style: style,
      innerStyle: innerStyleDefaults
    }, /*#__PURE__*/_react.default.createElement("style", null, `
            li.dropdown-menu-item:hover {
              color:rgb(225, 225, 225);
              background-color: rgba(255, 255, 255, 0.05);
              border-radius: 4px;
            }
            li.dropdown-menu-item { color: rgb(185, 185, 185); }
          `), children);
  }

}

exports.Dropdown = Dropdown;
Dropdown.defaultProps = {
  useCssTransition: false
};
Dropdown.propTypes = {
  isOpen: _propTypes.default.bool.isRequired,
  children: _propTypes.default.node,
  style: _propTypes.default.object.isRequired,
  onClickOutside: _propTypes.default.func,
  innerStyle: _propTypes.default.object,
  useCssTransition: _propTypes.default.bool,
  containerClassName: _propTypes.default.string
};

class DropdownMenuItem extends _react.Component {
  render() {
    const {
      onClick,
      closeMenu,
      children,
      style
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("li", {
      className: "dropdown-menu-item",
      onClick: () => {
        onClick();
        closeMenu();
      },
      onKeyPress: event => {
        if (event.key === 'Enter') {
          onClick();
          closeMenu();
        }
      },
      style: _objectSpread({
        listStyle: 'none',
        padding: '8px 0px',
        fontSize: '18px',
        fontStyle: 'normal',
        cursor: 'pointer',
        display: 'flex',
        justifyContent: 'flex-start',
        alignItems: 'center',
        color: 'white'
      }, style),
      tabIndex: "0"
    }, children);
  }

}

exports.DropdownMenuItem = DropdownMenuItem;
DropdownMenuItem.propTypes = {
  closeMenu: _propTypes.default.func.isRequired,
  onClick: _propTypes.default.func.isRequired,
  children: _propTypes.default.node,
  style: _propTypes.default.object
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\dropdowns\\dropdown.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\add-collectible\\add-collectible.js", {"../../components/app/collectibles-detection-notice":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\collectibles-detection-notice\\index.js","../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../components/ui/form-field":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\form-field\\index.js","../../components/ui/page-container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\page-container\\index.js","../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","@metamask/controllers":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@metamask\\controllers\\dist\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\add-collectible\add-collectible.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AddCollectible;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _controllers = require("@metamask/controllers");

var _useI18nContext = require("../../hooks/useI18nContext");

var _routes = require("../../helpers/constants/routes");

var _box = _interopRequireDefault(require("../../components/ui/box"));

var _pageContainer = _interopRequireDefault(require("../../components/ui/page-container"));

var _actions = require("../../store/actions");

var _formField = _interopRequireDefault(require("../../components/ui/form-field"));

var _selectors = require("../../selectors");

var _metamask = require("../../ducks/metamask/metamask");

var _collectiblesDetectionNotice = _interopRequireDefault(require("../../components/app/collectibles-detection-notice"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function AddCollectible() {
  var _history$location, _history$location$sta, _history$location2, _history$location2$st, _ref;

  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const useCollectibleDetection = (0, _reactRedux.useSelector)(_selectors.getUseCollectibleDetection);
  const isMainnet = (0, _reactRedux.useSelector)(_selectors.getIsMainnet);
  const collectibleDetectionNoticeDismissed = (0, _reactRedux.useSelector)(_metamask.getCollectiblesDetectionNoticeDismissed);
  const addressEnteredOnImportTokensPage = history === null || history === void 0 ? void 0 : (_history$location = history.location) === null || _history$location === void 0 ? void 0 : (_history$location$sta = _history$location.state) === null || _history$location$sta === void 0 ? void 0 : _history$location$sta.addressEnteredOnImportTokensPage;
  const contractAddressToConvertFromTokenToCollectible = history === null || history === void 0 ? void 0 : (_history$location2 = history.location) === null || _history$location2 === void 0 ? void 0 : (_history$location2$st = _history$location2.state) === null || _history$location2$st === void 0 ? void 0 : _history$location2$st.tokenAddress;
  const [address, setAddress] = (0, _react.useState)((_ref = addressEnteredOnImportTokensPage !== null && addressEnteredOnImportTokensPage !== void 0 ? addressEnteredOnImportTokensPage : contractAddressToConvertFromTokenToCollectible) !== null && _ref !== void 0 ? _ref : '');
  const [tokenId, setTokenId] = (0, _react.useState)('');
  const [disabled, setDisabled] = (0, _react.useState)(true);

  const handleAddCollectible = async () => {
    try {
      await dispatch((0, _actions.addCollectibleVerifyOwnership)(address, tokenId.toString()));
    } catch (error) {
      const {
        message
      } = error;
      dispatch((0, _actions.setNewCollectibleAddedMessage)(message));
      history.push(_routes.DEFAULT_ROUTE);
      return;
    }

    if (contractAddressToConvertFromTokenToCollectible) {
      await dispatch((0, _actions.removeToken)(contractAddressToConvertFromTokenToCollectible));
    }

    dispatch((0, _actions.setNewCollectibleAddedMessage)('success'));
    history.push(_routes.DEFAULT_ROUTE);
  };

  const validateAndSetAddress = val => {
    setDisabled(!_controllers.util.isValidHexAddress(val) || !tokenId);
    setAddress(val);
  };

  const validateAndSetTokenId = val => {
    setDisabled(!_controllers.util.isValidHexAddress(address) || !val);
    setTokenId(val);
  };

  return /*#__PURE__*/_react.default.createElement(_pageContainer.default, {
    title: t('importNFT'),
    onSubmit: () => {
      handleAddCollectible();
    },
    submitText: t('add'),
    onCancel: () => {
      history.push(_routes.DEFAULT_ROUTE);
    },
    onClose: () => {
      history.push(_routes.DEFAULT_ROUTE);
    },
    disabled: disabled,
    contentComponent: /*#__PURE__*/_react.default.createElement(_box.default, {
      padding: 4
    }, isMainnet && !useCollectibleDetection && !collectibleDetectionNoticeDismissed ? /*#__PURE__*/_react.default.createElement(_collectiblesDetectionNotice.default, null) : null, /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_formField.default, {
      id: "address",
      titleText: t('address'),
      placeholder: "0x...",
      value: address,
      onChange: val => validateAndSetAddress(val),
      tooltipText: t('importNFTAddressToolTip'),
      autoFocus: true
    })), /*#__PURE__*/_react.default.createElement(_box.default, null, /*#__PURE__*/_react.default.createElement(_formField.default, {
      id: "token-id",
      titleText: t('tokenId'),
      placeholder: t('nftTokenIdPlaceholder'),
      value: tokenId,
      onChange: val => {
        validateAndSetTokenId(val);
      },
      tooltipText: t('importNFTTokenIdToolTip'),
      numeric: true
    })))
  });
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\add-collectible\\add-collectible.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\asset\\asset.js", {"../../components/app/collectible-details/collectible-details":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\collectible-details\\collectible-details.js","../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../helpers/utils/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\util.js","./components/native-asset":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\asset\\components\\native-asset.js","./components/token-asset":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\asset\\components\\token-asset.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\asset\asset.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _collectibleDetails = _interopRequireDefault(require("../../components/app/collectible-details/collectible-details"));

var _metamask = require("../../ducks/metamask/metamask");

var _routes = require("../../helpers/constants/routes");

var _util = require("../../helpers/utils/util");

var _nativeAsset = _interopRequireDefault(require("./components/native-asset"));

var _tokenAsset = _interopRequireDefault(require("./components/token-asset"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Asset = () => {
  const nativeCurrency = (0, _reactRedux.useSelector)(state => state.metamask.nativeCurrency);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const collectibles = (0, _reactRedux.useSelector)(_metamask.getCollectibles);
  const {
    asset,
    id
  } = (0, _reactRouterDom.useParams)();
  const token = tokens.find(({
    address
  }) => (0, _util.isEqualCaseInsensitive)(address, asset));
  const collectible = collectibles.find(({
    address,
    tokenId
  }) => (0, _util.isEqualCaseInsensitive)(address, asset) && id === tokenId.toString());
  (0, _react.useEffect)(() => {
    const el = document.querySelector('.app');
    el.scroll(0, 0);
  }, []);
  let content;

  if (collectible) {
    content = /*#__PURE__*/_react.default.createElement(_collectibleDetails.default, {
      collectible: collectible
    });
  } else if (token) {
    content = /*#__PURE__*/_react.default.createElement(_tokenAsset.default, {
      token: token
    });
  } else if (asset === nativeCurrency) {
    content = /*#__PURE__*/_react.default.createElement(_nativeAsset.default, {
      nativeCurrency: nativeCurrency
    });
  } else {
    content = /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.DEFAULT_ROUTE
      }
    });
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "main-container asset__container"
  }, content);
};

var _default = Asset;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\asset\\asset.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirmation\\confirmation.js", {"../../components/app/metamask-template-renderer":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\metamask-template-renderer\\index.js","../../components/app/network-display/network-display":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\network-display\\network-display.js","../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../components/ui/callout":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\callout\\index.js","../../components/ui/site-origin":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\site-origin\\index.js","../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../../hooks/useOriginMetadata":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useOriginMetadata.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","./components/confirmation-footer":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirmation\\components\\confirmation-footer\\index.js","./templates":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirmation\\templates\\index.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","immer":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\immer\\dist\\index.js","lodash":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\lodash.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\confirmation\confirmation.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ConfirmationPage;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _lodash = require("lodash");

var _immer = require("immer");

var _box = _interopRequireDefault(require("../../components/ui/box"));

var _metamaskTemplateRenderer = _interopRequireDefault(require("../../components/app/metamask-template-renderer"));

var _routes = require("../../helpers/constants/routes");

var _useI18nContext = require("../../hooks/useI18nContext");

var _useOriginMetadata = require("../../hooks/useOriginMetadata");

var _selectors = require("../../selectors");

var _networkDisplay = _interopRequireDefault(require("../../components/app/network-display/network-display"));

var _designSystem = require("../../helpers/constants/design-system");

var _callout = _interopRequireDefault(require("../../components/ui/callout"));

var _siteOrigin = _interopRequireDefault(require("../../components/ui/site-origin"));

var _confirmationFooter = _interopRequireDefault(require("./components/confirmation-footer"));

var _templates = require("./templates");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * a very simple reducer using produce from Immer to keep state manipulation
 * immutable and painless. This state is not stored in redux state because it
 * should persist only for the lifespan of the current session, and will only
 * be used on this page. Dismissing alerts for confirmations should persist
 * while the user pages back and forth between confirmations. However, if the
 * user closes the confirmation window and later reopens the extension they
 * should be displayed the alerts again.
 */
const alertStateReducer = (0, _immer.produce)((state, action) => {
  var _state$action$confirm;

  switch (action.type) {
    case 'dismiss':
      if (state !== null && state !== void 0 && (_state$action$confirm = state[action.confirmationId]) !== null && _state$action$confirm !== void 0 && _state$action$confirm[action.alertId]) {
        state[action.confirmationId][action.alertId].dismissed = true;
      }

      break;

    case 'set':
      if (!state[action.confirmationId]) {
        state[action.confirmationId] = {};
      }

      action.alerts.forEach(alert => {
        state[action.confirmationId][alert.id] = _objectSpread(_objectSpread({}, alert), {}, {
          dismissed: false
        });
      });
      break;

    default:
      throw new Error('You must provide a type when dispatching an action for alertState');
  }
});
/**
 * Encapsulates the state and effects needed to manage alert state for the
 * confirmation page in a custom hook. This hook is not likely to be used
 * outside of this file, but it helps to reduce complexity of the primary
 * component.
 *
 * @param {Object} pendingConfirmation - a pending confirmation waiting for
 * user approval
 * @returns {[alertState: Object, dismissAlert: Function]} A tuple with
 * the current alert state and function to dismiss an alert by id
 */

function useAlertState(pendingConfirmation) {
  const [alertState, dispatch] = (0, _react.useReducer)(alertStateReducer, {});
  /**
   * Computation of the current alert state happens every time the current
   * pendingConfirmation changes. The async function getTemplateAlerts is
   * responsible for returning alert state. Setting state on unmounted
   * components is an anti-pattern, so we use a isMounted variable to keep
   * track of the current state of the component. Returning a function that
   * sets isMounted to false when the component is unmounted.
   */

  (0, _react.useEffect)(() => {
    let isMounted = true;

    if (pendingConfirmation) {
      (0, _templates.getTemplateAlerts)(pendingConfirmation).then(alerts => {
        if (isMounted && alerts.length > 0) {
          dispatch({
            type: 'set',
            confirmationId: pendingConfirmation.id,
            alerts
          });
        }
      });
    }

    return () => {
      isMounted = false;
    };
  }, [pendingConfirmation]);
  const dismissAlert = (0, _react.useCallback)(alertId => {
    dispatch({
      type: 'dismiss',
      confirmationId: pendingConfirmation.id,
      alertId
    });
  }, [pendingConfirmation]);
  return [alertState, dismissAlert];
}

function ConfirmationPage() {
  const t = (0, _useI18nContext.useI18nContext)();
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const pendingConfirmations = (0, _reactRedux.useSelector)(_selectors.getUnapprovedTemplatedConfirmations, _lodash.isEqual);
  const [currentPendingConfirmation, setCurrentPendingConfirmation] = (0, _react.useState)(0);
  const pendingConfirmation = pendingConfirmations[currentPendingConfirmation];
  const originMetadata = (0, _useOriginMetadata.useOriginMetadata)(pendingConfirmation === null || pendingConfirmation === void 0 ? void 0 : pendingConfirmation.origin) || {};
  const [alertState, dismissAlert] = useAlertState(pendingConfirmation); // Generating templatedValues is potentially expensive, and if done on every render
  // will result in a new object. Avoiding calling this generation unnecessarily will
  // improve performance and prevent unnecessary draws.

  const templatedValues = (0, _react.useMemo)(() => {
    return pendingConfirmation ? (0, _templates.getTemplateValues)(pendingConfirmation, t, dispatch) : {};
  }, [pendingConfirmation, t, dispatch]);
  (0, _react.useEffect)(() => {
    // If the number of pending confirmations reduces to zero when the user
    // return them to the default route. Otherwise, if the number of pending
    // confirmations reduces to a number that is less than the currently
    // viewed index, reset the index.
    if (pendingConfirmations.length === 0) {
      history.push(_routes.DEFAULT_ROUTE);
    } else if (pendingConfirmations.length <= currentPendingConfirmation) {
      setCurrentPendingConfirmation(pendingConfirmations.length - 1);
    }
  }, [pendingConfirmations, history, currentPendingConfirmation]);

  if (!pendingConfirmation) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-page"
  }, pendingConfirmations.length > 1 && /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-page__navigation"
  }, /*#__PURE__*/_react.default.createElement("p", null, t('xOfYPending', [currentPendingConfirmation + 1, pendingConfirmations.length])), currentPendingConfirmation > 0 && /*#__PURE__*/_react.default.createElement("button", {
    className: "confirmation-page__navigation-button",
    onClick: () => setCurrentPendingConfirmation(currentPendingConfirmation - 1)
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fas fa-chevron-left"
  })), /*#__PURE__*/_react.default.createElement("button", {
    className: "confirmation-page__navigation-button",
    disabled: currentPendingConfirmation + 1 === pendingConfirmations.length,
    onClick: () => setCurrentPendingConfirmation(currentPendingConfirmation + 1)
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fas fa-chevron-right"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirmation-page__content"
  }, templatedValues.networkDisplay ? /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: "center"
  }, /*#__PURE__*/_react.default.createElement(_networkDisplay.default, {
    colored: false,
    indicatorSize: _designSystem.SIZES.XS,
    labelProps: {
      color: _designSystem.COLORS.BLACK
    }
  })) : null, /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: "center",
    padding: [4, 4, 4]
  }, /*#__PURE__*/_react.default.createElement(_siteOrigin.default, {
    siteOrigin: originMetadata.origin,
    iconSrc: originMetadata.iconUrl,
    iconName: originMetadata.hostname
  })), /*#__PURE__*/_react.default.createElement(_metamaskTemplateRenderer.default, {
    sections: templatedValues.content
  })), /*#__PURE__*/_react.default.createElement(_confirmationFooter.default, {
    alerts: alertState[pendingConfirmation.id] && Object.values(alertState[pendingConfirmation.id]).filter(alert => alert.dismissed === false).map((alert, idx, filtered) => /*#__PURE__*/_react.default.createElement(_callout.default, {
      key: alert.id,
      severity: alert.severity,
      dismiss: () => dismissAlert(alert.id),
      isFirst: idx === 0,
      isLast: idx === filtered.length - 1,
      isMultiple: filtered.length > 1
    }, /*#__PURE__*/_react.default.createElement(_metamaskTemplateRenderer.default, {
      sections: alert.content
    }))),
    onApprove: templatedValues.onApprove,
    onCancel: templatedValues.onCancel,
    approveText: templatedValues.approvalText,
    cancelText: templatedValues.cancelText
  }));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirmation\\confirmation.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\permissions-connect\\permissions-connect.container.js", {"../../../shared/constants/app":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\app.js","../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../helpers/utils/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\util.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./permissions-connect.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\permissions-connect\\permissions-connect.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\permissions-connect\permissions-connect.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _selectors = require("../../selectors");

var _metamask = require("../../ducks/metamask/metamask");

var _util = require("../../helpers/utils/util");

var _actions = require("../../store/actions");

var _routes = require("../../helpers/constants/routes");

var _app = require("../../../shared/constants/app");

var _permissionsConnect = _interopRequireDefault(require("./permissions-connect.component"));

const mapStateToProps = (state, ownProps) => {
  var _getTargetSubjectMeta, _lastConnectedInfo$or;

  const {
    match: {
      params: {
        id: permissionsRequestId
      }
    },
    location: {
      pathname
    }
  } = ownProps;
  const permissionsRequests = (0, _selectors.getPermissionsRequests)(state);
  const currentAddress = (0, _selectors.getSelectedAddress)(state);
  const permissionsRequest = permissionsRequests.find(req => req.metadata.id === permissionsRequestId);
  const isRequestingAccounts = Boolean(permissionsRequest === null || permissionsRequest === void 0 ? void 0 : permissionsRequest.permissions.eth_accounts);
  const {
    metadata = {}
  } = permissionsRequest || {};
  const {
    origin
  } = metadata;
  const nativeCurrency = (0, _metamask.getNativeCurrency)(state);
  const targetSubjectMetadata = (_getTargetSubjectMeta = (0, _selectors.getTargetSubjectMetadata)(state, origin)) !== null && _getTargetSubjectMeta !== void 0 ? _getTargetSubjectMeta : {
    name: (0, _util.getURLHostName)(origin) || origin,
    origin,
    iconUrl: null,
    extensionId: null,
    subjectType: _app.SUBJECT_TYPES.UNKNOWN
  };
  const accountsWithLabels = (0, _selectors.getAccountsWithLabels)(state);
  const lastConnectedInfo = (0, _selectors.getLastConnectedInfo)(state) || {};
  const addressLastConnectedMap = ((_lastConnectedInfo$or = lastConnectedInfo[origin]) === null || _lastConnectedInfo$or === void 0 ? void 0 : _lastConnectedInfo$or.accounts) || {};
  Object.keys(addressLastConnectedMap).forEach(key => {
    addressLastConnectedMap[key] = (0, _util.formatDate)(addressLastConnectedMap[key], 'yyyy-MM-dd');
  });
  const connectPath = `${_routes.CONNECT_ROUTE}/${permissionsRequestId}`;
  const confirmPermissionPath = `${_routes.CONNECT_ROUTE}/${permissionsRequestId}${_routes.CONNECT_CONFIRM_PERMISSIONS_ROUTE}`;
  let totalPages = 1 + isRequestingAccounts;
  totalPages = totalPages.toString();
  let page = '';

  if (pathname === connectPath) {
    page = '1';
  } else if (pathname === confirmPermissionPath) {
    page = isRequestingAccounts ? '2' : '1';
  } else {
    throw new Error('Incorrect path for permissions-connect component');
  }

  return {
    isRequestingAccounts,
    permissionsRequest,
    permissionsRequestId,
    accounts: accountsWithLabels,
    currentAddress,
    origin,
    newAccountNumber: accountsWithLabels.length + 1,
    nativeCurrency,
    addressLastConnectedMap,
    lastConnectedInfo,
    connectPath,
    confirmPermissionPath,
    totalPages,
    page,
    targetSubjectMetadata
  };
};

const mapDispatchToProps = dispatch => {
  return {
    approvePermissionsRequest: request => dispatch((0, _actions.approvePermissionsRequest)(request)),
    rejectPermissionsRequest: requestId => dispatch((0, _actions.rejectPermissionsRequest)(requestId)),
    showNewAccountModal: ({
      onCreateNewAccount,
      newAccountNumber
    }) => {
      return dispatch((0, _actions.showModal)({
        name: 'NEW_ACCOUNT',
        onCreateNewAccount,
        newAccountNumber
      }));
    },
    getRequestAccountTabIds: () => dispatch((0, _actions.getRequestAccountTabIds)()),
    getCurrentWindowTab: () => dispatch((0, _actions.getCurrentWindowTab)())
  };
};

const PermissionApprovalContainer = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_permissionsConnect.default);
PermissionApprovalContainer.propTypes = {
  history: _propTypes.default.object.isRequired,
  match: _propTypes.default.shape({
    params: _propTypes.default.shape({
      id: _propTypes.default.string
    }).isRequired
  }).isRequired
};
var _default = PermissionApprovalContainer;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\permissions-connect\\permissions-connect.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js", {"../../../../shared/constants/app":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\app.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","../../ui/popover":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\popover\\index.js","./qr-hardware-sign-request":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-sign-request\\index.js","./qr-hardware-wallet-importer":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-wallet-importer\\index.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\qr-hardware-popover\qr-hardware-popover.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _selectors = require("../../../selectors");

var _popover = _interopRequireDefault(require("../../ui/popover"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _actions = require("../../../store/actions");

var _app = require("../../../../shared/constants/app");

var _qrHardwareWalletImporter = _interopRequireDefault(require("./qr-hardware-wallet-importer"));

var _qrHardwareSignRequest = _interopRequireDefault(require("./qr-hardware-sign-request"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const QRHardwarePopover = () => {
  var _sign$request;

  const t = (0, _useI18nContext.useI18nContext)();
  const qrHardware = (0, _reactRedux.useSelector)(_selectors.getCurrentQRHardwareState);
  const {
    sync,
    sign
  } = qrHardware;
  const showWalletImporter = sync === null || sync === void 0 ? void 0 : sync.reading;
  const showSignRequest = sign === null || sign === void 0 ? void 0 : sign.request;
  const showPopover = showWalletImporter || showSignRequest;
  const [errorTitle, setErrorTitle] = (0, _react.useState)('');
  const {
    txData
  } = (0, _reactRedux.useSelector)(state => {
    return state.confirmTransaction;
  }); // the confirmTransaction's life cycle is not consistent with QR hardware wallet;
  // the confirmTransaction will change after the previous tx is confirmed or cancel,
  // we want to block the changing by sign request id;

  const _txData = (0, _react.useMemo)(() => {
    return txData; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [sign === null || sign === void 0 ? void 0 : (_sign$request = sign.request) === null || _sign$request === void 0 ? void 0 : _sign$request.requestId]);

  const dispatch = (0, _reactRedux.useDispatch)();
  const walletImporterCancel = (0, _react.useCallback)(() => dispatch((0, _actions.cancelSyncQRHardware)()), [dispatch]);
  const signRequestCancel = (0, _react.useCallback)(() => {
    let action = _actions.cancelTx;

    switch (_txData.type) {
      case _app.MESSAGE_TYPE.PERSONAL_SIGN:
        {
          action = _actions.cancelPersonalMsg;
          break;
        }

      case _app.MESSAGE_TYPE.ETH_SIGN:
        {
          action = _actions.cancelMsg;
          break;
        }

      case _app.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA:
        {
          action = _actions.cancelTypedMsg;
          break;
        }

      default:
        {
          action = _actions.cancelTx;
        }
    }

    dispatch(action(_txData));
    dispatch((0, _actions.cancelQRHardwareSignRequest)());
  }, [dispatch, _txData]);
  const title = (0, _react.useMemo)(() => {
    let _title = '';

    if (showSignRequest) {
      _title = t('QRHardwareSignRequestTitle');
    } else if (showWalletImporter) {
      _title = t('QRHardwareWalletImporterTitle');
    }

    if (errorTitle !== '') {
      _title = errorTitle;
    }

    return _title;
  }, [showSignRequest, showWalletImporter, t, errorTitle]);
  return showPopover ? /*#__PURE__*/_react.default.createElement(_popover.default, {
    title: title,
    onClose: showWalletImporter ? walletImporterCancel : signRequestCancel
  }, showWalletImporter && /*#__PURE__*/_react.default.createElement(_qrHardwareWalletImporter.default, {
    handleCancel: walletImporterCancel,
    setErrorTitle: setErrorTitle
  }), showSignRequest && /*#__PURE__*/_react.default.createElement(_qrHardwareSignRequest.default, {
    setErrorTitle: setErrorTitle,
    handleCancel: signRequestCancel,
    request: sign.request
  })) : null;
};

var _default = QRHardwarePopover;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\qr-hardware-popover\\qr-hardware-popover.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\token-details\\token-details-page.js", {"../../../shared/constants/network":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\network.js","../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../components/ui/icon/copy-icon.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\icon\\copy-icon.component.js","../../components/ui/identicon":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\identicon\\index.js","../../components/ui/tooltip":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\tooltip\\index.js","../../components/ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","../../contexts/i18n":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\contexts\\i18n.js","../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../helpers/utils/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\util.js","../../hooks/useCopyToClipboard":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useCopyToClipboard.js","../../hooks/useTokenFiatAmount":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useTokenFiatAmount.js","../../hooks/useTokenTracker":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useTokenTracker.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\token-details\token-details-page.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TokenDetailsPage;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _metamask = require("../../ducks/metamask/metamask");

var _selectors = require("../../selectors");

var _useCopyToClipboard = require("../../hooks/useCopyToClipboard");

var _util = require("../../helpers/utils/util");

var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));

var _i18n = require("../../contexts/i18n");

var _useTokenTracker = require("../../hooks/useTokenTracker");

var _useTokenFiatAmount = require("../../hooks/useTokenFiatAmount");

var _actions = require("../../store/actions");

var _network = require("../../../shared/constants/network");

var _routes = require("../../helpers/constants/routes");

var _tooltip = _interopRequireDefault(require("../../components/ui/tooltip"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _copyIcon = _interopRequireDefault(require("../../components/ui/icon/copy-icon.component"));

var _box = _interopRequireDefault(require("../../components/ui/box"));

var _typography = _interopRequireDefault(require("../../components/ui/typography"));

var _designSystem = require("../../helpers/constants/design-system");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function TokenDetailsPage() {
  var _tokensWithBalances$;

  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const tokens = (0, _reactRedux.useSelector)(_metamask.getTokens);
  const tokenList = (0, _reactRedux.useSelector)(_selectors.getTokenList);
  const useTokenDetection = (0, _reactRedux.useSelector)(_selectors.getUseTokenDetection);
  const {
    address: tokenAddress
  } = (0, _reactRouterDom.useParams)();
  const tokenMetadata = Object.values(tokenList).find(token => (0, _util.isEqualCaseInsensitive)(token.address, tokenAddress));
  const fileName = tokenMetadata === null || tokenMetadata === void 0 ? void 0 : tokenMetadata.iconUrl;
  const imagePath = useTokenDetection ? fileName : `images/contract/${fileName}`;
  const token = tokens.find(({
    address
  }) => (0, _util.isEqualCaseInsensitive)(address, tokenAddress));
  const {
    tokensWithBalances
  } = (0, _useTokenTracker.useTokenTracker)([token]);
  const tokenBalance = (_tokensWithBalances$ = tokensWithBalances[0]) === null || _tokensWithBalances$ === void 0 ? void 0 : _tokensWithBalances$.string;
  const tokenCurrencyBalance = (0, _useTokenFiatAmount.useTokenFiatAmount)(token === null || token === void 0 ? void 0 : token.address, tokenBalance, token === null || token === void 0 ? void 0 : token.symbol);
  const currentNetwork = (0, _reactRedux.useSelector)(state => ({
    nickname: state.metamask.provider.nickname,
    type: state.metamask.provider.type
  }));
  const {
    nickname: networkNickname,
    type: networkType
  } = currentNetwork;
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();

  if (!token) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
      to: {
        pathname: _routes.DEFAULT_ROUTE
      }
    });
  }

  return /*#__PURE__*/_react.default.createElement(_box.default, {
    className: "page-container token-details"
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    marginLeft: 5,
    marginRight: 6
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    margin: [4, 0, 0, 0],
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.BLACK,
    className: "token-details__title"
  }, t('tokenDetails'), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    onClick: () => history.push(`${_routes.ASSET_ROUTE}/${token.address}`),
    className: "token-details__closeButton"
  })), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX,
    marginTop: 4
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    align: _designSystem.TEXT_ALIGN.CENTER,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD,
    margin: [0, 5, 0, 0],
    variant: _designSystem.TYPOGRAPHY.H4,
    color: _designSystem.COLORS.BLACK,
    className: "token-details__token-value"
  }, tokenBalance), /*#__PURE__*/_react.default.createElement(_box.default, {
    marginTop: 1
  }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
    diameter: 32,
    address: token.address,
    image: tokenMetadata ? imagePath : token.image
  }))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    margin: [4, 0, 0, 0],
    variant: _designSystem.TYPOGRAPHY.H7,
    color: _designSystem.COLORS.UI4
  }, tokenCurrencyBalance || ''), /*#__PURE__*/_react.default.createElement(_typography.default, {
    margin: [6, 0, 0, 0],
    variant: _designSystem.TYPOGRAPHY.H9,
    color: _designSystem.COLORS.UI4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('tokenContractAddress')), /*#__PURE__*/_react.default.createElement(_box.default, {
    display: _designSystem.DISPLAY.FLEX
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    margin: [2, 0, 0, 0],
    color: _designSystem.COLORS.BLACK,
    overflowWrap: _designSystem.OVERFLOW_WRAP.BREAK_WORD,
    className: "token-details__token-address"
  }, token.address), /*#__PURE__*/_react.default.createElement(_tooltip.default, {
    position: "bottom",
    title: copied ? t('copiedExclamation') : t('copyToClipboard'),
    containerClassName: "token-details__copy-icon"
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "link",
    className: "token-details__copyIcon",
    onClick: () => {
      handleCopy(token.address);
    }
  }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
    size: 11,
    color: "#037DD6"
  })))), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H9,
    margin: [4, 0, 0, 0],
    color: _designSystem.COLORS.UI4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('tokenDecimalTitle')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    margin: [1, 0, 0, 0],
    color: _designSystem.COLORS.BLACK
  }, token.decimals), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H9,
    margin: [4, 0, 0, 0],
    color: _designSystem.COLORS.UI4,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('network')), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H7,
    margin: [1, 0, 0, 0],
    color: _designSystem.COLORS.BLACK
  }, networkType === _network.NETWORK_TYPE_RPC ? networkNickname !== null && networkNickname !== void 0 ? networkNickname : t('privateNetwork') : t(networkType)), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    className: "token-details__hide-token-button",
    onClick: () => {
      dispatch((0, _actions.showModal)({
        name: 'HIDE_TOKEN_CONFIRMATION',
        token,
        history
      }));
    }
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.PRIMARY1
  }, t('hideToken')))));
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\token-details\\token-details-page.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-import-token\\confirm-import-token.js", {"../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../components/ui/identicon":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\identicon\\index.js","../../components/ui/token-balance":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\token-balance\\index.js","../../contexts/i18n":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\contexts\\i18n.js","../../ducks/history/history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\history\\history.js","../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../hooks/useMetricEvent":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useMetricEvent.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\confirm-import-token\confirm-import-token.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../helpers/constants/routes");

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));

var _tokenBalance = _interopRequireDefault(require("../../components/ui/token-balance"));

var _i18n = require("../../contexts/i18n");

var _history = require("../../ducks/history/history");

var _metamask = require("../../ducks/metamask/metamask");

var _useMetricEvent = require("../../hooks/useMetricEvent");

var _actions = require("../../store/actions");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const getTokenName = (name, symbol) => {
  return name === undefined ? symbol : `${name} (${symbol})`;
};

const ConfirmImportToken = () => {
  const t = (0, _react.useContext)(_i18n.I18nContext);
  const dispatch = (0, _reactRedux.useDispatch)();
  const history = (0, _reactRouterDom.useHistory)();
  const mostRecentOverviewPage = (0, _reactRedux.useSelector)(_history.getMostRecentOverviewPage);
  const pendingTokens = (0, _reactRedux.useSelector)(_metamask.getPendingTokens);
  const [addedToken, setAddedToken] = (0, _react.useState)({});
  const trackTokenAddedEvent = (0, _useMetricEvent.useNewMetricEvent)({
    event: 'Token Added',
    category: 'Wallet',
    sensitiveProperties: {
      token_symbol: addedToken.symbol,
      token_contract_address: addedToken.address,
      token_decimal_precision: addedToken.decimals,
      unlisted: addedToken.unlisted,
      source: addedToken.isCustom ? 'custom' : 'list'
    }
  });
  const handleAddTokens = (0, _react.useCallback)(async () => {
    var _addedTokenValues$0$a;

    await dispatch((0, _actions.addTokens)(pendingTokens));
    const addedTokenValues = Object.values(pendingTokens);
    const firstTokenAddress = addedTokenValues === null || addedTokenValues === void 0 ? void 0 : (_addedTokenValues$0$a = addedTokenValues[0].address) === null || _addedTokenValues$0$a === void 0 ? void 0 : _addedTokenValues$0$a.toLowerCase();
    addedTokenValues.forEach(pendingToken => {
      setAddedToken(_objectSpread({}, pendingToken));
    });
    dispatch((0, _actions.clearPendingTokens)());

    if (firstTokenAddress) {
      history.push(`${_routes.ASSET_ROUTE}/${firstTokenAddress}`);
    } else {
      history.push(mostRecentOverviewPage);
    }
  }, [dispatch, history, mostRecentOverviewPage, pendingTokens]);
  (0, _react.useEffect)(() => {
    if (Object.keys(addedToken).length) {
      trackTokenAddedEvent();
    }
  }, [addedToken, trackTokenAddedEvent]);
  (0, _react.useEffect)(() => {
    if (Object.keys(pendingTokens).length === 0) {
      history.push(mostRecentOverviewPage);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__title"
  }, t('importTokensCamelCase')), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__subtitle"
  }, t('likeToImportTokens'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__token"
  }, t('token')), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__balance"
  }, t('balance'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__token-list"
  }, Object.entries(pendingTokens).map(([address, token]) => {
    const {
      name,
      symbol
    } = token;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__token-list-item",
      key: address
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__token confirm-import-token__data"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "confirm-import-token__token-icon",
      diameter: 48,
      address: address
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__name"
    }, getTokenName(name, symbol))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__balance"
    }, /*#__PURE__*/_react.default.createElement(_tokenBalance.default, {
      token: token
    })));
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__footer"
  }, /*#__PURE__*/_react.default.createElement("footer", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    large: true,
    className: "page-container__footer-button",
    onClick: () => history.push(_routes.IMPORT_TOKEN_ROUTE)
  }, t('back')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    large: true,
    className: "page-container__footer-button",
    onClick: handleAddTokens
  }, t('importTokensCamelCase')))));
};

var _default = ConfirmImportToken;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-import-token\\confirm-import-token.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\alerts\\alerts.js", {"../../../ducks/alerts/invalid-custom-network":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\alerts\\invalid-custom-network.js","../../../ducks/alerts/unconnected-account":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\alerts\\unconnected-account.js","./invalid-custom-network-alert":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\alerts\\invalid-custom-network-alert\\index.js","./unconnected-account-alert":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\alerts\\unconnected-account-alert\\index.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\alerts\alerts.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _unconnectedAccount = require("../../../ducks/alerts/unconnected-account");

var _invalidCustomNetwork = require("../../../ducks/alerts/invalid-custom-network");

var _invalidCustomNetworkAlert = _interopRequireDefault(require("./invalid-custom-network-alert"));

var _unconnectedAccountAlert = _interopRequireDefault(require("./unconnected-account-alert"));

const Alerts = ({
  history
}) => {
  const _invalidCustomNetworkAlertIsOpen = (0, _reactRedux.useSelector)(_invalidCustomNetwork.alertIsOpen);

  const _unconnectedAccountAlertIsOpen = (0, _reactRedux.useSelector)(_unconnectedAccount.alertIsOpen);

  if (_invalidCustomNetworkAlertIsOpen) {
    return /*#__PURE__*/_react.default.createElement(_invalidCustomNetworkAlert.default, {
      history: history
    });
  }

  if (_unconnectedAccountAlertIsOpen) {
    return /*#__PURE__*/_react.default.createElement(_unconnectedAccountAlert.default, null);
  }

  return null;
};

Alerts.propTypes = {
  history: _propTypes.default.object.isRequired
};
var _default = Alerts;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\alerts\\alerts.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\modal.js", {"../../../../app/scripts/lib/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\app\\scripts\\lib\\util.js","../../../../shared/constants/app":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\app.js","../../../ducks/gas/gas.duck":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\gas\\gas.duck.js","../../../helpers/utils/is-mobile-view":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\is-mobile-view.js","../../../pages/swaps/swaps-gas-customization-modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\swaps-gas-customization-modal\\index.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","../gas-customization/gas-modal-page-container":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\gas-customization\\gas-modal-page-container\\index.js","./account-details-modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\account-details-modal\\index.js","./add-to-addressbook-modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\add-to-addressbook-modal\\index.js","./cancel-transaction":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\cancel-transaction\\index.js","./confirm-delete-network":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\confirm-delete-network\\index.js","./confirm-remove-account":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\confirm-remove-account\\index.js","./confirm-reset-account":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\confirm-reset-account\\index.js","./convert-token-to-nft-modal/convert-token-to-nft-modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\convert-token-to-nft-modal\\convert-token-to-nft-modal.js","./customize-nonce":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\customize-nonce\\index.js","./deposit-ether-modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\deposit-ether-modal\\index.js","./edit-approval-permission":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\edit-approval-permission\\index.js","./export-private-key-modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\export-private-key-modal\\index.js","./fade-modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\fade-modal.js","./hide-token-confirmation-modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\hide-token-confirmation-modal\\index.js","./metametrics-opt-in-modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\metametrics-opt-in-modal\\index.js","./new-account-modal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\new-account-modal\\index.js","./qr-scanner":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\qr-scanner\\index.js","./reject-transactions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\reject-transactions\\index.js","./transaction-confirmed":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\transaction-confirmed\\index.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\modals\modal.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _gas = require("../../../ducks/gas/gas.duck");

var _isMobileView = _interopRequireDefault(require("../../../helpers/utils/is-mobile-view"));

var _util = require("../../../../app/scripts/lib/util");

var _app = require("../../../../shared/constants/app");

var _gasModalPageContainer = _interopRequireDefault(require("../gas-customization/gas-modal-page-container"));

var _swapsGasCustomizationModal = _interopRequireDefault(require("../../../pages/swaps/swaps-gas-customization-modal"));

var _depositEtherModal = _interopRequireDefault(require("./deposit-ether-modal"));

var _accountDetailsModal = _interopRequireDefault(require("./account-details-modal"));

var _exportPrivateKeyModal = _interopRequireDefault(require("./export-private-key-modal"));

var _hideTokenConfirmationModal = _interopRequireDefault(require("./hide-token-confirmation-modal"));

var _qrScanner = _interopRequireDefault(require("./qr-scanner"));

var _confirmRemoveAccount = _interopRequireDefault(require("./confirm-remove-account"));

var _confirmResetAccount = _interopRequireDefault(require("./confirm-reset-account"));

var _transactionConfirmed = _interopRequireDefault(require("./transaction-confirmed"));

var _cancelTransaction = _interopRequireDefault(require("./cancel-transaction"));

var _fadeModal = _interopRequireDefault(require("./fade-modal"));

var _metametricsOptInModal = _interopRequireDefault(require("./metametrics-opt-in-modal"));

var _rejectTransactions = _interopRequireDefault(require("./reject-transactions"));

var _confirmDeleteNetwork = _interopRequireDefault(require("./confirm-delete-network"));

var _addToAddressbookModal = _interopRequireDefault(require("./add-to-addressbook-modal"));

var _editApprovalPermission = _interopRequireDefault(require("./edit-approval-permission"));

var _newAccountModal = _interopRequireDefault(require("./new-account-modal"));

var _customizeNonce = _interopRequireDefault(require("./customize-nonce"));

var _convertTokenToNftModal = _interopRequireDefault(require("./convert-token-to-nft-modal/convert-token-to-nft-modal"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const modalContainerBaseStyle = {
  transform: 'translate3d(-50%, 0, 0px)',
  border: '1px solid #CCCFD1',
  borderRadius: '8px',
  backgroundColor: '#FFFFFF',
  boxShadow: '0 2px 22px 0 rgba(0,0,0,0.2)'
};

const modalContainerLaptopStyle = _objectSpread(_objectSpread({}, modalContainerBaseStyle), {}, {
  width: '344px',
  top: '15%'
});

const modalContainerMobileStyle = _objectSpread(_objectSpread({}, modalContainerBaseStyle), {}, {
  width: '309px',
  top: '12.5%'
});

const accountModalStyle = {
  mobileModalStyle: {
    width: '95%',
    // top: isPopupOrNotification() === 'popup' ? '52vh' : '36.5vh',
    boxShadow: 'rgba(0, 0, 0, 0.15) 0px 2px 2px 2px',
    borderRadius: '4px',
    top: '10%',
    transform: 'none',
    left: '0',
    right: '0',
    margin: '0 auto'
  },
  laptopModalStyle: {
    width: '335px',
    // top: 'calc(33% + 45px)',
    boxShadow: 'rgba(0, 0, 0, 0.15) 0px 2px 2px 2px',
    borderRadius: '4px',
    top: '10%',
    transform: 'none',
    left: '0',
    right: '0',
    margin: '0 auto'
  },
  contentStyle: {
    borderRadius: '4px'
  }
};
const MODALS = {
  DEPOSIT_ETHER: {
    contents: /*#__PURE__*/_react.default.createElement(_depositEtherModal.default, null),
    onHide: props => props.hideWarning(),
    mobileModalStyle: {
      width: '100%',
      height: '100%',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      boxShadow: '0 0 7px 0 rgba(0,0,0,0.08)',
      top: '0',
      display: 'flex'
    },
    laptopModalStyle: {
      width: 'initial',
      maxWidth: '850px',
      top: 'calc(10% + 10px)',
      left: '0',
      right: '0',
      margin: '0 auto',
      boxShadow: '0 0 6px 0 rgba(0,0,0,0.3)',
      borderRadius: '7px',
      transform: 'none',
      height: 'calc(80% - 20px)',
      overflowY: 'hidden'
    },
    contentStyle: {
      borderRadius: '7px',
      height: '100%'
    }
  },
  ADD_TO_ADDRESSBOOK: {
    contents: /*#__PURE__*/_react.default.createElement(_addToAddressbookModal.default, null),
    mobileModalStyle: {
      width: '95%',
      top: '10%',
      boxShadow: 'rgba(0, 0, 0, 0.15) 0px 2px 2px 2px',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      borderRadius: '10px'
    },
    laptopModalStyle: {
      width: '375px',
      top: '10%',
      boxShadow: 'rgba(0, 0, 0, 0.15) 0px 2px 2px 2px',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      borderRadius: '10px'
    },
    contentStyle: {
      borderRadius: '10px'
    }
  },
  NEW_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_newAccountModal.default, null),
    mobileModalStyle: {
      width: '95%',
      top: '10%',
      boxShadow: 'rgba(0, 0, 0, 0.15) 0px 2px 2px 2px',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      borderRadius: '10px'
    },
    laptopModalStyle: {
      width: '375px',
      top: '10%',
      boxShadow: 'rgba(0, 0, 0, 0.15) 0px 2px 2px 2px',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto',
      borderRadius: '10px'
    },
    contentStyle: {
      borderRadius: '10px'
    }
  },
  ACCOUNT_DETAILS: _objectSpread({
    contents: /*#__PURE__*/_react.default.createElement(_accountDetailsModal.default, null)
  }, accountModalStyle),
  EXPORT_PRIVATE_KEY: _objectSpread({
    contents: /*#__PURE__*/_react.default.createElement(_exportPrivateKeyModal.default, null)
  }, accountModalStyle),
  HIDE_TOKEN_CONFIRMATION: {
    contents: /*#__PURE__*/_react.default.createElement(_hideTokenConfirmationModal.default, null),
    mobileModalStyle: {
      width: '95%',
      top: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '52vh' : '36.5vh'
    },
    laptopModalStyle: {
      width: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '357px' : '449px',
      top: 'calc(33% + 45px)',
      paddingLeft: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '16px' : null,
      paddingRight: (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP ? '16px' : null
    }
  },
  METAMETRICS_OPT_IN_MODAL: {
    contents: /*#__PURE__*/_react.default.createElement(_metametricsOptInModal.default, null),
    mobileModalStyle: _objectSpread(_objectSpread({}, modalContainerMobileStyle), {}, {
      width: '100%',
      height: '100%',
      top: '0px'
    }),
    laptopModalStyle: _objectSpread(_objectSpread({}, modalContainerLaptopStyle), {}, {
      top: '10%'
    }),
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONFIRM_RESET_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmResetAccount.default, null),
    mobileModalStyle: _objectSpread({}, modalContainerMobileStyle),
    laptopModalStyle: _objectSpread({}, modalContainerLaptopStyle),
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONFIRM_REMOVE_ACCOUNT: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmRemoveAccount.default, null),
    mobileModalStyle: _objectSpread({}, modalContainerMobileStyle),
    laptopModalStyle: _objectSpread({}, modalContainerLaptopStyle),
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONVERT_TOKEN_TO_NFT: {
    contents: /*#__PURE__*/_react.default.createElement(_convertTokenToNftModal.default, null),
    mobileModalStyle: _objectSpread({}, modalContainerMobileStyle),
    laptopModalStyle: _objectSpread({}, modalContainerLaptopStyle),
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CONFIRM_DELETE_NETWORK: {
    contents: /*#__PURE__*/_react.default.createElement(_confirmDeleteNetwork.default, null),
    mobileModalStyle: _objectSpread({}, modalContainerMobileStyle),
    laptopModalStyle: _objectSpread({}, modalContainerLaptopStyle),
    contentStyle: {
      borderRadius: '8px'
    }
  },
  LEGACY_CUSTOMIZE_GAS: {
    contents: /*#__PURE__*/_react.default.createElement(_gasModalPageContainer.default, null),
    mobileModalStyle: {
      width: '100vw',
      height: '100vh',
      top: '0',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto'
    },
    laptopModalStyle: {
      width: 'auto',
      height: '0px',
      top: '80px',
      left: '0px',
      transform: 'none',
      margin: '0 auto',
      position: 'relative'
    },
    contentStyle: {
      borderRadius: '8px'
    },
    customOnHideOpts: {
      action: _gas.resetCustomData,
      args: []
    }
  },
  CUSTOMIZE_METASWAP_GAS: {
    contents: /*#__PURE__*/_react.default.createElement(_swapsGasCustomizationModal.default, null),
    mobileModalStyle: {
      width: '100vw',
      height: '100vh',
      top: '0',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto'
    },
    laptopModalStyle: {
      width: 'auto',
      height: '0px',
      top: '80px',
      left: '0px',
      transform: 'none',
      margin: '0 auto',
      position: 'relative'
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  EDIT_APPROVAL_PERMISSION: {
    contents: /*#__PURE__*/_react.default.createElement(_editApprovalPermission.default, null),
    mobileModalStyle: {
      width: '95vw',
      height: '100vh',
      top: '50px',
      transform: 'none',
      left: '0',
      right: '0',
      margin: '0 auto'
    },
    laptopModalStyle: {
      width: 'auto',
      height: '0px',
      top: '80px',
      left: '0px',
      transform: 'none',
      margin: '0 auto',
      position: 'relative'
    },
    contentStyle: {
      borderRadius: '8px'
    }
  },
  TRANSACTION_CONFIRMED: {
    disableBackdropClick: true,
    contents: /*#__PURE__*/_react.default.createElement(_transactionConfirmed.default, null),
    mobileModalStyle: _objectSpread({}, modalContainerMobileStyle),
    laptopModalStyle: _objectSpread({}, modalContainerLaptopStyle),
    contentStyle: {
      borderRadius: '8px'
    }
  },
  QR_SCANNER: {
    contents: /*#__PURE__*/_react.default.createElement(_qrScanner.default, null),
    mobileModalStyle: _objectSpread({}, modalContainerMobileStyle),
    laptopModalStyle: _objectSpread({}, modalContainerLaptopStyle),
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CANCEL_TRANSACTION: {
    contents: /*#__PURE__*/_react.default.createElement(_cancelTransaction.default, null),
    mobileModalStyle: _objectSpread({}, modalContainerMobileStyle),
    laptopModalStyle: _objectSpread({}, modalContainerLaptopStyle),
    contentStyle: {
      borderRadius: '8px'
    }
  },
  REJECT_TRANSACTIONS: {
    contents: /*#__PURE__*/_react.default.createElement(_rejectTransactions.default, null),
    mobileModalStyle: _objectSpread({}, modalContainerMobileStyle),
    laptopModalStyle: _objectSpread({}, modalContainerLaptopStyle),
    contentStyle: {
      borderRadius: '8px'
    }
  },
  CUSTOMIZE_NONCE: {
    contents: /*#__PURE__*/_react.default.createElement(_customizeNonce.default, null),
    mobileModalStyle: _objectSpread({}, modalContainerMobileStyle),
    laptopModalStyle: _objectSpread({}, modalContainerLaptopStyle),
    contentStyle: {
      borderRadius: '8px'
    }
  },
  DEFAULT: {
    contents: [],
    mobileModalStyle: {},
    laptopModalStyle: {}
  }
};
const BACKDROPSTYLE = {
  backgroundColor: 'rgba(0, 0, 0, 0.5)'
};

function mapStateToProps(state) {
  return {
    active: state.appState.modal.open,
    modalState: state.appState.modal.modalState
  };
}

function mapDispatchToProps(dispatch) {
  return {
    hideModal: customOnHideOpts => {
      dispatch(actions.hideModal());

      if (customOnHideOpts && customOnHideOpts.action) {
        dispatch(customOnHideOpts.action(...customOnHideOpts.args));
      }
    },
    hideWarning: () => {
      dispatch(actions.hideWarning());
    }
  };
}

class Modal extends _react.Component {
  hide() {
    this.modalRef.hide();
  }

  show() {
    this.modalRef.show();
  }

  UNSAFE_componentWillReceiveProps(nextProps, _) {
    if (nextProps.active) {
      this.show();
    } else if (this.props.active) {
      this.hide();
    }
  }

  render() {
    const modal = MODALS[this.props.modalState.name || 'DEFAULT'];
    const {
      contents: children,
      disableBackdropClick = false
    } = modal;
    const modalStyle = modal[(0, _isMobileView.default)() ? 'mobileModalStyle' : 'laptopModalStyle'];
    const contentStyle = modal.contentStyle || {};
    return /*#__PURE__*/_react.default.createElement(_fadeModal.default, {
      keyboard: false,
      onHide: () => {
        if (modal.onHide) {
          modal.onHide({
            hideWarning: this.props.hideWarning
          });
        }

        this.props.hideModal(modal.customOnHideOpts);
      },
      ref: ref => {
        this.modalRef = ref;
      },
      modalStyle: modalStyle,
      contentStyle: contentStyle,
      backdropStyle: BACKDROPSTYLE,
      closeOnClick: !disableBackdropClick
    }, children);
  }

}

(0, _defineProperty2.default)(Modal, "propTypes", {
  active: _propTypes.default.bool.isRequired,
  hideModal: _propTypes.default.func.isRequired,
  hideWarning: _propTypes.default.func.isRequired,
  modalState: _propTypes.default.object.isRequired
});

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Modal);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\modals\\modal.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\import-token\\import-token.container.js", {"../../ducks/history/history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\history\\history.js","../../selectors/selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\selectors.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./import-token.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\import-token\\import-token.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","_process":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\process\\browser.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\import-token\import-token.container.js
      return function (require, module, exports) {
(function (process){(function (){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _actions = require("../../store/actions");

var _history = require("../../ducks/history/history");

var _selectors = require("../../selectors/selectors");

var _importToken = _interopRequireDefault(require("./import-token.component"));

const mapStateToProps = state => {
  const {
    metamask: {
      identities,
      tokens,
      pendingTokens,
      provider: {
        chainId
      },
      useTokenDetection,
      tokenList,
      selectedAddress
    }
  } = state;
  const showSearchTabCustomNetwork = useTokenDetection && Boolean(Object.keys(tokenList).length);
  const showSearchTab = (0, _selectors.getIsMainnet)(state) || showSearchTabCustomNetwork || process.env.IN_TEST;
  return {
    identities,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    tokens,
    pendingTokens,
    showSearchTab,
    chainId,
    rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state),
    tokenList,
    useTokenDetection,
    selectedAddress
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setPendingTokens: tokens => dispatch((0, _actions.setPendingTokens)(tokens)),
    clearPendingTokens: () => dispatch((0, _actions.clearPendingTokens)()),
    getTokenStandardAndDetails: (address, selectedAddress) => (0, _actions.getTokenStandardAndDetails)(address, selectedAddress, null)
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_importToken.default);

exports.default = _default;


}).call(this)}).call(this,require('_process'))

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\import-token\\import-token.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\first-time-flow\\first-time-flow.container.js", {"../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./first-time-flow.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\first-time-flow\\first-time-flow.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\first-time-flow\first-time-flow.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _selectors = require("../../selectors");

var _actions = require("../../store/actions");

var _routes = require("../../helpers/constants/routes");

var _firstTimeFlow = _interopRequireDefault(require("./first-time-flow.component"));

const mapStateToProps = (state, ownProps) => {
  const {
    metamask: {
      completedOnboarding,
      isInitialized,
      isUnlocked,
      seedPhraseBackedUp
    }
  } = state;
  const showingSeedPhraseBackupAfterOnboarding = Boolean(ownProps.location.pathname.match(_routes.INITIALIZE_BACKUP_SEED_PHRASE_ROUTE));
  return {
    completedOnboarding,
    isInitialized,
    isUnlocked,
    nextRoute: (0, _selectors.getFirstTimeFlowTypeRoute)(state),
    showingSeedPhraseBackupAfterOnboarding,
    seedPhraseBackedUp
  };
};

const mapDispatchToProps = dispatch => {
  return {
    createNewAccount: password => dispatch((0, _actions.createNewVaultAndGetSeedPhrase)(password)),
    createNewAccountFromSeed: (password, seedPhrase) => {
      return dispatch((0, _actions.createNewVaultAndRestore)(password, seedPhrase));
    },
    unlockAccount: password => dispatch((0, _actions.unlockAndGetSeedPhrase)(password)),
    verifySeedPhrase: () => (0, _actions.verifySeedPhrase)()
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_firstTimeFlow.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\first-time-flow\\first-time-flow.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\settings\\settings.container.js", {"../../../app/scripts/lib/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\app\\scripts\\lib\\util.js","../../../shared/constants/app":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\app.js","../../../shared/modules/hexstring-utils":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\modules\\hexstring-utils.js","../../ducks/history/history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\history\\history.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","./settings.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\settings\\settings.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\settings\settings.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _selectors = require("../../selectors");

var _app = require("../../../shared/constants/app");

var _util = require("../../../app/scripts/lib/util");

var _history = require("../../ducks/history/history");

var _hexstringUtils = require("../../../shared/modules/hexstring-utils");

var _routes = require("../../helpers/constants/routes");

var _settings = _interopRequireDefault(require("./settings.component"));

const ROUTES_TO_I18N_KEYS = {
  [_routes.ABOUT_US_ROUTE]: 'about',
  [_routes.ADVANCED_ROUTE]: 'advanced',
  [_routes.ALERTS_ROUTE]: 'alerts',
  [_routes.GENERAL_ROUTE]: 'general',
  [_routes.CONTACT_ADD_ROUTE]: 'newContact',
  [_routes.CONTACT_EDIT_ROUTE]: 'editContact',
  [_routes.CONTACT_LIST_ROUTE]: 'contacts',
  [_routes.SNAPS_LIST_ROUTE]: 'snaps',
  [_routes.SNAPS_VIEW_ROUTE]: 'snaps',
  [_routes.CONTACT_VIEW_ROUTE]: 'viewContact',
  [_routes.NETWORKS_ROUTE]: 'networks',
  [_routes.NETWORKS_FORM_ROUTE]: 'networks',
  [_routes.ADD_NETWORK_ROUTE]: 'networks',
  [_routes.SECURITY_ROUTE]: 'securityAndPrivacy',
  [_routes.EXPERIMENTAL_ROUTE]: 'experimental'
};

const mapStateToProps = (state, ownProps) => {
  const {
    location
  } = ownProps;
  const {
    pathname
  } = location;
  const {
    metamask: {
      conversionDate
    }
  } = state;
  const pathNameTail = pathname.match(/[^/]+$/u)[0];
  const isAddressEntryPage = pathNameTail.includes('0x');
  const isSnapViewPage = Boolean(pathname.match(_routes.SNAPS_VIEW_ROUTE));
  const isAddContactPage = Boolean(pathname.match(_routes.CONTACT_ADD_ROUTE));
  const isEditContactPage = Boolean(pathname.match(_routes.CONTACT_EDIT_ROUTE));
  const isNetworksFormPage = Boolean(pathname.match(_routes.NETWORKS_FORM_ROUTE)) || Boolean(pathname.match(_routes.ADD_NETWORK_ROUTE));
  const addNewNetwork = Boolean(pathname.match(_routes.ADD_NETWORK_ROUTE));

  const isPopup = (0, _util.getEnvironmentType)() === _app.ENVIRONMENT_TYPE_POPUP;

  const pathnameI18nKey = ROUTES_TO_I18N_KEYS[pathname];
  let backRoute = _routes.SETTINGS_ROUTE;

  if (isEditContactPage) {
    backRoute = `${_routes.CONTACT_VIEW_ROUTE}/${pathNameTail}`;
  } else if (isAddressEntryPage || isAddContactPage) {
    backRoute = _routes.CONTACT_LIST_ROUTE;
  } else if (isNetworksFormPage) {
    backRoute = _routes.NETWORKS_ROUTE;
  } else if (isSnapViewPage) {
    backRoute = _routes.SNAPS_LIST_ROUTE;
  }

  let initialBreadCrumbRoute;
  let initialBreadCrumbKey;
  const addressName = (0, _selectors.getAddressBookEntryOrAccountName)(state, !(0, _hexstringUtils.isBurnAddress)(pathNameTail) && (0, _hexstringUtils.isValidHexAddress)(pathNameTail, {
    mixedCaseUseChecksum: true
  }) ? pathNameTail : '');
  return {
    isAddressEntryPage,
    backRoute,
    currentPath: pathname,
    isPopup,
    pathnameI18nKey,
    addressName,
    initialBreadCrumbRoute,
    initialBreadCrumbKey,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    addNewNetwork,
    conversionDate,
    isSnapViewPage
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps))(_settings.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\settings\\settings.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\account-menu\\account-menu.container.js", {"../../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./account-menu.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\account-menu\\account-menu.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\account-menu\account-menu.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _actions = require("../../../store/actions");

var _selectors = require("../../../selectors");

var _accountMenu = _interopRequireDefault(require("./account-menu.component"));

/**
 * The min amount of accounts to show search field
 */
const SHOW_SEARCH_ACCOUNTS_MIN_COUNT = 5;

function mapStateToProps(state) {
  const {
    metamask: {
      isAccountMenuOpen
    }
  } = state;
  const accounts = (0, _selectors.getMetaMaskAccountsOrdered)(state);
  const origin = (0, _selectors.getOriginOfCurrentTab)(state);
  const selectedAddress = (0, _selectors.getSelectedAddress)(state);
  return {
    isAccountMenuOpen,
    addressConnectedSubjectMap: (0, _selectors.getAddressConnectedSubjectMap)(state),
    originOfCurrentTab: origin,
    selectedAddress,
    keyrings: (0, _selectors.getMetaMaskKeyrings)(state),
    accounts,
    shouldShowAccountsSearch: accounts.length >= SHOW_SEARCH_ACCOUNTS_MIN_COUNT
  };
}

function mapDispatchToProps(dispatch) {
  return {
    toggleAccountMenu: () => dispatch((0, _actions.toggleAccountMenu)()),
    showAccountDetail: address => {
      dispatch((0, _actions.showAccountDetail)(address));
      dispatch((0, _actions.toggleAccountMenu)());
    },
    lockMetamask: () => {
      dispatch((0, _actions.lockMetamask)());
      dispatch((0, _actions.hideWarning)());
      dispatch((0, _actions.toggleAccountMenu)());
    }
  };
}

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_accountMenu.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\account-menu\\account-menu.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useMetricEvent.js", {"../contexts/metametrics":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\contexts\\metametrics.js","../contexts/metametrics.new":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\contexts\\metametrics.new.js","../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","./useEqualityCheck":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useEqualityCheck.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\hooks\useMetricEvent.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMetaMetricsContext = useMetaMetricsContext;
exports.useMetricEvent = useMetricEvent;
exports.useNewMetricEvent = useNewMetricEvent;

var _react = require("react");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _metametrics = require("../contexts/metametrics");

var _metametrics2 = require("../contexts/metametrics.new");

var _routes = require("../helpers/constants/routes");

var _selectors = require("../selectors");

var _useEqualityCheck = require("./useEqualityCheck");

// Type imports

/**
 * @typedef {__import__('../contexts/metametrics.new').UIMetricsEventPayload} UIMetricsEventPayload
 * @typedef {__import__('../../shared/constants/metametrics').MetaMetricsEventOptions} MetaMetricsEventOptions
 */
function useMetricEvent(config = {}, overrides = {}) {
  const metricsEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const trackEvent = (0, _react.useCallback)(() => metricsEvent(config, overrides), [config, metricsEvent, overrides]);
  return trackEvent;
}
/**
 * track a metametrics event using segment
 * e.g metricsEvent({ event: 'Unlocked MetaMask', category: 'Navigation' })
 *
 * @param {UIMetricsEventPayload} payload - payload of the event to track
 * @param {MetaMetricsEventOptions} options - options for handling/routing event
 * @returns {() => Promise<void>} function to execute the tracking event
 */


function useNewMetricEvent(payload, options) {
  const memoizedPayload = (0, _useEqualityCheck.useEqualityCheck)(payload);
  const memoizedOptions = (0, _useEqualityCheck.useEqualityCheck)(options);
  const metricsEvent = (0, _react.useContext)(_metametrics2.MetaMetricsContext);
  return (0, _react.useCallback)(() => metricsEvent(memoizedPayload, memoizedOptions), [metricsEvent, memoizedPayload, memoizedOptions]);
}

const PATHS_TO_CHECK = Object.keys(_routes.PATH_NAME_MAP);
/**
 * Returns the current page if it matches our route map, as well as the origin
 * if there is a confirmation that was triggered by a dapp. These values are
 * not required but add valuable context to events, and should be included in
 * the context object on the event payload.
 *
 * @returns {{
 *  page?: MetaMetricsPageObject
 *  referrer?: MetaMetricsReferrerObject
 * }}
 */

function useMetaMetricsContext() {
  const match = (0, _reactRouterDom.useRouteMatch)({
    path: PATHS_TO_CHECK,
    exact: true,
    strict: true
  });
  const txData = (0, _reactRedux.useSelector)(_selectors.txDataSelector) || {};
  const confirmTransactionOrigin = txData.origin;
  const referrer = confirmTransactionOrigin ? {
    url: confirmTransactionOrigin
  } : undefined;
  const page = match ? {
    path: match.path,
    title: _routes.PATH_NAME_MAP[match.path],
    url: match.path
  } : undefined;
  return {
    page,
    referrer
  };
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useMetricEvent.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useGasFeeEstimates.js", {"../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","./useSafeGasEstimatePolling":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useSafeGasEstimatePolling.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","lodash/isEqual":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isEqual.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\hooks\useGasFeeEstimates.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGasFeeEstimates = useGasFeeEstimates;

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _reactRedux = require("react-redux");

var _metamask = require("../ducks/metamask/metamask");

var _useSafeGasEstimatePolling = require("./useSafeGasEstimatePolling");

/**
 * @typedef {object} GasEstimates
 * @property {GasEstimateTypes} gasEstimateType - The type of estimate provided
 * @property {__import__(
 *   '@metamask/controllers'
 * ).GasFeeState['gasFeeEstimates']} gasFeeEstimates - The estimate object
 * @property {__import__(
 *   '@metamask/controllers'
 * ).GasFeeState['estimatedGasFeeTimeBounds']} [estimatedGasFeeTimeBounds] -
 *  estimated time boundaries for fee-market type estimates
 * @property {boolean} isGasEstimateLoading - indicates whether the gas
 *  estimates are currently loading.
 */

/**
 * Gets the current gasFeeEstimates from state and begins polling for new
 * estimates. When this hook is removed from the tree it will signal to the
 * GasFeeController that it is done requiring new gas estimates. Also checks
 * the returned gas estimate for validity on the current network.
 *
 * @returns {GasFeeEstimates} GasFeeEstimates object
 */
function useGasFeeEstimates() {
  const gasEstimateType = (0, _reactRedux.useSelector)(_metamask.getGasEstimateType);
  const gasFeeEstimates = (0, _reactRedux.useSelector)(_metamask.getGasFeeEstimates, _isEqual.default);
  const estimatedGasFeeTimeBounds = (0, _reactRedux.useSelector)(_metamask.getEstimatedGasFeeTimeBounds, _reactRedux.shallowEqual);
  const isGasEstimatesLoading = (0, _reactRedux.useSelector)(_metamask.getIsGasEstimatesLoading);
  const isNetworkBusy = (0, _reactRedux.useSelector)(_metamask.getIsNetworkBusy);
  (0, _useSafeGasEstimatePolling.useSafeGasEstimatePolling)();
  return {
    gasFeeEstimates,
    gasEstimateType,
    estimatedGasFeeTimeBounds,
    isGasEstimatesLoading,
    isNetworkBusy
  };
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useGasFeeEstimates.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\feature-toggled-route.js", {"@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\objectWithoutProperties.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\helpers\higher-order-components\feature-toggled-route.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FeatureToggledRoute;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

const _excluded = ["flag", "redirectRoute"];

function FeatureToggledRoute(_ref) {
  let {
    flag,
    redirectRoute
  } = _ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  if (flag) {
    return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, props);
  }

  return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
    to: {
      pathname: redirectRoute
    }
  });
}

FeatureToggledRoute.propTypes = {
  flag: _propTypes.default.bool.isRequired,
  redirectRoute: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\feature-toggled-route.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\actionable-message\\index.js", {"./actionable-message":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\actionable-message\\actionable-message.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\actionable-message\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _actionableMessage.default;
  }
});

var _actionableMessage = _interopRequireDefault(require("./actionable-message"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\actionable-message\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\loading-swaps-quotes\\index.js", {"./loading-swaps-quotes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\loading-swaps-quotes\\loading-swaps-quotes.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\swaps\loading-swaps-quotes\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _loadingSwapsQuotes.default;
  }
});

var _loadingSwapsQuotes = _interopRequireDefault(require("./loading-swaps-quotes"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\loading-swaps-quotes\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\awaiting-signatures\\index.js", {"./awaiting-signatures":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\awaiting-signatures\\awaiting-signatures.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\swaps\awaiting-signatures\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _awaitingSignatures.default;
  }
});

var _awaitingSignatures = _interopRequireDefault(require("./awaiting-signatures"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\awaiting-signatures\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\smart-transaction-status\\index.js", {"./smart-transaction-status":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\smart-transaction-status\\smart-transaction-status.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\swaps\smart-transaction-status\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _smartTransactionStatus.default;
  }
});

var _smartTransactionStatus = _interopRequireDefault(require("./smart-transaction-status"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\smart-transaction-status\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\awaiting-swap\\index.js", {"./awaiting-swap":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\awaiting-swap\\awaiting-swap.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\swaps\awaiting-swap\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _awaitingSwap.default;
  }
});

var _awaitingSwap = _interopRequireDefault(require("./awaiting-swap"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\awaiting-swap\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\build-quote\\index.js", {"./build-quote":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\build-quote\\build-quote.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\swaps\build-quote\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _buildQuote.default;
  }
});

var _buildQuote = _interopRequireDefault(require("./build-quote"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\build-quote\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\view-quote\\index.js", {"./view-quote":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\view-quote\\view-quote.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\swaps\view-quote\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _viewQuote.default;
  }
});

var _viewQuote = _interopRequireDefault(require("./view-quote"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\swaps\\view-quote\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\send.js", {"../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../ducks/send":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\send\\index.js","../../hooks/useMetricEvent":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useMetricEvent.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./send-content":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\send-content\\index.js","./send-content/add-recipient":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\send-content\\add-recipient\\index.js","./send-content/add-recipient/ens-input":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\send-content\\add-recipient\\ens-input.js","./send-footer":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\send-footer\\index.js","./send-header":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\send-header\\index.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\send\send.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SendTransactionScreen;

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _send = require("../../ducks/send");

var _selectors = require("../../selectors");

var _metamask = require("../../ducks/metamask/metamask");

var _actions = require("../../store/actions");

var _useMetricEvent = require("../../hooks/useMetricEvent");

var _sendHeader = _interopRequireDefault(require("./send-header"));

var _addRecipient = _interopRequireDefault(require("./send-content/add-recipient"));

var _sendContent = _interopRequireDefault(require("./send-content"));

var _sendFooter = _interopRequireDefault(require("./send-footer"));

var _ensInput = _interopRequireDefault(require("./send-content/add-recipient/ens-input"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const sendSliceIsCustomPriceExcessive = state => (0, _selectors.isCustomPriceExcessive)(state, true);

function SendTransactionScreen() {
  const history = (0, _reactRouterDom.useHistory)();
  const chainId = (0, _reactRedux.useSelector)(_selectors.getCurrentChainId);
  const stage = (0, _reactRedux.useSelector)(_send.getSendStage);
  const gasIsExcessive = (0, _reactRedux.useSelector)(sendSliceIsCustomPriceExcessive);
  const isUsingMyAccountsForRecipientSearch = (0, _reactRedux.useSelector)(_send.getIsUsingMyAccountForRecipientSearch);
  const recipient = (0, _reactRedux.useSelector)(_send.getRecipient);
  const showHexData = (0, _reactRedux.useSelector)(_metamask.getSendHexDataFeatureFlagState);
  const userInput = (0, _reactRedux.useSelector)(_send.getRecipientUserInput);
  const location = (0, _reactRouterDom.useLocation)();
  const trackUsedQRScanner = (0, _useMetricEvent.useMetricEvent)({
    eventOpts: {
      category: 'Transactions',
      action: 'Edit Screen',
      name: 'Used QR scanner'
    }
  });
  const dispatch = (0, _reactRedux.useDispatch)();
  const cleanup = (0, _react.useCallback)(() => {
    dispatch((0, _send.resetSendState)());
  }, [dispatch]);
  (0, _react.useEffect)(() => {
    if (chainId !== undefined) {
      dispatch((0, _send.initializeSendState)());
      window.addEventListener('beforeunload', cleanup);
    }
  }, [chainId, dispatch, cleanup]);
  (0, _react.useEffect)(() => {
    if (location.search === '?scan=true') {
      dispatch((0, _actions.showQrScanner)()); // Clear the queryString param after showing the modal

      const cleanUrl = window.location.href.split('?')[0];
      window.history.pushState({}, null, `${cleanUrl}`);
      window.location.hash = '#send';
    }
  }, [location, dispatch]);
  (0, _react.useEffect)(() => {
    return () => {
      dispatch((0, _send.resetSendState)());
      window.removeEventListener('beforeunload', cleanup);
    };
  }, [dispatch, cleanup]);
  let content;

  if ([_send.SEND_STAGES.EDIT, _send.SEND_STAGES.DRAFT].includes(stage)) {
    content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_sendContent.default, {
      showHexData: showHexData,
      gasIsExcessive: gasIsExcessive
    }), /*#__PURE__*/_react.default.createElement(_sendFooter.default, {
      key: "send-footer",
      history: history
    }));
  } else {
    content = /*#__PURE__*/_react.default.createElement(_addRecipient.default, null);
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container"
  }, /*#__PURE__*/_react.default.createElement(_sendHeader.default, {
    history: history
  }), /*#__PURE__*/_react.default.createElement(_ensInput.default, {
    userInput: userInput,
    className: "send__to-row",
    onChange: address => dispatch((0, _send.updateRecipientUserInput)(address)),
    onValidAddressTyped: address => dispatch((0, _send.updateRecipient)({
      address,
      nickname: ''
    })),
    internalSearch: isUsingMyAccountsForRecipientSearch,
    selectedAddress: recipient.address,
    selectedName: recipient.nickname,
    onPaste: text => (0, _send.updateRecipient)({
      address: text,
      nickname: ''
    }),
    onReset: () => dispatch((0, _send.resetRecipientInput)()),
    scanQrCode: () => {
      trackUsedQRScanner();
      dispatch((0, _actions.showQrScanner)());
    }
  }), content);
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\send\\send.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\home\\home.container.js", {"../../../app/scripts/lib/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\app\\scripts\\lib\\util.js","../../../shared/constants/alerts":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\alerts.js","../../../shared/constants/app":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\app.js","../../ducks/app/app":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\app\\app.js","../../ducks/metamask/metamask":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\metamask\\metamask.js","../../ducks/swaps/swaps":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\swaps\\swaps.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./home.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\home\\home.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\home\home.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _selectors = require("../../selectors");

var _actions = require("../../store/actions");

var _app = require("../../ducks/app/app");

var _metamask = require("../../ducks/metamask/metamask");

var _swaps = require("../../ducks/swaps/swaps");

var _util = require("../../../app/scripts/lib/util");

var _app2 = require("../../../shared/constants/app");

var _alerts = require("../../../shared/constants/alerts");

var _home = _interopRequireDefault(require("./home.component"));

const mapStateToProps = state => {
  const {
    metamask,
    appState
  } = state;
  const {
    suggestedAssets,
    seedPhraseBackedUp,
    tokens,
    threeBoxSynced,
    showRestorePrompt,
    selectedAddress,
    connectedStatusPopoverHasBeenShown,
    defaultHomeActiveTabName,
    swapsState,
    dismissSeedBackUpReminder
  } = metamask;
  const accountBalance = (0, _selectors.getCurrentEthBalance)(state);
  const {
    forgottenPassword,
    threeBoxLastUpdated
  } = appState;
  const totalUnapprovedCount = (0, _selectors.getTotalUnapprovedCount)(state);
  const swapsEnabled = (0, _swaps.getSwapsFeatureIsLive)(state);
  const pendingConfirmations = (0, _selectors.getUnapprovedTemplatedConfirmations)(state);
  const envType = (0, _util.getEnvironmentType)();
  const isPopup = envType === _app2.ENVIRONMENT_TYPE_POPUP;
  const isNotification = envType === _app2.ENVIRONMENT_TYPE_NOTIFICATION;
  const firstPermissionsRequest = (0, _selectors.getFirstPermissionRequest)(state);
  const firstPermissionsRequestId = (firstPermissionsRequest === null || firstPermissionsRequest === void 0 ? void 0 : firstPermissionsRequest.metadata.id) || null;
  const originOfCurrentTab = (0, _selectors.getOriginOfCurrentTab)(state);

  const shouldShowWeb3ShimUsageNotification = isPopup && (0, _metamask.getWeb3ShimUsageAlertEnabledness)(state) && (0, _selectors.activeTabHasPermissions)(state) && (0, _selectors.getWeb3ShimUsageStateForOrigin)(state, originOfCurrentTab) === _alerts.WEB3_SHIM_USAGE_ALERT_STATES.RECORDED;

  const isSigningQRHardwareTransaction = (0, _selectors.hasUnsignedQRHardwareTransaction)(state) || (0, _selectors.hasUnsignedQRHardwareMessage)(state);
  return {
    forgottenPassword,
    suggestedAssets,
    swapsEnabled,
    unconfirmedTransactionsCount: (0, _selectors.unconfirmedTransactionsCountSelector)(state),
    shouldShowSeedPhraseReminder: seedPhraseBackedUp === false && (parseInt(accountBalance, 16) > 0 || tokens.length > 0) && dismissSeedBackUpReminder === false,
    isPopup,
    isNotification,
    threeBoxSynced,
    showRestorePrompt,
    selectedAddress,
    threeBoxLastUpdated,
    firstPermissionsRequestId,
    totalUnapprovedCount,
    connectedStatusPopoverHasBeenShown,
    defaultHomeActiveTabName,
    haveSwapsQuotes: Boolean(Object.values(swapsState.quotes || {}).length),
    swapsFetchParams: swapsState.fetchParams,
    showAwaitingSwapScreen: swapsState.routeState === 'awaiting',
    isMainnet: (0, _selectors.getIsMainnet)(state),
    originOfCurrentTab,
    shouldShowWeb3ShimUsageNotification,
    pendingConfirmations,
    infuraBlocked: (0, _selectors.getInfuraBlocked)(state),
    notificationsToShow: (0, _selectors.getSortedNotificationsToShow)(state).length > 0,
    showWhatsNewPopup: (0, _selectors.getShowWhatsNewPopup)(state),
    showRecoveryPhraseReminder: (0, _selectors.getShowRecoveryPhraseReminder)(state),
    seedPhraseBackedUp,
    newNetworkAdded: (0, _selectors.getNewNetworkAdded)(state),
    isSigningQRHardwareTransaction,
    newCollectibleAddedMessage: (0, _selectors.getNewCollectibleAddedMessage)(state)
  };
};

const mapDispatchToProps = dispatch => ({
  closeNotificationPopup: () => (0, _actions.closeNotificationPopup)(),
  turnThreeBoxSyncingOn: () => dispatch((0, _actions.turnThreeBoxSyncingOn)()),
  setupThreeBox: () => {
    dispatch((0, _actions.getThreeBoxLastUpdated)()).then(lastUpdated => {
      if (lastUpdated) {
        dispatch((0, _app.setThreeBoxLastUpdated)(lastUpdated));
      } else {
        dispatch((0, _actions.setShowRestorePromptToFalse)());
        dispatch((0, _actions.turnThreeBoxSyncingOn)());
      }
    });
  },
  restoreFromThreeBox: address => dispatch((0, _actions.restoreFromThreeBox)(address)),
  setShowRestorePromptToFalse: () => dispatch((0, _actions.setShowRestorePromptToFalse)()),
  setConnectedStatusPopoverHasBeenShown: () => dispatch((0, _actions.setConnectedStatusPopoverHasBeenShown)()),
  onTabClick: name => dispatch((0, _actions.setDefaultHomeActiveTabName)(name)),
  setWeb3ShimUsageAlertDismissed: origin => (0, _actions.setWeb3ShimUsageAlertDismissed)(origin),
  disableWeb3ShimUsageAlert: () => (0, _actions.setAlertEnabledness)(_alerts.ALERT_TYPES.web3ShimUsage, false),
  hideWhatsNewPopup: () => dispatch((0, _app.hideWhatsNewPopup)()),
  setRecoveryPhraseReminderHasBeenShown: () => dispatch((0, _actions.setRecoveryPhraseReminderHasBeenShown)()),
  setRecoveryPhraseReminderLastShown: lastShown => dispatch((0, _actions.setRecoveryPhraseReminderLastShown)(lastShown)),
  setNewNetworkAdded: newNetwork => {
    dispatch((0, _actions.setNewNetworkAdded)(newNetwork));
  },
  setNewCollectibleAddedMessage: message => {
    dispatch((0, _actions.setNewCollectibleAddedMessage)(message));
  }
});

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_home.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\home\\home.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-transaction\\confirm-transaction.container.js", {"../../ducks/confirm-transaction/confirm-transaction.duck":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\confirm-transaction\\confirm-transaction.duck.js","../../ducks/history/history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\history\\history.js","../../ducks/send":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\send\\index.js","../../helpers/utils/transactions.util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\transactions.util.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./confirm-transaction.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-transaction\\confirm-transaction.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js","redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux\\lib\\redux.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\confirm-transaction\confirm-transaction.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var _redux = require("redux");

var _reactRouterDom = require("react-router-dom");

var _confirmTransaction = require("../../ducks/confirm-transaction/confirm-transaction.duck");

var _transactions = require("../../helpers/utils/transactions.util");

var _actions = require("../../store/actions");

var _selectors = require("../../selectors");

var _history = require("../../ducks/history/history");

var _send = require("../../ducks/send");

var _confirmTransaction2 = _interopRequireDefault(require("./confirm-transaction.component"));

const mapStateToProps = (state, ownProps) => {
  const {
    metamask: {
      unapprovedTxs
    }
  } = state;
  const {
    match: {
      params = {}
    }
  } = ownProps;
  const {
    id
  } = params;
  const sendTo = (0, _send.getSendTo)(state);
  const unconfirmedTransactions = (0, _selectors.unconfirmedTransactionsListSelector)(state);
  const totalUnconfirmed = unconfirmedTransactions.length;
  const transaction = totalUnconfirmed ? unapprovedTxs[id] || unconfirmedTransactions[0] : {};
  const {
    id: transactionId,
    type
  } = transaction;
  return {
    totalUnapprovedCount: totalUnconfirmed,
    sendTo,
    unapprovedTxs,
    id,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    paramsTransactionId: id && String(id),
    transactionId: transactionId && String(transactionId),
    transaction,
    isTokenMethodAction: (0, _transactions.isTokenMethodAction)(type)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    setTransactionToConfirm: transactionId => {
      dispatch((0, _confirmTransaction.setTransactionToConfirm)(transactionId));
    },
    clearConfirmTransaction: () => dispatch((0, _confirmTransaction.clearConfirmTransaction)()),
    getContractMethodData: data => dispatch((0, _actions.getContractMethodData)(data)),
    getTokenParams: tokenAddress => dispatch((0, _actions.getTokenParams)(tokenAddress)),
    setDefaultHomeActiveTabName: tabName => dispatch((0, _actions.setDefaultHomeActiveTabName)(tabName))
  };
};

var _default = (0, _redux.compose)(_reactRouterDom.withRouter, (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps))(_confirmTransaction2.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-transaction\\confirm-transaction.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\path-getter.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\jsan\lib\path-getter.js
      return function (require, module, exports) {
module.exports = pathGetter;

function pathGetter(obj, path) {
  if (path !== '$') {
    var paths = getPaths(path);
    for (var i = 0; i < paths.length; i++) {
      path = paths[i].toString().replace(/\\"/g, '"');
      if (typeof obj[path] === 'undefined' && i !== paths.length - 1) continue;
      obj = obj[path];
    }
  }
  return obj;
}

function getPaths(pathString) {
  var regex = /(?:\.(\w+))|(?:\[(\d+)\])|(?:\["((?:[^\\"]|\\.)*)"\])/g;
  var matches = [];
  var match;
  while (match = regex.exec(pathString)) {
    matches.push( match[1] || match[2] || match[3] );
  }
  return matches;
}

      };
    };
  }
}, {package:"jsan",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\path-getter.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\utils.js", {"./":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\index.js","./path-getter":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\path-getter.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\jsan\lib\utils.js
      return function (require, module, exports) {
var pathGetter = require('./path-getter');
var jsan = require('./');

exports.getRegexFlags = function getRegexFlags(regex) {
  var flags = '';
  if (regex.ignoreCase) flags += 'i';
  if (regex.global) flags += 'g';
  if (regex.multiline) flags += 'm';
  return flags;
};

exports.stringifyFunction = function stringifyFunction(fn, customToString) {
  if (typeof customToString === 'function') {
    return customToString(fn);
  }
  var str = fn.toString();
  var match = str.match(/^[^{]*{|^[^=]*=>/);
  var start = match ? match[0] : '<function> ';
  var end = str[str.length - 1] === '}' ? '}' : '';
  return start.replace(/\r\n|\n/g, ' ').replace(/\s+/g, ' ') + ' /* ... */ ' + end;
};

exports.restore = function restore(obj, root) {
  var type = obj[0];
  var rest = obj.slice(1);
  switch(type) {
    case '$':
      return pathGetter(root, obj);
    case 'r':
      var comma = rest.indexOf(',');
      var flags = rest.slice(0, comma);
      var source = rest.slice(comma + 1);
      return RegExp(source, flags);
    case 'd':
      return new Date(+rest);
    case 'f':
      var fn = function() { throw new Error("can't run jsan parsed function") };
      fn.toString = function() { return rest; };
      return fn;
    case 'u':
      return undefined;
    case 'e':
      var error = new Error(rest);
      error.stack = 'Stack is unavailable for jsan parsed errors';
      return error;
    case 's':
      return Symbol(rest);
    case 'g':
      return Symbol.for(rest);
    case 'm':
      return new Map(jsan.parse(rest));
    case 'l':
      return new Set(jsan.parse(rest));
    case 'n':
      return NaN;
    case 'i':
      return Infinity;
    case 'y':
      return -Infinity;
    default:
      console.warn('unknown type', obj);
      return obj;
  }
}

      };
    };
  }
}, {package:"jsan",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\jsan\\lib\\utils.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-errors\\decycle.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\sc-errors\decycle.js
      return function (require, module, exports) {
// Based on https://github.com/dscape/cycle/blob/master/cycle.js

module.exports = function decycle(object) {
// Make a deep copy of an object or array, assuring that there is at most
// one instance of each object or array in the resulting structure. The
// duplicate references (which might be forming cycles) are replaced with
// an object of the form
//      {$ref: PATH}
// where the PATH is a JSONPath string that locates the first occurance.
// So,
//      var a = [];
//      a[0] = a;
//      return JSON.stringify(JSON.decycle(a));
// produces the string '[{"$ref":"$"}]'.

// JSONPath is used to locate the unique object. $ indicates the top level of
// the object or array. [NUMBER] or [STRING] indicates a child member or
// property.

    var objects = [],   // Keep a reference to each unique object or array
        paths = [];     // Keep the path to each unique object or array

    return (function derez(value, path) {

// The derez recurses through the object, producing the deep copy.

        var i,          // The loop counter
            name,       // Property name
            nu;         // The new object or array

// typeof null === 'object', so go on if this value is really an object but not
// one of the weird builtin objects.

        if (typeof value === 'object' && value !== null &&
                !(value instanceof Boolean) &&
                !(value instanceof Date)    &&
                !(value instanceof Number)  &&
                !(value instanceof RegExp)  &&
                !(value instanceof String)) {

// If the value is an object or array, look to see if we have already
// encountered it. If so, return a $ref/path object. This is a hard way,
// linear search that will get slower as the number of unique objects grows.

            for (i = 0; i < objects.length; i += 1) {
                if (objects[i] === value) {
                    return {$ref: paths[i]};
                }
            }

// Otherwise, accumulate the unique value and its path.

            objects.push(value);
            paths.push(path);

// If it is an array, replicate the array.

            if (Object.prototype.toString.apply(value) === '[object Array]') {
                nu = [];
                for (i = 0; i < value.length; i += 1) {
                    nu[i] = derez(value[i], path + '[' + i + ']');
                }
            } else {

// If it is an object, replicate the object.

                nu = {};
                for (name in value) {
                    if (Object.prototype.hasOwnProperty.call(value, name)) {
                        nu[name] = derez(value[name],
                            path + '[' + JSON.stringify(name) + ']');
                    }
                }
            }
            return nu;
        }
        return value;
    }(object, '$'));
};

      };
    };
  }
}, {package:"sc-errors",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-errors\\decycle.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\ws-browser.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\lib\ws-browser.js
      return function (require, module, exports) {
var global;
if (typeof WorkerGlobalScope !== 'undefined') {
  global = self;
} else {
  global = typeof window !== 'undefined' && window || (function() { return this; })();
}

var WebSocket = global.WebSocket || global.MozWebSocket;

/**
 * WebSocket constructor.
 *
 * The third `opts` options object gets ignored in web browsers, since it's
 * non-standard, and throws a TypeError if passed to the constructor.
 * See: https://github.com/einaros/ws/issues/227
 *
 * @param {String} uri
 * @param {Array} protocols (optional)
 * @param {Object} opts (optional)
 * @api public
 */

function ws(uri, protocols, opts) {
  var instance;
  if (protocols) {
    instance = new WebSocket(uri, protocols);
  } else {
    instance = new WebSocket(uri);
  }
  return instance;
}

if (WebSocket) ws.prototype = WebSocket.prototype;

module.exports = WebSocket ? ws : null;

      };
    };
  }
}, {package:"socketcluster-client",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\lib\\ws-browser.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\linked-list\\_source\\linked-list.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\linked-list\_source\linked-list.js
      return function (require, module, exports) {
'use strict';

/**
 * Constants.
 */

var errorMessage;

errorMessage = 'An argument without append, prepend, ' +
    'or detach methods was given to `List';

/**
 * Creates a new List: A linked list is a bit like an Array, but
 * knows nothing about how many items are in it, and knows only about its
 * first (`head`) and last (`tail`) items. Each item (e.g. `head`, `tail`,
 * &c.) knows which item comes before or after it (its more like the
 * implementation of the DOM in JavaScript).
 * @global
 * @private
 * @constructor
 * @class Represents an instance of List.
 */

function List(/*items...*/) {
    if (arguments.length) {
        return List.from(arguments);
    }
}

var ListPrototype;

ListPrototype = List.prototype;

/**
 * Creates a new list from the arguments (each a list item) passed in.
 * @name List.of
 * @param {...ListItem} [items] - Zero or more items to attach.
 * @returns {list} - A new instance of List.
 */

List.of = function (/*items...*/) {
    return List.from.call(this, arguments);
};

/**
 * Creates a new list from the given array-like object (each a list item)
 * passed in.
 * @name List.from
 * @param {ListItem[]} [items] - The items to append.
 * @returns {list} - A new instance of List.
 */
List.from = function (items) {
    var list = new this(), length, iterator, item;

    if (items && (length = items.length)) {
        iterator = -1;

        while (++iterator < length) {
            item = items[iterator];

            if (item !== null && item !== undefined) {
                list.append(item);
            }
        }
    }

    return list;
};

/**
 * List#head
 * Default to `null`.
 */
ListPrototype.head = null;

/**
 * List#tail
 * Default to `null`.
 */
ListPrototype.tail = null;

/**
 * Returns the list's items as an array. This does *not* detach the items.
 * @name List#toArray
 * @returns {ListItem[]} - An array of (still attached) ListItems.
 */
ListPrototype.toArray = function () {
    var item = this.head,
        result = [];

    while (item) {
        result.push(item);
        item = item.next;
    }

    return result;
};

/**
 * Prepends the given item to the list: Item will be the new first item
 * (`head`).
 * @name List#prepend
 * @param {ListItem} item - The item to prepend.
 * @returns {ListItem} - An instance of ListItem (the given item).
 */
ListPrototype.prepend = function (item) {
    if (!item) {
        return false;
    }

    if (!item.append || !item.prepend || !item.detach) {
        throw new Error(errorMessage + '#prepend`.');
    }

    var self, head;

    // Cache self.
    self = this;

    // If self has a first item, defer prepend to the first items prepend
    // method, and return the result.
    head = self.head;

    if (head) {
        return head.prepend(item);
    }

    // ...otherwise, there is no `head` (or `tail`) item yet.

    // Detach the prependee.
    item.detach();

    // Set the prependees parent list to reference self.
    item.list = self;

    // Set self's first item to the prependee, and return the item.
    self.head = item;

    return item;
};

/**
 * Appends the given item to the list: Item will be the new last item (`tail`)
 * if the list had a first item, and its first item (`head`) otherwise.
 * @name List#append
 * @param {ListItem} item - The item to append.
 * @returns {ListItem} - An instance of ListItem (the given item).
 */

ListPrototype.append = function (item) {
    if (!item) {
        return false;
    }

    if (!item.append || !item.prepend || !item.detach) {
        throw new Error(errorMessage + '#append`.');
    }

    var self, head, tail;

    // Cache self.
    self = this;

    // If self has a last item, defer appending to the last items append
    // method, and return the result.
    tail = self.tail;

    if (tail) {
        return tail.append(item);
    }

    // If self has a first item, defer appending to the first items append
    // method, and return the result.
    head = self.head;

    if (head) {
        return head.append(item);
    }

    // ...otherwise, there is no `tail` or `head` item yet.

    // Detach the appendee.
    item.detach();

    // Set the appendees parent list to reference self.
    item.list = self;

    // Set self's first item to the appendee, and return the item.
    self.head = item;

    return item;
};

/**
 * Creates a new ListItem: A linked list item is a bit like DOM node:
 * It knows only about its "parent" (`list`), the item before it (`prev`),
 * and the item after it (`next`).
 * @global
 * @private
 * @constructor
 * @class Represents an instance of ListItem.
 */

function ListItem() {}

List.Item = ListItem;

var ListItemPrototype = ListItem.prototype;

ListItemPrototype.next = null;

ListItemPrototype.prev = null;

ListItemPrototype.list = null;

/**
 * Detaches the item operated on from its parent list.
 * @name ListItem#detach
 * @returns {ListItem} - The item operated on.
 */
ListItemPrototype.detach = function () {
    // Cache self, the parent list, and the previous and next items.
    var self = this,
        list = self.list,
        prev = self.prev,
        next = self.next;

    // If the item is already detached, return self.
    if (!list) {
        return self;
    }

    // If self is the last item in the parent list, link the lists last item
    // to the previous item.
    if (list.tail === self) {
        list.tail = prev;
    }

    // If self is the first item in the parent list, link the lists first item
    // to the next item.
    if (list.head === self) {
        list.head = next;
    }

    // If both the last and first items in the parent list are the same,
    // remove the link to the last item.
    if (list.tail === list.head) {
        list.tail = null;
    }

    // If a previous item exists, link its next item to selfs next item.
    if (prev) {
        prev.next = next;
    }

    // If a next item exists, link its previous item to selfs previous item.
    if (next) {
        next.prev = prev;
    }

    // Remove links from self to both the next and previous items, and to the
    // parent list.
    self.prev = self.next = self.list = null;

    // Return self.
    return self;
};

/**
 * Prepends the given item *before* the item operated on.
 * @name ListItem#prepend
 * @param {ListItem} item - The item to prepend.
 * @returns {ListItem} - The item operated on, or false when that item is not
 * attached.
 */
ListItemPrototype.prepend = function (item) {
    if (!item || !item.append || !item.prepend || !item.detach) {
        throw new Error(errorMessage + 'Item#prepend`.');
    }

    // Cache self, the parent list, and the previous item.
    var self = this,
        list = self.list,
        prev = self.prev;

    // If self is detached, return false.
    if (!list) {
        return false;
    }

    // Detach the prependee.
    item.detach();

    // If self has a previous item...
    if (prev) {
        // ...link the prependees previous item, to selfs previous item.
        item.prev = prev;

        // ...link the previous items next item, to self.
        prev.next = item;
    }

    // Set the prependees next item to self.
    item.next = self;

    // Set the prependees parent list to selfs parent list.
    item.list = list;

    // Set the previous item of self to the prependee.
    self.prev = item;

    // If self is the first item in the parent list, link the lists first item
    // to the prependee.
    if (self === list.head) {
        list.head = item;
    }

    // If the the parent list has no last item, link the lists last item to
    // self.
    if (!list.tail) {
        list.tail = self;
    }

    // Return the prependee.
    return item;
};

/**
 * Appends the given item *after* the item operated on.
 * @name ListItem#append
 * @param {ListItem} item - The item to append.
 * @returns {ListItem} - The item operated on, or false when that item is not
 * attached.
 */
ListItemPrototype.append = function (item) {
    // If item is falsey, return false.
    if (!item || !item.append || !item.prepend || !item.detach) {
        throw new Error(errorMessage + 'Item#append`.');
    }

    // Cache self, the parent list, and the next item.
    var self = this,
        list = self.list,
        next = self.next;

    // If self is detached, return false.
    if (!list) {
        return false;
    }

    // Detach the appendee.
    item.detach();

    // If self has a next item...
    if (next) {
        // ...link the appendees next item, to selfs next item.
        item.next = next;

        // ...link the next items previous item, to the appendee.
        next.prev = item;
    }

    // Set the appendees previous item to self.
    item.prev = self;

    // Set the appendees parent list to selfs parent list.
    item.list = list;

    // Set the next item of self to the appendee.
    self.next = item;

    // If the the parent list has no last item or if self is the parent lists
    // last item, link the lists last item to the appendee.
    if (self === list.tail || !list.tail) {
        list.tail = item;
    }

    // Return the appendee.
    return item;
};

/**
 * Expose `List`.
 */

module.exports = List;

      };
    };
  }
}, {package:"linked-list",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\linked-list\\_source\\linked-list.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-channel\\node_modules\\component-emitter\\index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\sc-channel\node_modules\component-emitter\index.js
      return function (require, module, exports) {

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

      };
    };
  }
}, {package:"component-emitter",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\sc-channel\\node_modules\\component-emitter\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\v1.js", {"./lib/bytesToUuid":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\lib\\bytesToUuid.js","./lib/rng":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\lib\\rng-browser.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\node_modules\uuid\v1.js
      return function (require, module, exports) {
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;

      };
    };
  }
}, {package:"uuid",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\v1.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\v4.js", {"./lib/bytesToUuid":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\lib\\bytesToUuid.js","./lib/rng":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\lib\\rng-browser.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\socketcluster-client\node_modules\uuid\v4.js
      return function (require, module, exports) {
var rng = require('./lib/rng');
var bytesToUuid = require('./lib/bytesToUuid');

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;

      };
    };
  }
}, {package:"uuid",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\socketcluster-client\\node_modules\\uuid\\v4.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-instrument\\node_modules\\symbol-observable\\lib\\ponyfill.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\redux-devtools-instrument\node_modules\symbol-observable\lib\ponyfill.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports['default'] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
	var result;
	var _Symbol = root.Symbol;

	if (typeof _Symbol === 'function') {
		if (_Symbol.observable) {
			result = _Symbol.observable;
		} else {

			// This just needs to be something that won't trample other user's Symbol.for use
			// It also will guide people to the source of their issues, if this is problematic.
			// META: It's a resource locator!
			result = _Symbol['for']('https://github.com/benlesh/symbol-observable');
			try {
				_Symbol.observable = result;
			} catch (err) {
				// Do nothing. In some environments, users have frozen `Symbol` for security reasons,
				// if it is frozen assigning to it will throw. In this case, we don't care, because
				// they will need to use the returned value from the ponyfill.
			}
		}
	} else {
		result = '@@observable';
	}

	return result;
};
      };
    };
  }
}, {package:"symbol-observable",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\redux-devtools-instrument\\node_modules\\symbol-observable\\lib\\ponyfill.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseFlatten.js", {"./_arrayPush":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_arrayPush.js","./_isFlattenable":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_isFlattenable.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\lodash\_baseFlatten.js
      return function (require, module, exports) {
var arrayPush = require('./_arrayPush'),
    isFlattenable = require('./_isFlattenable');

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;

      };
    };
  }
}, {package:"lodash",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseFlatten.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseRest.js", {"./_overRest":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_overRest.js","./_setToString":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_setToString.js","./identity":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\identity.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\lodash\_baseRest.js
      return function (require, module, exports) {
var identity = require('./identity'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

      };
    };
  }
}, {package:"lodash",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseRest.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isArrayLikeObject.js", {"./isArrayLike":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isArrayLike.js","./isObjectLike":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isObjectLike.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\lodash\isArrayLikeObject.js
      return function (require, module, exports) {
var isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

      };
    };
  }
}, {package:"lodash",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\isArrayLikeObject.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseDifference.js", {"./_SetCache":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_SetCache.js","./_arrayIncludes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_arrayIncludes.js","./_arrayIncludesWith":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_arrayIncludesWith.js","./_arrayMap":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_arrayMap.js","./_baseUnary":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseUnary.js","./_cacheHas":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_cacheHas.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\lodash\_baseDifference.js
      return function (require, module, exports) {
var SetCache = require('./_SetCache'),
    arrayIncludes = require('./_arrayIncludes'),
    arrayIncludesWith = require('./_arrayIncludesWith'),
    arrayMap = require('./_arrayMap'),
    baseUnary = require('./_baseUnary'),
    cacheHas = require('./_cacheHas');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

module.exports = baseDifference;

      };
    };
  }
}, {package:"lodash",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseDifference.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseUniq.js", {"./_SetCache":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_SetCache.js","./_arrayIncludes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_arrayIncludes.js","./_arrayIncludesWith":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_arrayIncludesWith.js","./_cacheHas":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_cacheHas.js","./_createSet":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_createSet.js","./_setToArray":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_setToArray.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\lodash\_baseUniq.js
      return function (require, module, exports) {
var SetCache = require('./_SetCache'),
    arrayIncludes = require('./_arrayIncludes'),
    arrayIncludesWith = require('./_arrayIncludesWith'),
    cacheHas = require('./_cacheHas'),
    createSet = require('./_createSet'),
    setToArray = require('./_setToArray');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

module.exports = baseUniq;

      };
    };
  }
}, {package:"lodash",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\lodash\\_baseUniq.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\node_modules\\history\\cjs\\history.js", {"resolve-pathname":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\index.js","tiny-invariant":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-invariant\\dist\\tiny-invariant.cjs.js","tiny-warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js","value-equal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router\node_modules\history\cjs\history.js
      return function (require, module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var resolvePathname = _interopDefault(require('resolve-pathname'));
var valueEqual = _interopDefault(require('value-equal'));
var warning = _interopDefault(require('tiny-warning'));
var invariant = _interopDefault(require('tiny-invariant'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
}
function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
}
function hasBasename(path, prefix) {
  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
}
function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}
function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}
function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';
  var hashIndex = pathname.indexOf('#');

  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');

  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
}
function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;
  var path = pathname || '/';
  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
  return path;
}

function createLocation(path, state, key, currentLocation) {
  var location;

  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = parsePath(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = _extends({}, path);
    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
}
function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);
}

function createTransitionManager() {
  var prompt = null;

  function setPrompt(nextPrompt) {
    warning(prompt == null, 'A history supports only one prompt at a time');
    prompt = nextPrompt;
    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  }

  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  }

  var listeners = [];

  function appendListener(fn) {
    var isActive = true;

    function listener() {
      if (isActive) fn.apply(void 0, arguments);
    }

    listeners.push(listener);
    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  }

  function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(void 0, args);
    });
  }

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
function getConfirmation(message, callback) {
  callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
  return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */

function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */

function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */


function createBrowserHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ? invariant(false, 'Browser history needs a DOM') : void 0;
  var globalHistory = window.history;
  var canUseHistory = supportsHistory();
  var needsHashChangeListener = !supportsPopStateOnHashChange();
  var _props = props,
      _props$forceRefresh = _props.forceRefresh,
      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

  function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;
    var path = pathname + search + hash;
    warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
    if (basename) path = stripBasename(path, basename);
    return createLocation(path, state, key);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if (isExtraneousPopstateEvent(event)) return;
    handlePop(getDOMLocation(event.state));
  }

  function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  }

  var forceNextPop = false;

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key]; // Public interface

  function createHref(location) {
    return basename + createPath(location);
  }

  function push(path, state) {
    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex + 1);
          nextKeys.push(location.key);
          allKeys = nextKeys;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        warning(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
        window.location.href = href;
      }
    });
  }

  function replace(path, state) {
    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        warning(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
        window.location.replace(href);
      }
    });
  }

  function go(n) {
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: stripLeadingSlash,
    decodePath: addLeadingSlash
  },
  slash: {
    encodePath: addLeadingSlash,
    decodePath: addLeadingSlash
  }
};

function stripHash(url) {
  var hashIndex = url.indexOf('#');
  return hashIndex === -1 ? url : url.slice(0, hashIndex);
}

function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}

function pushHashPath(path) {
  window.location.hash = path;
}

function replaceHashPath(path) {
  window.location.replace(stripHash(window.location.href) + '#' + path);
}

function createHashHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ? invariant(false, 'Hash history needs a DOM') : void 0;
  var globalHistory = window.history;
  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
  var _props = props,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$hashType = _props.hashType,
      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;

  function getDOMLocation() {
    var path = decodePath(getHashPath());
    warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
    if (basename) path = stripBasename(path, basename);
    return createLocation(path);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  var forceNextPop = false;
  var ignorePath = null;

  function locationsAreEqual$$1(a, b) {
    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
  }

  function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;
      handlePop(location);
    }
  }

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  } // Ensure the hash is encoded properly before doing anything else.


  var path = getHashPath();
  var encodedPath = encodePath(path);
  if (path !== encodedPath) replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [createPath(initialLocation)]; // Public interface

  function createHref(location) {
    var baseTag = document.querySelector('base');
    var href = '';

    if (baseTag && baseTag.getAttribute('href')) {
      href = stripHash(window.location.href);
    }

    return href + '#' + encodePath(basename + createPath(location));
  }

  function push(path, state) {
    warning(state === undefined, 'Hash history cannot push state; it is ignored');
    var action = 'PUSH';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);
        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
        var nextPaths = allPaths.slice(0, prevIndex + 1);
        nextPaths.push(path);
        allPaths = nextPaths;
        setState({
          action: action,
          location: location
        });
      } else {
        warning(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
        setState();
      }
    });
  }

  function replace(path, state) {
    warning(state === undefined, 'Hash history cannot replace state; it is ignored');
    var action = 'REPLACE';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf(createPath(history.location));
      if (prevIndex !== -1) allPaths[prevIndex] = path;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    warning(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(HashChangeEvent$1, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */


function createMemoryHistory(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      getUserConfirmation = _props.getUserConfirmation,
      _props$initialEntries = _props.initialEntries,
      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
      _props$initialIndex = _props.initialIndex,
      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var transitionManager = createTransitionManager();

  function setState(nextState) {
    _extends(history, nextState);

    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
  }); // Public interface

  var createHref = createPath;

  function push(path, state) {
    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);

      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  }

  function replace(path, state) {
    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      history.entries[history.index] = location;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
    var action = 'POP';
    var location = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  }

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    return transitionManager.setPrompt(prompt);
  }

  function listen(listener) {
    return transitionManager.appendListener(listener);
  }

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };
  return history;
}

exports.createBrowserHistory = createBrowserHistory;
exports.createHashHistory = createHashHistory;
exports.createMemoryHistory = createMemoryHistory;
exports.createLocation = createLocation;
exports.locationsAreEqual = locationsAreEqual;
exports.parsePath = parsePath;
exports.createPath = createPath;

      };
    };
  }
}, {package:"history",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\node_modules\\history\\cjs\\history.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\node_modules\\history\\cjs\\history.min.js", {"resolve-pathname":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\index.js","tiny-invariant":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-invariant\\dist\\tiny-invariant.cjs.js","tiny-warning":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\tiny-warning\\dist\\tiny-warning.cjs.js","value-equal":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\react-router\node_modules\history\cjs\history.min.js
      return function (require, module, exports) {
"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}Object.defineProperty(exports,"__esModule",{value:!0});var resolvePathname=_interopDefault(require("resolve-pathname")),valueEqual=_interopDefault(require("value-equal"));require("tiny-warning");var invariant=_interopDefault(require("tiny-invariant"));function _extends(){return(_extends=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a])}return t}).apply(this,arguments)}function addLeadingSlash(t){return"/"===t.charAt(0)?t:"/"+t}function stripLeadingSlash(t){return"/"===t.charAt(0)?t.substr(1):t}function hasBasename(t,n){return 0===t.toLowerCase().indexOf(n.toLowerCase())&&-1!=="/?#".indexOf(t.charAt(n.length))}function stripBasename(t,n){return hasBasename(t,n)?t.substr(n.length):t}function stripTrailingSlash(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t}function parsePath(t){var n=t||"/",e="",a="",r=n.indexOf("#");-1!==r&&(a=n.substr(r),n=n.substr(0,r));var o=n.indexOf("?");return-1!==o&&(e=n.substr(o),n=n.substr(0,o)),{pathname:n,search:"?"===e?"":e,hash:"#"===a?"":a}}function createPath(t){var n=t.pathname,e=t.search,a=t.hash,r=n||"/";return e&&"?"!==e&&(r+="?"===e.charAt(0)?e:"?"+e),a&&"#"!==a&&(r+="#"===a.charAt(0)?a:"#"+a),r}function createLocation(t,n,e,a){var r;"string"==typeof t?(r=parsePath(t)).state=n:(void 0===(r=_extends({},t)).pathname&&(r.pathname=""),r.search?"?"!==r.search.charAt(0)&&(r.search="?"+r.search):r.search="",r.hash?"#"!==r.hash.charAt(0)&&(r.hash="#"+r.hash):r.hash="",void 0!==n&&void 0===r.state&&(r.state=n));try{r.pathname=decodeURI(r.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+r.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return e&&(r.key=e),a?r.pathname?"/"!==r.pathname.charAt(0)&&(r.pathname=resolvePathname(r.pathname,a.pathname)):r.pathname=a.pathname:r.pathname||(r.pathname="/"),r}function locationsAreEqual(t,n){return t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash&&t.key===n.key&&valueEqual(t.state,n.state)}function createTransitionManager(){var o=null;var a=[];return{setPrompt:function(t){return o=t,function(){o===t&&(o=null)}},confirmTransitionTo:function(t,n,e,a){if(null!=o){var r="function"==typeof o?o(t,n):o;"string"==typeof r?"function"==typeof e?e(r,a):a(!0):a(!1!==r)}else a(!0)},appendListener:function(t){var n=!0;function e(){n&&t.apply(void 0,arguments)}return a.push(e),function(){n=!1,a=a.filter(function(t){return t!==e})}},notifyListeners:function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];a.forEach(function(t){return t.apply(void 0,n)})}}}var canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement);function getConfirmation(t,n){n(window.confirm(t))}function supportsHistory(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)}function supportsPopStateOnHashChange(){return-1===window.navigator.userAgent.indexOf("Trident")}function supportsGoWithoutReloadUsingHash(){return-1===window.navigator.userAgent.indexOf("Firefox")}function isExtraneousPopstateEvent(t){return void 0===t.state&&-1===navigator.userAgent.indexOf("CriOS")}var PopStateEvent="popstate",HashChangeEvent="hashchange";function getHistoryState(){try{return window.history.state||{}}catch(t){return{}}}function createBrowserHistory(t){void 0===t&&(t={}),canUseDOM||invariant(!1);var s=window.history,c=supportsHistory(),n=!supportsPopStateOnHashChange(),e=t,a=e.forceRefresh,h=void 0!==a&&a,r=e.getUserConfirmation,u=void 0===r?getConfirmation:r,o=e.keyLength,i=void 0===o?6:o,f=t.basename?stripTrailingSlash(addLeadingSlash(t.basename)):"";function l(t){var n=t||{},e=n.key,a=n.state,r=window.location,o=r.pathname+r.search+r.hash;return f&&(o=stripBasename(o,f)),createLocation(o,a,e)}function d(){return Math.random().toString(36).substr(2,i)}var v=createTransitionManager();function p(t){_extends(T,t),T.length=s.length,v.notifyListeners(T.location,T.action)}function g(t){isExtraneousPopstateEvent(t)||w(l(t.state))}function P(){w(l(getHistoryState()))}var m=!1;function w(n){if(m)m=!1,p();else{v.confirmTransitionTo(n,"POP",u,function(t){t?p({action:"POP",location:n}):function(t){var n=T.location,e=H.indexOf(n.key);-1===e&&(e=0);var a=H.indexOf(t.key);-1===a&&(a=0);var r=e-a;r&&(m=!0,L(r))}(n)})}}var y=l(getHistoryState()),H=[y.key];function x(t){return f+createPath(t)}function L(t){s.go(t)}var O=0;function E(t){1===(O+=t)&&1===t?(window.addEventListener(PopStateEvent,g),n&&window.addEventListener(HashChangeEvent,P)):0===O&&(window.removeEventListener(PopStateEvent,g),n&&window.removeEventListener(HashChangeEvent,P))}var S=!1;var T={length:s.length,action:"POP",location:y,createHref:x,push:function(t,n){var i=createLocation(t,n,d(),T.location);v.confirmTransitionTo(i,"PUSH",u,function(t){if(t){var n=x(i),e=i.key,a=i.state;if(c)if(s.pushState({key:e,state:a},null,n),h)window.location.href=n;else{var r=H.indexOf(T.location.key),o=H.slice(0,r+1);o.push(i.key),H=o,p({action:"PUSH",location:i})}else window.location.href=n}})},replace:function(t,n){var o="REPLACE",i=createLocation(t,n,d(),T.location);v.confirmTransitionTo(i,o,u,function(t){if(t){var n=x(i),e=i.key,a=i.state;if(c)if(s.replaceState({key:e,state:a},null,n),h)window.location.replace(n);else{var r=H.indexOf(T.location.key);-1!==r&&(H[r]=i.key),p({action:o,location:i})}else window.location.replace(n)}})},go:L,goBack:function(){L(-1)},goForward:function(){L(1)},block:function(t){void 0===t&&(t=!1);var n=v.setPrompt(t);return S||(E(1),S=!0),function(){return S&&(S=!1,E(-1)),n()}},listen:function(t){var n=v.appendListener(t);return E(1),function(){E(-1),n()}}};return T}var HashChangeEvent$1="hashchange",HashPathCoders={hashbang:{encodePath:function(t){return"!"===t.charAt(0)?t:"!/"+stripLeadingSlash(t)},decodePath:function(t){return"!"===t.charAt(0)?t.substr(1):t}},noslash:{encodePath:stripLeadingSlash,decodePath:addLeadingSlash},slash:{encodePath:addLeadingSlash,decodePath:addLeadingSlash}};function stripHash(t){var n=t.indexOf("#");return-1===n?t:t.slice(0,n)}function getHashPath(){var t=window.location.href,n=t.indexOf("#");return-1===n?"":t.substring(n+1)}function pushHashPath(t){window.location.hash=t}function replaceHashPath(t){window.location.replace(stripHash(window.location.href)+"#"+t)}function createHashHistory(t){void 0===t&&(t={}),canUseDOM||invariant(!1);var n=window.history,e=(supportsGoWithoutReloadUsingHash(),t),a=e.getUserConfirmation,i=void 0===a?getConfirmation:a,r=e.hashType,o=void 0===r?"slash":r,s=t.basename?stripTrailingSlash(addLeadingSlash(t.basename)):"",c=HashPathCoders[o],h=c.encodePath,u=c.decodePath;function f(){var t=u(getHashPath());return s&&(t=stripBasename(t,s)),createLocation(t)}var l=createTransitionManager();function d(t){_extends(E,t),E.length=n.length,l.notifyListeners(E.location,E.action)}var v=!1,p=null;function g(){var t=getHashPath(),n=h(t);if(t!==n)replaceHashPath(n);else{var e=f(),a=E.location;if(!v&&function(t,n){return t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash}(a,e))return;if(p===createPath(e))return;p=null,function(n){if(v)v=!1,d();else{l.confirmTransitionTo(n,"POP",i,function(t){t?d({action:"POP",location:n}):function(t){var n=E.location,e=y.lastIndexOf(createPath(n));-1===e&&(e=0);var a=y.lastIndexOf(createPath(t));-1===a&&(a=0);var r=e-a;r&&(v=!0,H(r))}(n)})}}(e)}}var P=getHashPath(),m=h(P);P!==m&&replaceHashPath(m);var w=f(),y=[createPath(w)];function H(t){n.go(t)}var x=0;function L(t){1===(x+=t)&&1===t?window.addEventListener(HashChangeEvent$1,g):0===x&&window.removeEventListener(HashChangeEvent$1,g)}var O=!1;var E={length:n.length,action:"POP",location:w,createHref:function(t){var n=document.querySelector("base"),e="";return n&&n.getAttribute("href")&&(e=stripHash(window.location.href)),e+"#"+h(s+createPath(t))},push:function(t,n){var o=createLocation(t,void 0,void 0,E.location);l.confirmTransitionTo(o,"PUSH",i,function(t){if(t){var n=createPath(o),e=h(s+n);if(getHashPath()!==e){p=n,pushHashPath(e);var a=y.lastIndexOf(createPath(E.location)),r=y.slice(0,a+1);r.push(n),y=r,d({action:"PUSH",location:o})}else d()}})},replace:function(t,n){var r="REPLACE",o=createLocation(t,void 0,void 0,E.location);l.confirmTransitionTo(o,r,i,function(t){if(t){var n=createPath(o),e=h(s+n);getHashPath()!==e&&(p=n,replaceHashPath(e));var a=y.indexOf(createPath(E.location));-1!==a&&(y[a]=n),d({action:r,location:o})}})},go:H,goBack:function(){H(-1)},goForward:function(){H(1)},block:function(t){void 0===t&&(t=!1);var n=l.setPrompt(t);return O||(L(1),O=!0),function(){return O&&(O=!1,L(-1)),n()}},listen:function(t){var n=l.appendListener(t);return L(1),function(){L(-1),n()}}};return E}function clamp(t,n,e){return Math.min(Math.max(t,n),e)}function createMemoryHistory(t){void 0===t&&(t={});var n=t,r=n.getUserConfirmation,e=n.initialEntries,a=void 0===e?["/"]:e,o=n.initialIndex,i=void 0===o?0:o,s=n.keyLength,c=void 0===s?6:s,h=createTransitionManager();function u(t){_extends(g,t),g.length=g.entries.length,h.notifyListeners(g.location,g.action)}function f(){return Math.random().toString(36).substr(2,c)}var l=clamp(i,0,a.length-1),d=a.map(function(t){return createLocation(t,void 0,"string"==typeof t?f():t.key||f())}),v=createPath;function p(t){var n=clamp(g.index+t,0,g.entries.length-1),e=g.entries[n];h.confirmTransitionTo(e,"POP",r,function(t){t?u({action:"POP",location:e,index:n}):u()})}var g={length:d.length,action:"POP",location:d[l],index:l,entries:d,createHref:v,push:function(t,n){var a=createLocation(t,n,f(),g.location);h.confirmTransitionTo(a,"PUSH",r,function(t){if(t){var n=g.index+1,e=g.entries.slice(0);e.length>n?e.splice(n,e.length-n,a):e.push(a),u({action:"PUSH",location:a,index:n,entries:e})}})},replace:function(t,n){var e="REPLACE",a=createLocation(t,n,f(),g.location);h.confirmTransitionTo(a,e,r,function(t){t&&(g.entries[g.index]=a,u({action:e,location:a}))})},go:p,goBack:function(){p(-1)},goForward:function(){p(1)},canGo:function(t){var n=g.index+t;return 0<=n&&n<g.entries.length},block:function(t){return void 0===t&&(t=!1),h.setPrompt(t)},listen:function(t){return h.appendListener(t)}};return g}exports.createBrowserHistory=createBrowserHistory,exports.createHashHistory=createHashHistory,exports.createMemoryHistory=createMemoryHistory,exports.createLocation=createLocation,exports.locationsAreEqual=locationsAreEqual,exports.parsePath=parsePath,exports.createPath=createPath;

      };
    };
  }
}, {package:"history",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router\\node_modules\\history\\cjs\\history.min.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\path-to-regexp\\node_modules\\isarray\\index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\path-to-regexp\node_modules\isarray\index.js
      return function (require, module, exports) {
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

      };
    };
  }
}, {package:"isarray",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\path-to-regexp\\node_modules\\isarray\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\gud\\index.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\gud\index.js
      return function (require, module, exports) {
// @flow
'use strict';

var key = '__global_unique_id__';

module.exports = function() {
  return global[key] = (global[key] || 0) + 1;
};

      };
    };
  }
}, {package:"gud",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\gud\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\cjs\\value-equal.min.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\value-equal\cjs\value-equal.min.js
      return function (require, module, exports) {
"use strict";function valueOf(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}function valueEqual(u,r){if(u===r)return!0;if(null==u||null==r)return!1;if(Array.isArray(u))return Array.isArray(r)&&u.length===r.length&&u.every(function(e,u){return valueEqual(e,r[u])});if("object"!=typeof u&&"object"!=typeof r)return!1;var e=valueOf(u),t=valueOf(r);return e!==u||t!==r?valueEqual(e,t):Object.keys(Object.assign({},u,r)).every(function(e){return valueEqual(u[e],r[e])})}module.exports=valueEqual;

      };
    };
  }
}, {package:"value-equal",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\cjs\\value-equal.min.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\cjs\\value-equal.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\value-equal\cjs\value-equal.js
      return function (require, module, exports) {
'use strict';

function valueOf(obj) {
  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
}

function valueEqual(a, b) {
  // Test for strict equality first.
  if (a === b) return true;

  // Otherwise, if either of them == null they are not equal.
  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return (
      Array.isArray(b) &&
      a.length === b.length &&
      a.every(function(item, index) {
        return valueEqual(item, b[index]);
      })
    );
  }

  if (typeof a === 'object' || typeof b === 'object') {
    var aValue = valueOf(a);
    var bValue = valueOf(b);

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    return Object.keys(Object.assign({}, a, b)).every(function(key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

module.exports = valueEqual;

      };
    };
  }
}, {package:"value-equal",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\value-equal\\cjs\\value-equal.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\cjs\\resolve-pathname.min.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\resolve-pathname\cjs\resolve-pathname.min.js
      return function (require, module, exports) {
"use strict";function isAbsolute(e){return"/"===e.charAt(0)}function spliceOne(e,t){for(var s=t,n=s+1,i=e.length;n<i;s+=1,n+=1)e[s]=e[n];e.pop()}function resolvePathname(e,t){void 0===t&&(t="");var s,n=e&&e.split("/")||[],i=t&&t.split("/")||[],l=e&&isAbsolute(e),r=t&&isAbsolute(t),o=l||r;if(e&&isAbsolute(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";if(i.length){var u=i[i.length-1];s="."===u||".."===u||""===u}else s=!1;for(var a=0,c=i.length;0<=c;c--){var f=i[c];"."===f?spliceOne(i,c):".."===f?(spliceOne(i,c),a++):a&&(spliceOne(i,c),a--)}if(!o)for(;a--;a)i.unshift("..");!o||""===i[0]||i[0]&&isAbsolute(i[0])||i.unshift("");var h=i.join("/");return s&&"/"!==h.substr(-1)&&(h+="/"),h}module.exports=resolvePathname;

      };
    };
  }
}, {package:"resolve-pathname",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\cjs\\resolve-pathname.min.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\cjs\\resolve-pathname.js", {}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\node_modules\resolve-pathname\cjs\resolve-pathname.js
      return function (require, module, exports) {
'use strict';

function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
}

// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

// This implementation is based heavily on node's url.parse
function resolvePathname(to, from) {
  if (from === undefined) from = '';

  var toParts = (to && to.split('/')) || [];
  var fromParts = (from && from.split('/')) || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');

  if (
    mustEndAbs &&
    fromParts[0] !== '' &&
    (!fromParts[0] || !isAbsolute(fromParts[0]))
  )
    fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
}

module.exports = resolvePathname;

      };
    };
  }
}, {package:"resolve-pathname",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\resolve-pathname\\cjs\\resolve-pathname.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\mobile-sync\\mobile-sync.component.js", {"../../../shared/constants/time":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\time.js","../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../components/ui/loading-screen":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\loading-screen\\index.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","pubnub":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\pubnub\\dist\\web\\pubnub.min.js","qrcode-generator":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\qrcode-generator\\qrcode.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\mobile-sync\mobile-sync.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _pubnub = _interopRequireDefault(require("pubnub"));

var _qrcodeGenerator = _interopRequireDefault(require("qrcode-generator"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));

var _time = require("../../../shared/constants/time");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const PASSWORD_PROMPT_SCREEN = 'PASSWORD_PROMPT_SCREEN';
const REVEAL_SEED_SCREEN = 'REVEAL_SEED_SCREEN';
const KEYS_GENERATION_TIME = _time.SECOND * 30;
const IDLE_TIME = _time.MINUTE * 2;

class MobileSyncPage extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      screen: PASSWORD_PROMPT_SCREEN,
      password: '',
      seedWords: null,
      importedAccounts: [],
      error: null,
      syncing: false,
      completed: false,
      channelName: undefined,
      cipherKey: undefined
    });
    (0, _defineProperty2.default)(this, "syncing", false);
  }

  componentDidMount() {
    const passwordBox = document.getElementById('password-box');

    if (passwordBox) {
      passwordBox.focus();
    }
  }

  startIdleTimeout() {
    this.idleTimeout = setTimeout(() => {
      this.clearTimeouts();
      this.goBack();
    }, IDLE_TIME);
  }

  handleSubmit(event) {
    event.preventDefault();
    this.setState({
      seedWords: null,
      error: null
    });
    this.props.requestRevealSeedWords(this.state.password).then(seedWords => {
      this.startKeysGeneration();
      this.startIdleTimeout();
      this.exportAccounts().then(importedAccounts => {
        this.setState({
          seedWords,
          importedAccounts,
          screen: REVEAL_SEED_SCREEN
        });
      });
    }).catch(error => this.setState({
      error: error.message
    }));
  }

  async exportAccounts() {
    const addresses = [];
    this.props.keyrings.forEach(keyring => {
      if (keyring.type === 'Simple Key Pair') {
        addresses.push(keyring.accounts[0]);
      }
    });
    const importedAccounts = await this.props.exportAccounts(this.state.password, addresses);
    return importedAccounts;
  }

  startKeysGeneration() {
    this.keysGenerationTimeout && clearTimeout(this.keysGenerationTimeout);
    this.disconnectWebsockets();
    this.generateCipherKeyAndChannelName();
    this.initWebsockets();
    this.keysGenerationTimeout = setTimeout(() => {
      this.startKeysGeneration();
    }, KEYS_GENERATION_TIME);
  }

  goBack() {
    const {
      history,
      mostRecentOverviewPage
    } = this.props;
    history.push(mostRecentOverviewPage);
  }

  clearTimeouts() {
    this.keysGenerationTimeout && clearTimeout(this.keysGenerationTimeout);
    this.idleTimeout && clearTimeout(this.idleTimeout);
  }

  generateCipherKeyAndChannelName() {
    this.cipherKey = `${this.props.selectedAddress.substr(-4)}-${_pubnub.default.generateUUID()}`;
    this.channelName = `mm-${_pubnub.default.generateUUID()}`;
    this.setState({
      cipherKey: this.cipherKey,
      channelName: this.channelName
    });
  }

  initWithCipherKeyAndChannelName(cipherKey, channelName) {
    this.cipherKey = cipherKey;
    this.channelName = channelName;
  }

  initWebsockets() {
    // Make sure there are no existing listeners
    this.disconnectWebsockets();
    this.pubnub = new _pubnub.default({
      subscribeKey: "",
      publishKey: "",
      cipherKey: this.cipherKey,
      ssl: true
    });
    this.pubnubListener = {
      message: data => {
        const {
          channel,
          message
        } = data; // handle message

        if (channel !== this.channelName || !message) {
          return;
        }

        if (message.event === 'start-sync') {
          this.startSyncing();
        } else if (message.event === 'connection-info') {
          this.keysGenerationTimeout && clearTimeout(this.keysGenerationTimeout);
          this.disconnectWebsockets();
          this.initWithCipherKeyAndChannelName(message.cipher, message.channel);
          this.initWebsockets();
        } else if (message.event === 'end-sync') {
          this.disconnectWebsockets();
          this.setState({
            syncing: false,
            completed: true
          });
        }
      }
    };
    this.pubnub.addListener(this.pubnubListener);
    this.pubnub.subscribe({
      channels: [this.channelName],
      withPresence: false
    });
  }

  disconnectWebsockets() {
    if (this.pubnub && this.pubnubListener) {
      this.pubnub.removeListener(this.pubnubListener);
    }
  } // Calculating a PubNub Message Payload Size.


  calculatePayloadSize(channel, message) {
    return encodeURIComponent(channel + JSON.stringify(message)).length + 100;
  }

  chunkString(str, size) {
    const numChunks = Math.ceil(str.length / size);
    const chunks = new Array(numChunks);
    let o = 0;

    for (let i = 0; i < numChunks; i += 1) {
      chunks[i] = str.substr(o, size);
      o += size;
    }

    return chunks;
  }

  notifyError(errorMsg) {
    return new Promise((resolve, reject) => {
      this.pubnub.publish({
        message: {
          event: 'error-sync',
          data: errorMsg
        },
        channel: this.channelName,
        sendByPost: false,
        // true to send via post
        storeInHistory: false
      }, (status, _response) => {
        if (status.error) {
          reject(status.errorData);
        } else {
          resolve();
        }
      });
    });
  }

  async startSyncing() {
    if (this.syncing) {
      return;
    }

    this.syncing = true;
    this.setState({
      syncing: true
    });
    const {
      accounts,
      network,
      preferences,
      transactions,
      tokens
    } = await this.props.fetchInfoToSync();
    const {
      t
    } = this.context;
    const allDataStr = JSON.stringify({
      accounts,
      network,
      preferences,
      transactions,
      tokens,
      udata: {
        pwd: this.state.password,
        seed: this.state.seedWords,
        importedAccounts: this.state.importedAccounts
      }
    });
    const chunks = this.chunkString(allDataStr, 17000);
    const totalChunks = chunks.length;

    try {
      for (let i = 0; i < totalChunks; i++) {
        await this.sendMessage(chunks[i], i + 1, totalChunks);
      }
    } catch (e) {
      this.props.displayWarning(`${t('syncFailed')} :(`);
      this.setState({
        syncing: false
      });
      this.syncing = false;
      this.notifyError(e.toString());
    }
  }

  sendMessage(data, pkg, count) {
    return new Promise((resolve, reject) => {
      this.pubnub.publish({
        message: {
          event: 'syncing-data',
          data,
          totalPkg: count,
          currentPkg: pkg
        },
        channel: this.channelName,
        sendByPost: false,
        // true to send via post
        storeInHistory: false
      }, (status, _response) => {
        if (status.error) {
          reject(status.errorData);
        } else {
          resolve();
        }
      });
    });
  }

  componentWillUnmount() {
    if (this.state.error) {
      this.props.hideWarning();
    }

    this.clearTimeouts();
    this.disconnectWebsockets();
  }

  renderWarning(text) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__warning-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__warning-message"
    }, /*#__PURE__*/_react.default.createElement("div", null, text)));
  }

  renderContent() {
    const {
      syncing,
      completed,
      screen
    } = this.state;
    const {
      t
    } = this.context;

    if (syncing) {
      return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, {
        loadingMessage: t('syncInProgress')
      });
    }

    if (completed) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "reveal-seed__content"
      }, /*#__PURE__*/_react.default.createElement("label", {
        className: "reveal-seed__label",
        style: {
          width: '100%',
          textAlign: 'center'
        }
      }, t('syncWithMobileComplete')));
    }

    return screen === PASSWORD_PROMPT_SCREEN ? /*#__PURE__*/_react.default.createElement("div", null, this.renderWarning(this.context.t('mobileSyncWarning'))) : /*#__PURE__*/_react.default.createElement("div", null, this.renderWarning(this.context.t('syncWithMobileBeCareful')), /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed__content"
    }, this.renderRevealSeedContent()));
  }

  renderPasswordPromptContent() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: event => this.handleSubmit(event)
    }, /*#__PURE__*/_react.default.createElement("label", {
      className: "input-label",
      htmlFor: "password-box"
    }, t('enterPasswordContinue')), /*#__PURE__*/_react.default.createElement("div", {
      className: "input-group"
    }, /*#__PURE__*/_react.default.createElement("input", {
      type: "password",
      placeholder: t('password'),
      id: "password-box",
      value: this.state.password,
      onChange: event => this.setState({
        password: event.target.value
      }),
      className: (0, _classnames.default)('form-control', {
        'form-control--error': this.state.error
      })
    })), this.state.error && /*#__PURE__*/_react.default.createElement("div", {
      className: "reveal-seed__error"
    }, this.state.error));
  }

  renderRevealSeedContent() {
    const qrImage = (0, _qrcodeGenerator.default)(0, 'M');
    qrImage.addData(`metamask-sync:${this.state.channelName}|@|${this.state.cipherKey}`);
    qrImage.make();
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("label", {
      className: "reveal-seed__label",
      style: {
        width: '100%',
        textAlign: 'center'
      }
    }, t('syncWithMobileScanThisCode')), /*#__PURE__*/_react.default.createElement("div", {
      style: {
        display: 'flex',
        justifyContent: 'center'
      },
      dangerouslySetInnerHTML: {
        __html: qrImage.createTableTag(4)
      }
    }));
  }

  renderFooter() {
    return this.state.screen === PASSWORD_PROMPT_SCREEN ? this.renderPasswordPromptFooter() : this.renderRevealSeedFooter();
  }

  renderPasswordPromptFooter() {
    const {
      t
    } = this.context;
    const {
      password
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form__buttons",
      style: {
        padding: '30px 15px 30px 15px',
        marginTop: 0
      }
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "new-account-create-form__button",
      onClick: () => this.goBack()
    }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "primary",
      large: true,
      className: "new-account-create-form__button",
      onClick: event => this.handleSubmit(event),
      disabled: password === ''
    }, t('next')));
  }

  renderRevealSeedFooter() {
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__footer",
      style: {
        padding: 30
      }
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "secondary",
      large: true,
      className: "page-container__footer-button",
      onClick: () => this.goBack()
    }, t('close')));
  }

  render() {
    const {
      t
    } = this.context;
    const {
      screen
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__title"
    }, t('syncWithMobileTitle')), screen === PASSWORD_PROMPT_SCREEN ? /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__subtitle"
    }, t('syncWithMobileDesc')) : null, screen === PASSWORD_PROMPT_SCREEN ? /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__subtitle"
    }, t('syncWithMobileDescNewUsers')) : null), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__content"
    }, this.renderContent()), this.renderFooter());
  }

}

exports.default = MobileSyncPage;
(0, _defineProperty2.default)(MobileSyncPage, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(MobileSyncPage, "propTypes", {
  history: _propTypes.default.object.isRequired,
  selectedAddress: _propTypes.default.string.isRequired,
  displayWarning: _propTypes.default.func.isRequired,
  fetchInfoToSync: _propTypes.default.func.isRequired,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  requestRevealSeedWords: _propTypes.default.func.isRequired,
  exportAccounts: _propTypes.default.func.isRequired,
  keyrings: _propTypes.default.array,
  hideWarning: _propTypes.default.func.isRequired
});

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\mobile-sync\\mobile-sync.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\lock\\lock.component.js", {"../../components/ui/loading-screen":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\loading-screen\\index.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\lock\lock.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _loadingScreen = _interopRequireDefault(require("../../components/ui/loading-screen"));

var _routes = require("../../helpers/constants/routes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class Lock extends _react.PureComponent {
  componentDidMount() {
    const {
      lockMetamask,
      isUnlocked,
      history
    } = this.props;

    if (isUnlocked) {
      lockMetamask().then(() => history.push(_routes.DEFAULT_ROUTE));
    } else {
      history.replace(_routes.DEFAULT_ROUTE);
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, null);
  }

}

exports.default = Lock;
(0, _defineProperty2.default)(Lock, "propTypes", {
  history: _propTypes.default.object,
  isUnlocked: _propTypes.default.bool,
  lockMetamask: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\lock\\lock.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.component.js", {"../../components/ui/actionable-message/actionable-message":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\actionable-message\\actionable-message.js","../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../components/ui/identicon":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\identicon\\index.js","../../components/ui/token-balance":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\token-balance\\index.js","../../contexts/i18n":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\contexts\\i18n.js","../../contexts/metametrics":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\contexts\\metametrics.js","../../helpers/constants/zendesk-url":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\zendesk-url.js","../../helpers/utils/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\util.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\confirm-add-suggested-token\confirm-add-suggested-token.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _actionableMessage = _interopRequireDefault(require("../../components/ui/actionable-message/actionable-message"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _identicon = _interopRequireDefault(require("../../components/ui/identicon"));

var _tokenBalance = _interopRequireDefault(require("../../components/ui/token-balance"));

var _i18n = require("../../contexts/i18n");

var _metametrics = require("../../contexts/metametrics");

var _zendeskUrl = _interopRequireDefault(require("../../helpers/constants/zendesk-url"));

var _util = require("../../helpers/utils/util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getTokenName(name, symbol) {
  return typeof name === 'undefined' ? symbol : `${name} (${symbol})`;
}
/**
 * @param {Array} suggestedAssets - an array of assets suggested to add to the user's wallet
 * via the RPC method `wallet_watchAsset`
 * @param {Array} tokens - the list of tokens currently tracked in state
 * @returns {boolean} Returns true when the list of suggestedAssets contains an entry with
 *          an address that matches an existing token.
 */


function hasDuplicateAddress(suggestedAssets, tokens) {
  const duplicate = suggestedAssets.find(({
    asset
  }) => {
    const dupe = tokens.find(({
      address
    }) => {
      return (0, _util.isEqualCaseInsensitive)(address, asset.address);
    });
    return Boolean(dupe);
  });
  return Boolean(duplicate);
}
/**
 * @param {Array} suggestedAssets - a list of assets suggested to add to the user's wallet
 * via RPC method `wallet_watchAsset`
 * @param {Array} tokens - the list of tokens currently tracked in state
 * @returns {boolean} Returns true when the list of suggestedAssets contains an entry with both
 *          1. a symbol that matches an existing token
 *          2. an address that does not match an existing token
 */


function hasDuplicateSymbolAndDiffAddress(suggestedAssets, tokens) {
  const duplicate = suggestedAssets.find(({
    asset
  }) => {
    const dupe = tokens.find(token => {
      return (0, _util.isEqualCaseInsensitive)(token.symbol, asset.symbol) && !(0, _util.isEqualCaseInsensitive)(token.address, asset.address);
    });
    return Boolean(dupe);
  });
  return Boolean(duplicate);
}

const ConfirmAddSuggestedToken = props => {
  const {
    acceptWatchAsset,
    history,
    mostRecentOverviewPage,
    rejectWatchAsset,
    suggestedAssets,
    tokens
  } = props;
  const metricsEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const t = (0, _react.useContext)(_i18n.I18nContext);

  const tokenAddedEvent = asset => {
    metricsEvent({
      event: 'Token Added',
      category: 'Wallet',
      sensitiveProperties: {
        token_symbol: asset.symbol,
        token_contract_address: asset.address,
        token_decimal_precision: asset.decimals,
        unlisted: asset.unlisted,
        source: 'dapp'
      }
    });
  };

  const knownTokenActionableMessage = (0, _react.useMemo)(() => {
    return hasDuplicateAddress(suggestedAssets, tokens) && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: t('knownTokenWarning', [/*#__PURE__*/_react.default.createElement(_button.default, {
        type: "link",
        key: "confirm-add-suggested-token-duplicate-warning",
        className: "confirm-add-suggested-token__link",
        rel: "noopener noreferrer",
        target: "_blank",
        href: _zendeskUrl.default.TOKEN_SAFETY_PRACTICES
      }, t('learnScamRisk'))]),
      type: "warning",
      withRightButton: true,
      useIcon: true,
      iconFillColor: "#f8c000"
    });
  }, [suggestedAssets, tokens, t]);
  const reusedTokenNameActionableMessage = (0, _react.useMemo)(() => {
    return hasDuplicateSymbolAndDiffAddress(suggestedAssets, tokens) && /*#__PURE__*/_react.default.createElement(_actionableMessage.default, {
      message: t('reusedTokenNameWarning'),
      type: "warning",
      withRightButton: true,
      useIcon: true,
      iconFillColor: "#f8c000"
    });
  }, [suggestedAssets, tokens, t]);
  (0, _react.useEffect)(() => {
    if (!suggestedAssets.length) {
      history.push(mostRecentOverviewPage);
    }
  }, [history, suggestedAssets, mostRecentOverviewPage]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__title"
  }, t('addSuggestedTokens')), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__subtitle"
  }, t('likeToImportTokens')), knownTokenActionableMessage, reusedTokenNameActionableMessage), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__content"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__header"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__token"
  }, t('token')), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__balance"
  }, t('balance'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "confirm-import-token__token-list"
  }, suggestedAssets.map(({
    asset
  }) => {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__token-list-item",
      key: asset.address
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__token confirm-import-token__data"
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      className: "confirm-import-token__token-icon",
      diameter: 48,
      address: asset.address,
      image: asset.image
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__name"
    }, getTokenName(asset.name, asset.symbol))), /*#__PURE__*/_react.default.createElement("div", {
      className: "confirm-import-token__balance"
    }, /*#__PURE__*/_react.default.createElement(_tokenBalance.default, {
      token: asset
    })));
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: "page-container__footer"
  }, /*#__PURE__*/_react.default.createElement("footer", null, /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "secondary",
    large: true,
    className: "page-container__footer-button",
    onClick: async () => {
      await Promise.all(suggestedAssets.map(async ({
        id
      }) => rejectWatchAsset(id)));
      history.push(mostRecentOverviewPage);
    }
  }, t('cancel')), /*#__PURE__*/_react.default.createElement(_button.default, {
    type: "primary",
    large: true,
    className: "page-container__footer-button",
    disabled: suggestedAssets.length === 0,
    onClick: async () => {
      await Promise.all(suggestedAssets.map(async ({
        asset,
        id
      }) => {
        await acceptWatchAsset(id);
        tokenAddedEvent(asset);
      }));
      history.push(mostRecentOverviewPage);
    }
  }, t('addToken')))));
};

ConfirmAddSuggestedToken.propTypes = {
  acceptWatchAsset: _propTypes.default.func,
  history: _propTypes.default.object,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  rejectWatchAsset: _propTypes.default.func,
  suggestedAssets: _propTypes.default.array,
  tokens: _propTypes.default.array
};
var _default = ConfirmAddSuggestedToken;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\confirm-add-suggested-token\\confirm-add-suggested-token.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\unlock-page\\unlock-page.component.js", {"../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../components/ui/mascot":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\mascot\\index.js","../../components/ui/text-field":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\text-field\\index.js","../../helpers/constants/common":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\common.js","../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","events":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\browserify\\node_modules\\events\\events.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","textarea-caret":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\textarea-caret\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\unlock-page\unlock-page.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _events = require("events");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _textareaCaret = _interopRequireDefault(require("textarea-caret"));

var _button = _interopRequireDefault(require("../../components/ui/button"));

var _textField = _interopRequireDefault(require("../../components/ui/text-field"));

var _mascot = _interopRequireDefault(require("../../components/ui/mascot"));

var _common = require("../../helpers/constants/common");

var _routes = require("../../helpers/constants/routes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class UnlockPage extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      password: '',
      error: null
    });
    (0, _defineProperty2.default)(this, "submitting", false);
    (0, _defineProperty2.default)(this, "animationEventEmitter", new _events.EventEmitter());
    (0, _defineProperty2.default)(this, "handleSubmit", async event => {
      event.preventDefault();
      event.stopPropagation();
      const {
        password
      } = this.state;
      const {
        onSubmit,
        forceUpdateMetamaskState,
        showOptInModal
      } = this.props;

      if (password === '' || this.submitting) {
        return;
      }

      this.setState({
        error: null
      });
      this.submitting = true;

      try {
        await onSubmit(password);
        const newState = await forceUpdateMetamaskState();
        this.context.metricsEvent({
          eventOpts: {
            category: 'Navigation',
            action: 'Unlock',
            name: 'Success'
          },
          isNewVisit: true
        });

        if (newState.participateInMetaMetrics === null || newState.participateInMetaMetrics === undefined) {
          showOptInModal();
        }
      } catch ({
        message
      }) {
        if (message === 'Incorrect password') {
          const newState = await forceUpdateMetamaskState();
          this.context.metricsEvent({
            eventOpts: {
              category: 'Navigation',
              action: 'Unlock',
              name: 'Incorrect Password'
            },
            customVariables: {
              numberOfTokens: newState.tokens.length,
              numberOfAccounts: Object.keys(newState.accounts).length
            }
          });
        }

        this.setState({
          error: message
        });
        this.submitting = false;
      }
    });
  }

  UNSAFE_componentWillMount() {
    const {
      isUnlocked,
      history
    } = this.props;

    if (isUnlocked) {
      history.push(_routes.DEFAULT_ROUTE);
    }
  }

  handleInputChange({
    target
  }) {
    this.setState({
      password: target.value,
      error: null
    }); // tell mascot to look at page action

    if (target.getBoundingClientRect) {
      const element = target;
      const boundingRect = element.getBoundingClientRect();
      const coordinates = (0, _textareaCaret.default)(element, element.selectionEnd);
      this.animationEventEmitter.emit('point', {
        x: boundingRect.left + coordinates.left - element.scrollLeft,
        y: boundingRect.top + coordinates.top - element.scrollTop
      });
    }
  }

  renderSubmitButton() {
    const style = {
      backgroundColor: '#037dd6',
      color: 'white',
      marginTop: '20px',
      height: '60px',
      fontWeight: '400',
      boxShadow: 'none',
      borderRadius: '100px'
    };
    return /*#__PURE__*/_react.default.createElement(_button.default, {
      type: "submit",
      style: style,
      disabled: !this.state.password,
      variant: "contained",
      size: "large",
      onClick: this.handleSubmit
    }, this.context.t('unlock'));
  }

  render() {
    const {
      password,
      error
    } = this.state;
    const {
      t
    } = this.context;
    const {
      onRestore
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__container"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__mascot-container"
    }, /*#__PURE__*/_react.default.createElement(_mascot.default, {
      animationEventEmitter: this.animationEventEmitter,
      width: "120",
      height: "120"
    })), /*#__PURE__*/_react.default.createElement("h1", {
      className: "unlock-page__title"
    }, t('welcomeBack')), /*#__PURE__*/_react.default.createElement("div", null, t('unlockMessage')), /*#__PURE__*/_react.default.createElement("form", {
      className: "unlock-page__form",
      onSubmit: this.handleSubmit
    }, /*#__PURE__*/_react.default.createElement(_textField.default, {
      id: "password",
      label: t('password'),
      type: "password",
      value: password,
      onChange: event => this.handleInputChange(event),
      error: error,
      autoFocus: true,
      autoComplete: "current-password",
      theme: "material",
      fullWidth: true
    })), this.renderSubmitButton(), /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__links"
    }, t('importAccountText', [/*#__PURE__*/_react.default.createElement("button", {
      key: "import-account",
      className: "unlock-page__link unlock-page__link--import",
      onClick: () => onRestore()
    }, t('importAccountLinkText'))])), /*#__PURE__*/_react.default.createElement("div", {
      className: "unlock-page__support"
    }, t('needHelp', [/*#__PURE__*/_react.default.createElement("a", {
      href: _common.SUPPORT_LINK,
      target: "_blank",
      rel: "noopener noreferrer",
      key: "need-help-link"
    }, t('needHelpLinkText'))]))));
  }

}

exports.default = UnlockPage;
(0, _defineProperty2.default)(UnlockPage, "contextTypes", {
  metricsEvent: _propTypes.default.func,
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(UnlockPage, "propTypes", {
  /**
   * History router for redirect after action
   */
  history: _propTypes.default.object.isRequired,

  /**
   * If isUnlocked is true will redirect to most recent route in history
   */
  isUnlocked: _propTypes.default.bool,

  /**
   * onClick handler for "import using Secret Recovery Phrase" link
   */
  onRestore: _propTypes.default.func,

  /**
   * onSumbit handler when form is submitted
   */
  onSubmit: _propTypes.default.func,

  /**
   * Force update metamask data state
   */
  forceUpdateMetamaskState: _propTypes.default.func,

  /**
   * Event handler to show metametrics modal
   */
  showOptInModal: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\unlock-page\\unlock-page.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\button.component.js", {"@babel/runtime/helpers/extends":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\extends.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","@babel/runtime/helpers/objectWithoutProperties":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\objectWithoutProperties.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\button\button.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

const _excluded = ["type", "submit", "large", "children", "icon", "className", "rounded"];
const CLASSNAME_DEFAULT = 'btn-default';
const CLASSNAME_PRIMARY = 'btn-primary';
const CLASSNAME_SECONDARY = 'btn-secondary';
const CLASSNAME_CONFIRM = 'btn-primary';
const CLASSNAME_RAISED = 'btn-raised';
const CLASSNAME_LARGE = 'btn--large';
const CLASSNAME_ROUNDED = 'btn--rounded';
const CLASSNAME_FIRST_TIME = 'btn--first-time';
const CLASSNAME_INLINE = 'btn--inline';
const typeHash = {
  default: CLASSNAME_DEFAULT,
  primary: CLASSNAME_PRIMARY,
  secondary: CLASSNAME_SECONDARY,
  warning: 'btn-warning',
  danger: 'btn-danger',
  'danger-primary': 'btn-danger-primary',
  link: 'btn-link',
  inline: CLASSNAME_INLINE,
  // TODO: Legacy button type to be deprecated
  confirm: CLASSNAME_CONFIRM,
  raised: CLASSNAME_RAISED,
  'first-time': CLASSNAME_FIRST_TIME
};

const Button = _ref => {
  let {
    type,
    submit = false,
    large,
    children,
    icon,
    className,
    rounded = true
  } = _ref,
      buttonProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const doRounding = rounded && type !== 'link' && type !== 'inline'; // To support using the Button component to render styled links that are semantic html
  // we swap the html tag we use to render this component and delete any buttonProps that
  // we know to be erroneous attributes for a link. We will likely want to extract Link
  // to its own component in the future.

  let Tag = 'button';

  if (type === 'link') {
    Tag = 'a';
  } else if (submit) {
    buttonProps.type = 'submit';
  }

  if (typeof buttonProps.onClick === 'function') {
    var _buttonProps$onKeyUp, _buttonProps$role, _buttonProps$tabIndex;

    (_buttonProps$onKeyUp = buttonProps.onKeyUp) !== null && _buttonProps$onKeyUp !== void 0 ? _buttonProps$onKeyUp : buttonProps.onKeyUp = event => {
      if (event.key === 'Enter') {
        buttonProps.onClick();
      }
    };
    (_buttonProps$role = buttonProps.role) !== null && _buttonProps$role !== void 0 ? _buttonProps$role : buttonProps.role = 'button';
    (_buttonProps$tabIndex = buttonProps.tabIndex) !== null && _buttonProps$tabIndex !== void 0 ? _buttonProps$tabIndex : buttonProps.tabIndex = 0;
  }

  return /*#__PURE__*/_react.default.createElement(Tag, (0, _extends2.default)({
    className: (0, _classnames.default)('button', doRounding && CLASSNAME_ROUNDED, typeHash[type] || CLASSNAME_DEFAULT, large && CLASSNAME_LARGE, className)
  }, buttonProps), icon ? /*#__PURE__*/_react.default.createElement("span", {
    className: "button__icon"
  }, icon) : null, children);
};

Button.propTypes = {
  /**
   * The type of variation a button can be.
   * Can be one of 'default','primary','secondary','warning','danger','danger-primary' or 'link'
   */
  type: _propTypes.default.string,

  /**
   * If true sets the html 'type' attribute to type="submit"
   */
  submit: _propTypes.default.bool,

  /**
   * Increase the height of the button to 54px
   */
  large: _propTypes.default.bool,

  /**
   * Additional className to provide on the root element of the button
   */
  className: _propTypes.default.string,

  /**
   * The children of the button component
   */
  children: _propTypes.default.node,

  /**
   * Provide an icon component for an icon to appear on the left side of the button
   */
  icon: _propTypes.default.node,

  /**
   * Buttons are rounded by default.
   */
  rounded: _propTypes.default.bool
};
var _default = Button;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\button.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\export-text-container\\export-text-container.component.js", {"../../../helpers/utils/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\util.js","../../../hooks/useCopyToClipboard":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useCopyToClipboard.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../icon/copy-icon.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\icon\\copy-icon.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\export-text-container\export-text-container.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _util = require("../../../helpers/utils/util");

var _copyIcon = _interopRequireDefault(require("../icon/copy-icon.component"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _useCopyToClipboard = require("../../../hooks/useCopyToClipboard");

function ExportTextContainer({
  text = ''
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const [copied, handleCopy] = (0, _useCopyToClipboard.useCopyToClipboard)();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__text-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__text notranslate"
  }, text)), /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__buttons-container"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__button export-text-container__button--copy",
    onClick: () => {
      handleCopy(text);
    }
  }, /*#__PURE__*/_react.default.createElement(_copyIcon.default, {
    size: 17,
    color: "#3098DC"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__button-text"
  }, copied ? t('copiedExclamation') : t('copyToClipboard'))), /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__button",
    onClick: () => (0, _util.exportAsFile)('', text)
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "images/download.svg",
    alt: ""
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "export-text-container__button-text"
  }, t('saveAsCsvFile')))));
}

ExportTextContainer.propTypes = {
  text: _propTypes.default.string
};

var _default = /*#__PURE__*/_react.default.memo(ExportTextContainer);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\export-text-container\\export-text-container.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\create-new-vault\\create-new-vault.js", {"../../../contexts/metametrics":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\contexts\\metametrics.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/utils/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\util.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","../../ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../ui/check-box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\check-box\\index.js","../../ui/text-field":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\text-field\\index.js","../../ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","./parse-secret-recovery-phrase":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\create-new-vault\\parse-secret-recovery-phrase.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","ethers":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\ethers\\lib\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\create-new-vault\create-new-vault.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CreateNewVault;

var _ethers = require("ethers");

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _useI18nContext = require("../../../hooks/useI18nContext");

var _metametrics = require("../../../contexts/metametrics");

var _textField = _interopRequireDefault(require("../../ui/text-field"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _util = require("../../../helpers/utils/util");

var _checkBox = _interopRequireDefault(require("../../ui/check-box"));

var _typography = _interopRequireDefault(require("../../ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _parseSecretRecoveryPhrase = require("./parse-secret-recovery-phrase");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const {
  isValidMnemonic
} = _ethers.ethers.utils;

function CreateNewVault({
  disabled = false,
  includeTerms = false,
  onSubmit,
  submitText
}) {
  const [confirmPassword, setConfirmPassword] = (0, _react.useState)('');
  const [confirmPasswordError, setConfirmPasswordError] = (0, _react.useState)('');
  const [password, setPassword] = (0, _react.useState)('');
  const [passwordError, setPasswordError] = (0, _react.useState)('');
  const [seedPhrase, setSeedPhrase] = (0, _react.useState)('');
  const [seedPhraseError, setSeedPhraseError] = (0, _react.useState)('');
  const [showSeedPhrase, setShowSeedPhrase] = (0, _react.useState)(false);
  const [termsChecked, setTermsChecked] = (0, _react.useState)(false);
  const t = (0, _useI18nContext.useI18nContext)();
  const metricsEvent = (0, _react.useContext)(_metametrics.MetaMetricsContext);
  const onSeedPhraseChange = (0, _react.useCallback)(rawSeedPhrase => {
    let newSeedPhraseError = '';

    if (rawSeedPhrase) {
      const parsedSeedPhrase = (0, _parseSecretRecoveryPhrase.parseSecretRecoveryPhrase)(rawSeedPhrase);
      const wordCount = parsedSeedPhrase.split(/\s/u).length;

      if (wordCount % 3 !== 0 || wordCount > 24 || wordCount < 12) {
        newSeedPhraseError = t('seedPhraseReq');
      } else if (!isValidMnemonic(parsedSeedPhrase)) {
        newSeedPhraseError = t('invalidSeedPhrase');
      }
    }

    setSeedPhrase(rawSeedPhrase);
    setSeedPhraseError(newSeedPhraseError);
  }, [setSeedPhrase, setSeedPhraseError, t]);
  const onPasswordChange = (0, _react.useCallback)(newPassword => {
    let newConfirmPasswordError = '';
    let newPasswordError = '';

    if (newPassword && newPassword.length < 8) {
      newPasswordError = t('passwordNotLongEnough');
    }

    if (confirmPassword && newPassword !== confirmPassword) {
      newConfirmPasswordError = t('passwordsDontMatch');
    }

    setPassword(newPassword);
    setPasswordError(newPasswordError);
    setConfirmPasswordError(newConfirmPasswordError);
  }, [confirmPassword, t]);
  const onConfirmPasswordChange = (0, _react.useCallback)(newConfirmPassword => {
    let newConfirmPasswordError = '';

    if (password !== newConfirmPassword) {
      newConfirmPasswordError = t('passwordsDontMatch');
    }

    setConfirmPassword(newConfirmPassword);
    setConfirmPasswordError(newConfirmPasswordError);
  }, [password, t]);
  const isValid = !disabled && password && confirmPassword && password === confirmPassword && seedPhrase && (!includeTerms || termsChecked) && !passwordError && !confirmPasswordError && !seedPhraseError;
  const onImport = (0, _react.useCallback)(async event => {
    event.preventDefault();

    if (!isValid) {
      return;
    }

    await onSubmit(password, (0, _parseSecretRecoveryPhrase.parseSecretRecoveryPhrase)(seedPhrase));
  }, [isValid, onSubmit, password, seedPhrase]);
  const toggleTermsCheck = (0, _react.useCallback)(() => {
    metricsEvent({
      eventOpts: {
        category: 'Onboarding',
        action: 'Import Seed Phrase',
        name: 'Check ToS'
      }
    });
    setTermsChecked(currentTermsChecked => !currentTermsChecked);
  }, [metricsEvent]);
  const toggleShowSeedPhrase = (0, _react.useCallback)(() => {
    setShowSeedPhrase(currentShowSeedPhrase => !currentShowSeedPhrase);
  }, []);
  const termsOfUse = t('acceptTermsOfUse', [/*#__PURE__*/_react.default.createElement("a", {
    className: "create-new-vault__terms-link",
    key: "create-new-vault__link-text",
    href: "https://metamask.io/terms.html",
    target: "_blank",
    rel: "noopener noreferrer"
  }, t('terms'))]);
  return /*#__PURE__*/_react.default.createElement("form", {
    className: "create-new-vault__form",
    onSubmit: onImport
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "create-new-vault__srp-section"
  }, /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: "create-new-vault__srp",
    className: "create-new-vault__srp-label"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, null, t('secretRecoveryPhrase'))), showSeedPhrase ? /*#__PURE__*/_react.default.createElement("textarea", {
    id: "create-new-vault__srp",
    className: "create-new-vault__srp-shown",
    onChange: e => onSeedPhraseChange(e.target.value),
    onPaste: _util.clearClipboard,
    value: seedPhrase,
    placeholder: t('seedPhrasePlaceholder'),
    autoComplete: "off"
  }) : /*#__PURE__*/_react.default.createElement(_textField.default, {
    id: "create-new-vault__srp",
    type: "password",
    onChange: e => onSeedPhraseChange(e.target.value),
    value: seedPhrase,
    placeholder: t('seedPhrasePlaceholderPaste'),
    autoComplete: "off",
    onPaste: _util.clearClipboard
  }), seedPhraseError ? /*#__PURE__*/_react.default.createElement(_typography.default, {
    color: _designSystem.COLORS.ERROR1,
    tag: "span",
    className: "create-new-vault__srp-error"
  }, seedPhraseError) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: "create-new-vault__show-srp"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "create-new-vault__show-srp-checkbox",
    checked: showSeedPhrase,
    onClick: toggleShowSeedPhrase,
    title: t('showSeedPhrase')
  }), /*#__PURE__*/_react.default.createElement("label", {
    className: "create-new-vault__show-srp-label",
    htmlFor: "create-new-vault__show-srp-checkbox"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: "span"
  }, t('showSeedPhrase'))))), /*#__PURE__*/_react.default.createElement(_textField.default, {
    id: "password",
    label: t('newPassword'),
    type: "password",
    value: password,
    onChange: event => onPasswordChange(event.target.value),
    error: passwordError,
    autoComplete: "new-password",
    margin: "normal",
    largeLabel: true
  }), /*#__PURE__*/_react.default.createElement(_textField.default, {
    id: "confirm-password",
    label: t('confirmPassword'),
    type: "password",
    value: confirmPassword,
    onChange: event => onConfirmPasswordChange(event.target.value),
    error: confirmPasswordError,
    autoComplete: "new-password",
    margin: "normal",
    largeLabel: true
  }), includeTerms ? /*#__PURE__*/_react.default.createElement("div", {
    className: "create-new-vault__terms"
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    id: "create-new-vault__terms-checkbox",
    dataTestId: "create-new-vault__terms-checkbox",
    checked: termsChecked,
    onClick: toggleTermsCheck
  }), /*#__PURE__*/_react.default.createElement("label", {
    className: "create-new-vault__terms-label",
    htmlFor: "create-new-vault__terms-checkbox"
  }, /*#__PURE__*/_react.default.createElement(_typography.default, {
    tag: "span"
  }, termsOfUse))) : null, /*#__PURE__*/_react.default.createElement(_button.default, {
    className: "create-new-vault__submit-button",
    type: "primary",
    submit: true,
    disabled: !isValid
  }, submitText));
}

CreateNewVault.propTypes = {
  disabled: _propTypes.default.bool,
  includeTerms: _propTypes.default.bool,
  onSubmit: _propTypes.default.func.isRequired,
  submitText: _propTypes.default.string.isRequired
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\create-new-vault\\create-new-vault.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\initialized\\initialized.component.js", {"../../constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\helpers\higher-order-components\initialized\initialized.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Initialized;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../constants/routes");

function Initialized(props) {
  return props.completedOnboarding ? /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, props) : /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
    to: {
      pathname: false ? _routes.ONBOARDING_ROUTE : _routes.INITIALIZE_ROUTE
    }
  });
}

Initialized.propTypes = {
  completedOnboarding: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\initialized\\initialized.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js", {"../../../../shared/constants/time":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\time.js","../../ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../ui/loading-screen":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\loading-screen\\index.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\loading-network-screen\loading-network-screen.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _button = _interopRequireDefault(require("../../ui/button"));

var _loadingScreen = _interopRequireDefault(require("../../ui/loading-screen"));

var _time = require("../../../../shared/constants/time");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class LoadingNetworkScreen extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      showErrorScreen: false
    });
    (0, _defineProperty2.default)(this, "componentDidMount", () => {
      this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
    });
    (0, _defineProperty2.default)(this, "getConnectingLabel", function (loadingMessage) {
      if (loadingMessage) {
        return loadingMessage;
      }

      const {
        provider,
        providerId
      } = this.props;
      const providerName = provider.type;
      let name;

      if (providerName === 'mainnet') {
        name = this.context.t('connectingToMainnet');
      } else if (providerName === 'ropsten') {
        name = this.context.t('connectingToRopsten');
      } else if (providerName === 'kovan') {
        name = this.context.t('connectingToKovan');
      } else if (providerName === 'rinkeby') {
        name = this.context.t('connectingToRinkeby');
      } else if (providerName === 'goerli') {
        name = this.context.t('connectingToGoerli');
      } else {
        name = this.context.t('connectingTo', [providerId]);
      }

      return name;
    });
    (0, _defineProperty2.default)(this, "renderErrorScreenContent", () => {
      const {
        showNetworkDropdown,
        setProviderArgs,
        setProviderType
      } = this.props;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "loading-overlay__error-screen"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: "loading-overlay__emoji"
      }, "\uD83D\uDE1E"), /*#__PURE__*/_react.default.createElement("span", null, this.context.t('somethingWentWrong')), /*#__PURE__*/_react.default.createElement("div", {
        className: "loading-overlay__error-buttons"
      }, /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "secondary",
        onClick: () => {
          window.clearTimeout(this.cancelCallTimeout);
          showNetworkDropdown();
        }
      }, this.context.t('switchNetworks')), /*#__PURE__*/_react.default.createElement(_button.default, {
        type: "primary",
        onClick: () => {
          this.setState({
            showErrorScreen: false
          });
          setProviderType(...setProviderArgs);
          window.clearTimeout(this.cancelCallTimeout);
          this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
        }
      }, this.context.t('tryAgain'))));
    });
    (0, _defineProperty2.default)(this, "cancelCall", () => {
      const {
        isNetworkLoading
      } = this.props;

      if (isNetworkLoading) {
        this.setState({
          showErrorScreen: true
        });
      }
    });
    (0, _defineProperty2.default)(this, "componentDidUpdate", prevProps => {
      const {
        provider
      } = this.props;
      const {
        provider: prevProvider
      } = prevProps;

      if (provider.type !== prevProvider.type) {
        window.clearTimeout(this.cancelCallTimeout);
        this.setState({
          showErrorScreen: false
        });
        this.cancelCallTimeout = setTimeout(this.cancelCall, this.props.cancelTime || _time.SECOND * 15);
      }
    });
    (0, _defineProperty2.default)(this, "componentWillUnmount", () => {
      window.clearTimeout(this.cancelCallTimeout);
    });
  }

  render() {
    const {
      rollbackToPreviousProvider
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_loadingScreen.default, {
      header: /*#__PURE__*/_react.default.createElement("div", {
        className: "page-container__header-close",
        onClick: rollbackToPreviousProvider
      }),
      showLoadingSpinner: !this.state.showErrorScreen,
      loadingMessage: this.state.showErrorScreen ? this.renderErrorScreenContent() : this.getConnectingLabel(this.props.loadingMessage)
    });
  }

}

exports.default = LoadingNetworkScreen;
(0, _defineProperty2.default)(LoadingNetworkScreen, "contextTypes", {
  t: _propTypes.default.func
});
(0, _defineProperty2.default)(LoadingNetworkScreen, "propTypes", {
  loadingMessage: _propTypes.default.string,
  cancelTime: _propTypes.default.number,
  provider: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
  providerId: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  showNetworkDropdown: _propTypes.default.func,
  setProviderArgs: _propTypes.default.array,
  setProviderType: _propTypes.default.func,
  rollbackToPreviousProvider: _propTypes.default.func,
  isNetworkLoading: _propTypes.default.bool
});

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\loading-network-screen\\loading-network-screen.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.component.js", {"../../constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\helpers\higher-order-components\authenticated\authenticated.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Authenticated;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _routes = require("../../constants/routes");

function Authenticated(props) {
  const {
    isUnlocked,
    completedOnboarding
  } = props;

  switch (true) {
    case isUnlocked && completedOnboarding:
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, props);

    case !completedOnboarding:
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: false ? _routes.ONBOARDING_ROUTE : _routes.INITIALIZE_ROUTE
        }
      });

    default:
      return /*#__PURE__*/_react.default.createElement(_reactRouterDom.Redirect, {
        to: {
          pathname: _routes.UNLOCK_ROUTE
        }
      });
  }
}

Authenticated.propTypes = {
  isUnlocked: _propTypes.default.bool,
  completedOnboarding: _propTypes.default.bool
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\higher-order-components\\authenticated\\authenticated.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\metafox-logo\\metafox-logo.component.js", {"@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/extends":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\extends.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\metafox-logo\metafox-logo.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class MetaFoxLogo extends _react.PureComponent {
  render() {
    const {
      onClick,
      unsetIconHeight,
      isOnboarding
    } = this.props;
    const iconProps = unsetIconHeight ? {} : {
      height: 42,
      width: 42
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      onClick: onClick,
      className: (0, _classnames.default)({
        'app-header__logo-container': !isOnboarding,
        'onboarding-app-header__logo-container': isOnboarding,
        'app-header__logo-container--clickable': Boolean(onClick)
      })
    }, /*#__PURE__*/_react.default.createElement("img", {
      height: "30",
      src: "./images/logo/metamask-logo-horizontal.svg",
      className: (0, _classnames.default)({
        'app-header__metafox-logo--horizontal': !isOnboarding,
        'onboarding-app-header__metafox-logo--horizontal': isOnboarding
      }),
      alt: ""
    }), /*#__PURE__*/_react.default.createElement("img", (0, _extends2.default)({}, iconProps, {
      src: "./images/logo/metamask-fox.svg",
      className: (0, _classnames.default)({
        'app-header__metafox-logo--icon': !isOnboarding,
        'onboarding-app-header__metafox-logo--icon': isOnboarding
      }),
      alt: ""
    })));
  }

}

exports.default = MetaFoxLogo;
(0, _defineProperty2.default)(MetaFoxLogo, "propTypes", {
  onClick: _propTypes.default.func,
  unsetIconHeight: _propTypes.default.bool,
  isOnboarding: _propTypes.default.bool
});
(0, _defineProperty2.default)(MetaFoxLogo, "defaultProps", {
  onClick: undefined
});

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\metafox-logo\\metafox-logo.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\dropdown\\dropdown.js", {"@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\dropdown\dropdown.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Dropdown = ({
  className,
  disabled = false,
  onChange,
  options,
  selectedOption = null,
  style,
  title
}) => {
  const _onChange = (0, _react.useCallback)(event => {
    event.preventDefault();
    event.stopPropagation();
    onChange(event.target.value);
  }, [onChange]);

  return /*#__PURE__*/_react.default.createElement("select", {
    className: (0, _classnames.default)('dropdown', className),
    disabled: disabled,
    title: title,
    onChange: _onChange,
    style: style,
    value: selectedOption
  }, options.map(option => {
    return /*#__PURE__*/_react.default.createElement("option", {
      key: option.value,
      value: option.value
    }, option.name || option.value);
  }));
};

Dropdown.propTypes = {
  /**
   * Additional css className to add to root of Dropdown component
   */
  className: _propTypes.default.string,

  /**
   * Disable dropdown by setting to true
   */
  disabled: _propTypes.default.bool,

  /**
   * Title of the dropdown
   */
  title: _propTypes.default.string,

  /**
   * On options change handler
   */
  onChange: _propTypes.default.func.isRequired,

  /**
   * Predefined options for component
   */
  options: _propTypes.default.arrayOf(_propTypes.default.exact({
    name: _propTypes.default.string,
    value: _propTypes.default.string.isRequired
  })).isRequired,

  /**
   * Selected options of dropdown
   */
  selectedOption: _propTypes.default.string,

  /**
   * Add inline style for the component
   */
  style: _propTypes.default.object
};
var _default = Dropdown;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\dropdown\\dropdown.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\new-account.container.js", {"../../ducks/history/history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\history\\history.js","../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./new-account.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\new-account.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\create-account\new-account.container.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactRedux = require("react-redux");

var actions = _interopRequireWildcard(require("../../store/actions"));

var _history = require("../../ducks/history/history");

var _selectors = require("../../selectors");

var _newAccount = _interopRequireDefault(require("./new-account.component"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const mapStateToProps = state => {
  const {
    metamask: {
      identities = {}
    }
  } = state;
  const numberOfExistingAccounts = Object.keys(identities).length;
  const newAccountNumber = numberOfExistingAccounts + 1;
  return {
    newAccountNumber,
    mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
    accounts: (0, _selectors.getMetaMaskAccountsOrdered)(state)
  };
};

const mapDispatchToProps = dispatch => {
  return {
    createAccount: newAccountName => {
      return dispatch(actions.addNewAccount()).then(newAccountAddress => {
        if (newAccountName) {
          dispatch(actions.setAccountLabel(newAccountAddress, newAccountName));
        }
      });
    }
  };
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(_newAccount.default);

exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\new-account.container.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\connect-hardware\\index.js", {"../../../../shared/constants/hardware-wallets":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\hardware-wallets.js","../../../../shared/constants/time":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\time.js","../../../ducks/history/history":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\ducks\\history\\history.js","../../../helpers/utils/util":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\utils\\util.js","../../../selectors":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\selectors\\index.js","../../../store/actions":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\store\\actions.js","./account-list":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\connect-hardware\\account-list.js","./select-hardware":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\connect-hardware\\select-hardware.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-redux":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-redux\\lib\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\create-account\connect-hardware\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var actions = _interopRequireWildcard(require("../../../store/actions"));

var _selectors = require("../../../selectors");

var _util = require("../../../helpers/utils/util");

var _history = require("../../../ducks/history/history");

var _time = require("../../../../shared/constants/time");

var _hardwareWallets = require("../../../../shared/constants/hardware-wallets");

var _selectHardware = _interopRequireDefault(require("./select-hardware"));

var _accountList = _interopRequireDefault(require("./account-list"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const U2F_ERROR = 'U2F';
const LEDGER_LIVE_PATH = `m/44'/60'/0'/0/0`;
const MEW_PATH = `m/44'/60'/0'`;
const BIP44_PATH = `m/44'/60'/0'/0`;
const LEDGER_HD_PATHS = [{
  name: 'Ledger Live',
  value: LEDGER_LIVE_PATH
}, {
  name: 'Legacy (MEW / MyCrypto)',
  value: MEW_PATH
}, {
  name: `BIP44 Standard (e.g. MetaMask, Trezor)`,
  value: BIP44_PATH
}];
const LATTICE_STANDARD_BIP44_PATH = `m/44'/60'/0'/0/x`;
const LATTICE_LEDGER_LIVE_PATH = `m/44'/60'/x'/0/0`;
const LATTICE_MEW_PATH = `m/44'/60'/0'/x`;
const LATTICE_HD_PATHS = [{
  name: `Standard (${LATTICE_STANDARD_BIP44_PATH})`,
  value: LATTICE_STANDARD_BIP44_PATH
}, {
  name: `Ledger Live (${LATTICE_LEDGER_LIVE_PATH})`,
  value: LATTICE_LEDGER_LIVE_PATH
}, {
  name: `Ledger Legacy (${LATTICE_MEW_PATH})`,
  value: LATTICE_MEW_PATH
}];
const TREZOR_TESTNET_PATH = `m/44'/1'/0'/0`;
const TREZOR_HD_PATHS = [{
  name: `BIP44 Standard (e.g. MetaMask, Trezor)`,
  value: BIP44_PATH
}, {
  name: `Trezor Testnets`,
  value: TREZOR_TESTNET_PATH
}];
const HD_PATHS = {
  ledger: LEDGER_HD_PATHS,
  lattice: LATTICE_HD_PATHS,
  trezor: TREZOR_HD_PATHS
};

class ConnectHardwareForm extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      error: null,
      selectedAccounts: [],
      accounts: [],
      browserSupported: true,
      unlocked: false,
      device: null
    });
    (0, _defineProperty2.default)(this, "connectToHardwareWallet", device => {
      this.setState({
        device
      });

      if (this.state.accounts.length) {
        return;
      } // Default values


      this.getPage(device, 0, this.props.defaultHdPaths[device]);
    });
    (0, _defineProperty2.default)(this, "onPathChange", path => {
      this.props.setHardwareWalletDefaultHdPath({
        device: this.state.device,
        path
      });
      this.setState({
        selectedAccounts: []
      });
      this.getPage(this.state.device, 0, path);
    });
    (0, _defineProperty2.default)(this, "onAccountChange", account => {
      let {
        selectedAccounts
      } = this.state;

      if (selectedAccounts.includes(account)) {
        selectedAccounts = selectedAccounts.filter(acc => account !== acc);
      } else {
        selectedAccounts.push(account);
      }

      this.setState({
        selectedAccounts,
        error: null
      });
    });
    (0, _defineProperty2.default)(this, "onAccountRestriction", () => {
      this.setState({
        error: this.context.t('ledgerAccountRestriction')
      });
    });
    (0, _defineProperty2.default)(this, "getPage", (device, page, hdPath) => {
      this.props.connectHardware(device, page, hdPath, this.context.t).then(accounts => {
        if (accounts.length) {
          // If we just loaded the accounts for the first time
          // (device previously locked) show the global alert
          if (this.state.accounts.length === 0 && !this.state.unlocked) {
            this.showTemporaryAlert();
          } // Map accounts with balances


          const newAccounts = accounts.map(account => {
            var _this$props$accounts$;

            const normalizedAddress = account.address.toLowerCase();
            const balanceValue = ((_this$props$accounts$ = this.props.accounts[normalizedAddress]) === null || _this$props$accounts$ === void 0 ? void 0 : _this$props$accounts$.balance) || null;
            account.balance = balanceValue ? (0, _util.formatBalance)(balanceValue, 6) : '...';
            return account;
          });
          this.setState({
            accounts: newAccounts,
            unlocked: true,
            device,
            error: null
          });
        }
      }).catch(e => {
        const errorMessage = typeof e === 'string' ? e : e.message;

        if (errorMessage === 'Window blocked') {
          this.setState({
            browserSupported: false,
            error: null
          });
        } else if (errorMessage.includes(U2F_ERROR)) {
          this.setState({
            error: U2F_ERROR
          });
        } else if (errorMessage === 'LEDGER_LOCKED' || errorMessage === 'LEDGER_WRONG_APP') {
          this.setState({
            error: this.context.t('ledgerLocked')
          });
        } else if (errorMessage.includes('timeout')) {
          this.setState({
            error: this.context.t('ledgerTimeout')
          });
        } else if (errorMessage.toLowerCase().includes('KeystoneError#pubkey_account.no_expected_account'.toLowerCase())) {
          this.setState({
            error: this.context.t('QRHardwarePubkeyAccountOutOfRange')
          });
        } else if (errorMessage !== 'Window closed' && errorMessage !== 'Popup closed' && errorMessage.toLowerCase().includes('KeystoneError#sync_cancel'.toLowerCase()) === false) {
          this.setState({
            error: errorMessage
          });
        }
      });
    });
    (0, _defineProperty2.default)(this, "onForgetDevice", device => {
      this.props.forgetDevice(device).then(_ => {
        this.setState({
          error: null,
          selectedAccounts: [],
          accounts: [],
          unlocked: false
        });
      }).catch(e => {
        this.setState({
          error: e.message
        });
      });
    });
    (0, _defineProperty2.default)(this, "onUnlockAccounts", (device, path) => {
      const {
        history,
        mostRecentOverviewPage,
        unlockHardwareWalletAccounts
      } = this.props;
      const {
        selectedAccounts
      } = this.state;

      if (selectedAccounts.length === 0) {
        this.setState({
          error: this.context.t('accountSelectionRequired')
        });
      }

      const description = MEW_PATH === path ? this.context.t('hardwareWalletLegacyDescription') : '';
      return unlockHardwareWalletAccounts(selectedAccounts, device, path || null, description).then(_ => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Accounts',
            action: 'Connected Hardware Wallet',
            name: `Connected Account with: ${device}`
          }
        });
        history.push(mostRecentOverviewPage);
      }).catch(e => {
        this.context.metricsEvent({
          eventOpts: {
            category: 'Accounts',
            action: 'Connected Hardware Wallet',
            name: 'Error connecting hardware wallet'
          },
          customVariables: {
            error: e.message
          }
        });
        this.setState({
          error: e.message
        });
      });
    });
    (0, _defineProperty2.default)(this, "onCancel", () => {
      const {
        history,
        mostRecentOverviewPage
      } = this.props;
      history.push(mostRecentOverviewPage);
    });
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    const {
      accounts
    } = nextProps;
    const newAccounts = this.state.accounts.map(a => {
      var _accounts$normalizedA;

      const normalizedAddress = a.address.toLowerCase();
      const balanceValue = ((_accounts$normalizedA = accounts[normalizedAddress]) === null || _accounts$normalizedA === void 0 ? void 0 : _accounts$normalizedA.balance) || null;
      a.balance = balanceValue ? (0, _util.formatBalance)(balanceValue, 6) : '...';
      return a;
    });
    this.setState({
      accounts: newAccounts
    });
  }

  componentDidMount() {
    this.checkIfUnlocked();
  }

  async checkIfUnlocked() {
    for (const device of [_hardwareWallets.DEVICE_NAMES.TREZOR, _hardwareWallets.DEVICE_NAMES.LEDGER, _hardwareWallets.DEVICE_NAMES.LATTICE]) {
      const path = this.props.defaultHdPaths[device];
      const unlocked = await this.props.checkHardwareStatus(device, path);

      if (unlocked) {
        this.setState({
          unlocked: true
        });
        this.getPage(device, 0, path);
      }
    }
  }

  showTemporaryAlert() {
    this.props.showAlert(this.context.t('hardwareWalletConnected')); // Autohide the alert after 5 seconds

    setTimeout(_ => {
      this.props.hideAlert();
    }, _time.SECOND * 5);
  }

  renderError() {
    if (this.state.error === U2F_ERROR) {
      return /*#__PURE__*/_react.default.createElement("p", {
        className: "hw-connect__error"
      }, this.context.t('troubleConnectingToWallet', [this.state.device,
      /*#__PURE__*/
      // eslint-disable-next-line react/jsx-key
      _react.default.createElement("a", {
        href: "https://metamask.zendesk.com/hc/en-us/articles/360020394612-How-to-connect-a-Trezor-or-Ledger-Hardware-Wallet",
        key: "hardware-connection-guide",
        target: "_blank",
        rel: "noopener noreferrer",
        className: "hw-connect__link",
        style: {
          marginLeft: '5px',
          marginRight: '5px'
        }
      }, this.context.t('walletConnectionGuide'))]));
    }

    return this.state.error ? /*#__PURE__*/_react.default.createElement("span", {
      className: "hw-connect__error"
    }, this.state.error) : null;
  }

  renderContent() {
    if (!this.state.accounts.length) {
      return /*#__PURE__*/_react.default.createElement(_selectHardware.default, {
        connectToHardwareWallet: this.connectToHardwareWallet,
        browserSupported: this.state.browserSupported,
        ledgerTransportType: this.props.ledgerTransportType
      });
    }

    return /*#__PURE__*/_react.default.createElement(_accountList.default, {
      onPathChange: this.onPathChange,
      selectedPath: this.props.defaultHdPaths[this.state.device],
      device: this.state.device,
      accounts: this.state.accounts,
      connectedAccounts: this.props.connectedAccounts,
      selectedAccounts: this.state.selectedAccounts,
      onAccountChange: this.onAccountChange,
      chainId: this.props.chainId,
      rpcPrefs: this.props.rpcPrefs,
      getPage: this.getPage,
      onUnlockAccounts: this.onUnlockAccounts,
      onForgetDevice: this.onForgetDevice,
      onCancel: this.onCancel,
      onAccountRestriction: this.onAccountRestriction,
      hdPaths: HD_PATHS
    });
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.renderError(), this.renderContent());
  }

}

(0, _defineProperty2.default)(ConnectHardwareForm, "contextTypes", {
  t: _propTypes.default.func
});
ConnectHardwareForm.propTypes = {
  connectHardware: _propTypes.default.func,
  checkHardwareStatus: _propTypes.default.func,
  forgetDevice: _propTypes.default.func,
  showAlert: _propTypes.default.func,
  hideAlert: _propTypes.default.func,
  unlockHardwareWalletAccounts: _propTypes.default.func,
  setHardwareWalletDefaultHdPath: _propTypes.default.func,
  history: _propTypes.default.object,
  chainId: _propTypes.default.string,
  rpcPrefs: _propTypes.default.object,
  accounts: _propTypes.default.object,
  connectedAccounts: _propTypes.default.array.isRequired,
  defaultHdPaths: _propTypes.default.object,
  mostRecentOverviewPage: _propTypes.default.string.isRequired,
  ledgerTransportType: _propTypes.default.oneOf(Object.values(_hardwareWallets.LEDGER_TRANSPORT_TYPES))
};

const mapStateToProps = state => ({
  chainId: (0, _selectors.getCurrentChainId)(state),
  rpcPrefs: (0, _selectors.getRpcPrefsForCurrentProvider)(state),
  accounts: (0, _selectors.getMetaMaskAccounts)(state),
  connectedAccounts: (0, _selectors.getMetaMaskAccountsConnected)(state),
  defaultHdPaths: state.appState.defaultHdPaths,
  mostRecentOverviewPage: (0, _history.getMostRecentOverviewPage)(state),
  ledgerTransportType: state.metamask.ledgerTransportType
});

const mapDispatchToProps = dispatch => {
  return {
    setHardwareWalletDefaultHdPath: ({
      device,
      path
    }) => {
      return dispatch(actions.setHardwareWalletDefaultHdPath({
        device,
        path
      }));
    },
    connectHardware: (deviceName, page, hdPath, t) => {
      return dispatch(actions.connectHardware(deviceName, page, hdPath, t));
    },
    checkHardwareStatus: (deviceName, hdPath) => {
      return dispatch(actions.checkHardwareStatus(deviceName, hdPath));
    },
    forgetDevice: deviceName => {
      return dispatch(actions.forgetDevice(deviceName));
    },
    unlockHardwareWalletAccounts: (indexes, deviceName, hdPath, hdPathDescription) => {
      return dispatch(actions.unlockHardwareWalletAccounts(indexes, deviceName, hdPath, hdPathDescription));
    },
    showAlert: msg => dispatch(actions.showAlert(msg)),
    hideAlert: () => dispatch(actions.hideAlert())
  };
};

ConnectHardwareForm.contextTypes = {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ConnectHardwareForm);

exports.default = _default;


      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\connect-hardware\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\import-account\\index.js", {"../../../components/ui/dropdown":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\dropdown\\index.js","./json":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\import-account\\json.js","./private-key":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\import-account\\private-key.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\create-account\import-account\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dropdown = _interopRequireDefault(require("../../../components/ui/dropdown"));

var _json = _interopRequireDefault(require("./json"));

var _privateKey = _interopRequireDefault(require("./private-key"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Subviews
class AccountImportSubview extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {});
  }

  getMenuItemTexts() {
    return [this.context.t('privateKey'), this.context.t('jsonFile')];
  }

  renderImportView() {
    const {
      type
    } = this.state;
    const menuItems = this.getMenuItemTexts();
    const current = type || menuItems[0];

    switch (current) {
      case this.context.t('privateKey'):
        return /*#__PURE__*/_react.default.createElement(_privateKey.default, null);

      case this.context.t('jsonFile'):
        return /*#__PURE__*/_react.default.createElement(_json.default, null);

      default:
        return /*#__PURE__*/_react.default.createElement(_json.default, null);
    }
  }

  render() {
    const menuItems = this.getMenuItemTexts();
    const {
      type
    } = this.state;
    const {
      t
    } = this.context;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__header"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__title"
    }, t('importAccount')), /*#__PURE__*/_react.default.createElement("div", {
      className: "page-container__subtitle"
    }, t('importAccountMsg'), /*#__PURE__*/_react.default.createElement("span", {
      className: "new-account-info-link",
      onClick: () => {
        global.platform.openTab({
          url: 'https://metamask.zendesk.com/hc/en-us/articles/360015289932'
        });
      }
    }, t('here')))), /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form__select-section"
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "new-account-import-form__select-label"
    }, t('selectType')), /*#__PURE__*/_react.default.createElement(_dropdown.default, {
      className: "new-account-import-form__select",
      options: menuItems.map(text => ({
        value: text
      })),
      selectedOption: type || menuItems[0],
      onChange: value => {
        this.setState({
          type: value
        });
      }
    })), this.renderImportView()));
  }

}

exports.default = AccountImportSubview;
(0, _defineProperty2.default)(AccountImportSubview, "contextTypes", {
  t: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\create-account\\import-account\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\app-header\\app-header.component.js", {"../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../ui/identicon":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\identicon\\index.js","../../ui/metafox-logo":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\metafox-logo\\index.js","../network-display":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\network-display\\index.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\app-header\app-header.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _identicon = _interopRequireDefault(require("../../ui/identicon"));

var _metafoxLogo = _interopRequireDefault(require("../../ui/metafox-logo"));

var _routes = require("../../../helpers/constants/routes");

var _networkDisplay = _interopRequireDefault(require("../network-display"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class AppHeader extends _react.PureComponent {
  handleNetworkIndicatorClick(event) {
    event.preventDefault();
    event.stopPropagation();
    const {
      networkDropdownOpen,
      showNetworkDropdown,
      hideNetworkDropdown,
      disabled,
      disableNetworkIndicator
    } = this.props;

    if (disabled || disableNetworkIndicator) {
      return;
    }

    if (networkDropdownOpen === false) {
      this.context.metricsEvent({
        eventOpts: {
          category: 'Navigation',
          action: 'Home',
          name: 'Opened Network Menu'
        }
      });
      showNetworkDropdown();
    } else {
      hideNetworkDropdown();
    }
  }

  renderAccountMenu() {
    const {
      isUnlocked,
      toggleAccountMenu,
      selectedAddress,
      disabled,
      isAccountMenuOpen
    } = this.props;
    return isUnlocked && /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('account-menu__icon', {
        'account-menu__icon--disabled': disabled
      }),
      onClick: () => {
        if (!disabled) {
          !isAccountMenuOpen && this.context.metricsEvent({
            eventOpts: {
              category: 'Navigation',
              action: 'Home',
              name: 'Opened Main Menu'
            }
          });
          toggleAccountMenu();
        }
      }
    }, /*#__PURE__*/_react.default.createElement(_identicon.default, {
      address: selectedAddress,
      diameter: 32,
      addBorder: true
    }));
  }

  render() {
    const {
      history,
      isUnlocked,
      hideNetworkIndicator,
      disableNetworkIndicator,
      disabled,
      onClick
    } = this.props;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)('app-header', {
        'app-header--back-drop': isUnlocked
      })
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "app-header__contents"
    }, /*#__PURE__*/_react.default.createElement(_metafoxLogo.default, {
      unsetIconHeight: true,
      onClick: async () => {
        if (onClick) {
          await onClick();
        }

        history.push(_routes.DEFAULT_ROUTE);
      }
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: "app-header__account-menu-container"
    }, !hideNetworkIndicator && /*#__PURE__*/_react.default.createElement("div", {
      className: "app-header__network-component-wrapper"
    }, /*#__PURE__*/_react.default.createElement(_networkDisplay.default, {
      colored: false,
      outline: true,
      iconClassName: "app-header__network-down-arrow",
      onClick: event => this.handleNetworkIndicatorClick(event),
      disabled: disabled || disableNetworkIndicator
    })), this.renderAccountMenu())));
  }

}

exports.default = AppHeader;
(0, _defineProperty2.default)(AppHeader, "propTypes", {
  history: _propTypes.default.object,
  networkDropdownOpen: _propTypes.default.bool,
  showNetworkDropdown: _propTypes.default.func,
  hideNetworkDropdown: _propTypes.default.func,
  toggleAccountMenu: _propTypes.default.func,
  selectedAddress: _propTypes.default.string,
  isUnlocked: _propTypes.default.bool,
  hideNetworkIndicator: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  disableNetworkIndicator: _propTypes.default.bool,
  isAccountMenuOpen: _propTypes.default.bool,
  onClick: _propTypes.default.func
});
(0, _defineProperty2.default)(AppHeader, "contextTypes", {
  t: _propTypes.default.func,
  metricsEvent: _propTypes.default.func
});

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\app-header\\app-header.component.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\spinner\\index.js", {"./spinner.component":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\spinner\\spinner.component.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\spinner\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _spinner = _interopRequireDefault(require("./spinner.component"));

var _default = _spinner.default;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\spinner\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js", {"./typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\typography.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\typography\index.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _typography.default;
  }
});

var _typography = _interopRequireDefault(require("./typography"));

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js", {"./box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\box.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\box\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "MultipleSizes", {
  enumerable: true,
  get: function () {
    return _box.MultipleSizes;
  }
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    return _box.default;
  }
});

var _box = _interopRequireWildcard(require("./box"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\recovery-phrase\\recovery-phrase-chips.js", {"../../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../../components/ui/chip":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\chip\\index.js","../../../components/ui/chip/chip-with-input":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\chip\\chip-with-input.js","../../../components/ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\recovery-phrase\recovery-phrase-chips.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = RecoveryPhraseChips;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _chip = _interopRequireDefault(require("../../../components/ui/chip"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _chipWithInput = require("../../../components/ui/chip/chip-with-input");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _designSystem = require("../../../helpers/constants/design-system");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function RecoveryPhraseChips({
  secretRecoveryPhrase,
  phraseRevealed,
  confirmPhase,
  setInputValue,
  inputValue,
  indicesToCheck
}) {
  const t = (0, _useI18nContext.useI18nContext)();
  const hideSeedPhrase = phraseRevealed === false;
  return /*#__PURE__*/_react.default.createElement(_box.default, {
    borderColor: _designSystem.COLORS.UI2,
    borderStyle: _designSystem.BORDER_STYLE.SOLID,
    padding: 4,
    borderWidth: 1,
    borderRadius: _designSystem.SIZES.MD,
    display: _designSystem.DISPLAY.GRID,
    marginBottom: 4,
    className: "recovery-phrase__secret"
  }, /*#__PURE__*/_react.default.createElement("div", {
    "data-testid": "recovery-phrase-chips",
    className: (0, _classnames.default)('recovery-phrase__chips', {
      'recovery-phrase__chips--hidden': hideSeedPhrase
    })
  }, secretRecoveryPhrase.map((word, index) => {
    if (confirmPhase && indicesToCheck && indicesToCheck.includes(index)) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "recovery-phrase__chip-item",
        key: index
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "recovery-phrase__chip-item__number"
      }, `${index + 1}.`), /*#__PURE__*/_react.default.createElement(_chipWithInput.ChipWithInput, {
        dataTestId: `recovery-phrase-input-${index}`,
        borderColor: _designSystem.COLORS.PRIMARY1,
        className: "recovery-phrase__chip--with-input",
        inputValue: inputValue[index],
        setInputValue: value => {
          setInputValue(_objectSpread(_objectSpread({}, inputValue), {}, {
            [index]: value
          }));
        }
      }));
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: "recovery-phrase__chip-item",
      key: index
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "recovery-phrase__chip-item__number"
    }, `${index + 1}.`), /*#__PURE__*/_react.default.createElement(_chip.default, {
      dataTestId: `recovery-phrase-chip-${index}`,
      className: "recovery-phrase__chip",
      borderColor: _designSystem.COLORS.UI3
    }, word));
  })), hideSeedPhrase && /*#__PURE__*/_react.default.createElement("div", {
    className: "recovery-phrase__secret-blocker"
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "far fa-eye-slash",
    color: "white"
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.H6,
    color: _designSystem.COLORS.WHITE,
    className: "recovery-phrase__secret-blocker--text"
  }, t('makeSureNoOneWatching'))));
}

RecoveryPhraseChips.propTypes = {
  secretRecoveryPhrase: _propTypes.default.array,
  phraseRevealed: _propTypes.default.bool,
  confirmPhase: _propTypes.default.bool,
  setInputValue: _propTypes.default.func,
  inputValue: _propTypes.default.string,
  indicesToCheck: _propTypes.default.array
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\recovery-phrase\\recovery-phrase-chips.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\step-progress-bar\\index.js", {"./step-progress-bar":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\step-progress-bar\\step-progress-bar.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\app\step-progress-bar\index.js
      return function (require, module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ThreeStepProgressBar", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.ThreeStepProgressBar;
  }
});
Object.defineProperty(exports, "TwoStepProgressBar", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.TwoStepProgressBar;
  }
});
Object.defineProperty(exports, "threeStepStages", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.threeStepStages;
  }
});
Object.defineProperty(exports, "twoStepStages", {
  enumerable: true,
  get: function () {
    return _stepProgressBar.twoStepStages;
  }
});

var _stepProgressBar = require("./step-progress-bar");

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\app\\step-progress-bar\\index.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\secure-your-wallet\\skip-srp-backup-popover.js", {"../../../components/ui/box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","../../../components/ui/button":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\button\\index.js","../../../components/ui/check-box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\check-box\\index.js","../../../components/ui/popover":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\popover\\index.js","../../../components/ui/typography":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\index.js","../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../../../helpers/constants/routes":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\routes.js","../../../hooks/useI18nContext":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useI18nContext.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js","react-router-dom":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react-router-dom\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\pages\onboarding-flow\secure-your-wallet\skip-srp-backup-popover.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SkipSRPBackup;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRouterDom = require("react-router-dom");

var _useI18nContext = require("../../../hooks/useI18nContext");

var _button = _interopRequireDefault(require("../../../components/ui/button"));

var _popover = _interopRequireDefault(require("../../../components/ui/popover"));

var _box = _interopRequireDefault(require("../../../components/ui/box"));

var _typography = _interopRequireDefault(require("../../../components/ui/typography"));

var _designSystem = require("../../../helpers/constants/design-system");

var _checkBox = _interopRequireDefault(require("../../../components/ui/check-box"));

var _routes = require("../../../helpers/constants/routes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SkipSRPBackup({
  handleClose
}) {
  const [checked, setChecked] = (0, _react.useState)(false);
  const t = (0, _useI18nContext.useI18nContext)();
  const history = (0, _reactRouterDom.useHistory)();
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    className: "skip-srp-backup-popover",
    footer: /*#__PURE__*/_react.default.createElement(_box.default, {
      className: "skip-srp-backup-popover__footer",
      justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
      alignItems: _designSystem.ALIGN_ITEMS.CENTER
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      onClick: handleClose,
      type: "secondary",
      rounded: true
    }, t('goBack')), /*#__PURE__*/_react.default.createElement(_button.default, {
      "data-testid": "skip-srp-backup",
      disabled: !checked,
      type: "primary",
      rounded: true,
      onClick: () => history.push(_routes.ONBOARDING_COMPLETION_ROUTE)
    }, t('skip')))
  }, /*#__PURE__*/_react.default.createElement(_box.default, {
    flexDirection: _designSystem.FLEX_DIRECTION.COLUMN,
    alignItems: _designSystem.ALIGN_ITEMS.CENTER,
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    margin: 4
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: "./images/warning-icon.png"
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    variant: _designSystem.TYPOGRAPHY.h3,
    fontWeight: _designSystem.FONT_WEIGHT.BOLD
  }, t('skipAccountSecurity')), /*#__PURE__*/_react.default.createElement(_box.default, {
    justifyContent: _designSystem.JUSTIFY_CONTENT.CENTER,
    margin: 3
  }, /*#__PURE__*/_react.default.createElement(_checkBox.default, {
    className: "skip-srp-backup-popover__checkbox",
    onClick: () => {
      setChecked(!checked);
    },
    checked: checked,
    dataTestId: "skip-srp-backup-popover-checkbox"
  }), /*#__PURE__*/_react.default.createElement(_typography.default, {
    className: "skip-srp-backup-popover__details",
    variant: _designSystem.TYPOGRAPHY.h7
  }, t('skipAccountSecurityDetails')))));
}

SkipSRPBackup.propTypes = {
  handleClose: _propTypes.default.func
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\pages\\onboarding-flow\\secure-your-wallet\\skip-srp-backup-popover.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\typography.js", {"../../../helpers/constants/design-system":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\helpers\\constants\\design-system.js","../box":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\box\\index.js","@babel/runtime/helpers/defineProperty":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\defineProperty.js","@babel/runtime/helpers/extends":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\extends.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","classnames":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\classnames\\index.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\typography\typography.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Typography;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _designSystem = require("../../../helpers/constants/design-system");

var _box = _interopRequireWildcard(require("../box"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const {
  H6,
  H7,
  H8,
  H9
} = _designSystem.TYPOGRAPHY;

function Typography({
  variant = _designSystem.TYPOGRAPHY.Paragraph,
  className,
  color = _designSystem.COLORS.BLACK,
  tag,
  children,
  fontWeight = 'normal',
  fontStyle = 'normal',
  align,
  overflowWrap,
  boxProps = {},
  margin = [1, 0]
}) {
  const computedClassName = (0, _classnames.default)('typography', className, `typography--${variant}`, `typography--weight-${fontWeight}`, `typography--style-${fontStyle}`, {
    [`typography--align-${align}`]: Boolean(align),
    [`typography--color-${color}`]: Boolean(color),
    [`typography--overflowwrap-${overflowWrap}`]: Boolean(overflowWrap)
  });
  let Tag = tag !== null && tag !== void 0 ? tag : variant;

  if (Tag === _designSystem.TYPOGRAPHY.Paragraph) {
    Tag = 'p';
  } else if ([H7, H8, H9].includes(Tag)) {
    Tag = H6;
  }

  return /*#__PURE__*/_react.default.createElement(_box.default, (0, _extends2.default)({
    margin: margin
  }, boxProps), boxClassName => /*#__PURE__*/_react.default.createElement(Tag, {
    className: (0, _classnames.default)(boxClassName, computedClassName)
  }, children));
}

Typography.propTypes = {
  variant: _propTypes.default.oneOf(Object.values(_designSystem.TYPOGRAPHY)),
  children: _propTypes.default.node.isRequired,
  color: _propTypes.default.oneOf(Object.values(_designSystem.COLORS)),
  className: _propTypes.default.string,
  align: _propTypes.default.oneOf(Object.values(_designSystem.TEXT_ALIGN)),
  boxProps: _propTypes.default.shape(_objectSpread({}, _box.default.propTypes)),
  margin: _box.MultipleSizes,
  fontWeight: _propTypes.default.oneOf(Object.values(_designSystem.FONT_WEIGHT)),
  fontStyle: _propTypes.default.oneOf(Object.values(_designSystem.FONT_STYLE)),
  overflowWrap: _propTypes.default.oneOf(Object.values(_designSystem.OVERFLOW_WRAP)),
  tag: _propTypes.default.oneOf(['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'strong', 'em', 'li', 'div', 'dt', 'dd', 'ul'])
};

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\typography\\typography.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useCopyToClipboard.js", {"../../shared/constants/time":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\shared\\constants\\time.js","./useTimeout":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useTimeout.js","@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","copy-to-clipboard":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\copy-to-clipboard\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\hooks\useCopyToClipboard.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCopyToClipboard = useCopyToClipboard;

var _react = require("react");

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

var _time = require("../../shared/constants/time");

var _useTimeout = require("./useTimeout");

/**
 * useCopyToClipboard
 *
 * @param {number} [delay=3000] - delay in ms
 * @returns {[boolean, Function]}
 */
const DEFAULT_DELAY = _time.SECOND * 3;

function useCopyToClipboard(delay = DEFAULT_DELAY) {
  const [copied, setCopied] = (0, _react.useState)(false);
  const startTimeout = (0, _useTimeout.useTimeout)(() => setCopied(false), delay, false);
  const handleCopy = (0, _react.useCallback)(text => {
    setCopied(true);
    startTimeout();
    (0, _copyToClipboard.default)(text);
  }, [startTimeout]);
  return [copied, handleCopy];
}

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\hooks\\useCopyToClipboard.js",}],
["D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\icon\\copy-icon.component.js", {"@babel/runtime/helpers/interopRequireDefault":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js","prop-types":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\prop-types\\index.js","react":"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\node_modules\\react\\index.js"}, function(){
  with (this) {
    return function() {
      'use strict';
      // source: D:\Building_Projects\blockchain\metamaskextension\metamask-extension-latest\ui\components\ui\icon\copy-icon.component.js
      return function (require, module, exports) {
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

const Copy = ({
  className,
  size,
  color
}) => /*#__PURE__*/_react.default.createElement("svg", {
  className: className,
  width: size,
  height: size,
  viewBox: "0 0 11 11",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, /*#__PURE__*/_react.default.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M0 0H1H9V1H1V9H0V0ZM2 2H11V11H2V2ZM3 3H10V10H3V3Z",
  fill: color
}));

Copy.defaultProps = {
  className: undefined
};
Copy.propTypes = {
  /**
   * Additional className
   */
  className: _propTypes.default.string,

  /**
   * Size of the icon should adhere to 8px grid. e.g: 8, 16, 24, 32, 40
   */
  size: _propTypes.default.number.isRequired,

  /**
   * Color of the icon should be a valid design system color and is required
   */
  color: _propTypes.default.string.isRequired
};
var _default = Copy;
exports.default = _default;

      };
    };
  }
}, {package:"<root>",file:"D:\\Building_Projects\\blockchain\\metamaskextension\\metamask-extension-latest\\ui\\components\\ui\\icon\\copy-icon.component.js",}]],[],{})

//# sourceMappingURL=data:application/json;charset=utf8;base64,
